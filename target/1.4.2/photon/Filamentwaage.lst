
/home/cs/DevelopmentProjects/Filamentwaage/target/1.4.2/photon/Filamentwaage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000053a4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a53c0  080a53c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a53c8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080a53cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005ec  20000070  20000070  00040070  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a543c  080a543c  0003543c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a5464  080a5464  00035464  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000c91d8  00000000  00000000  00035468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000125da  00000000  00000000  000fe640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002590  00000000  00000000  00110c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002b55d  00000000  00000000  001131aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002be15  00000000  00000000  0013e707  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000ad9fc  00000000  00000000  0016a51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001e4d2  00000000  00000000  00217f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00003e98  00000000  00000000  002363ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000ce5c  00000000  00000000  0023a284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 ff1b 	bl	80a3e68 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 ff20 	bl	80a3e7e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a53cc 	.word	0x080a53cc
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	2000065c 	.word	0x2000065c
 80a0058:	2000065c 	.word	0x2000065c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f869 	bl	80a2134 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a5374 	.word	0x080a5374
 80a0084:	080a53bc 	.word	0x080a53bc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b904 	b.w	80a0294 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f913 	bl	80a02b8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b80f 	b.w	80a20b8 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f001 bcad 	b.w	80a19f8 <free>
	...

080a00a0 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a2:	4a03      	ldr	r2, [pc, #12]	; (80a00b0 <__cxa_pure_virtual+0x10>)
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
 80a00a8:	f001 fc1a 	bl	80a18e0 <panic_>
 80a00ac:	e7fe      	b.n	80a00ac <__cxa_pure_virtual+0xc>
 80a00ae:	bf00      	nop
 80a00b0:	080a1811 	.word	0x080a1811

080a00b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b4:	7800      	ldrb	r0, [r0, #0]
 80a00b6:	fab0 f080 	clz	r0, r0
 80a00ba:	0940      	lsrs	r0, r0, #5
 80a00bc:	4770      	bx	lr

080a00be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00be:	2301      	movs	r3, #1
 80a00c0:	7003      	strb	r3, [r0, #0]
 80a00c2:	4770      	bx	lr

080a00c4 <_Z12init_displayv>:
float my_y1 = 20.0; // calibrated mass to be added
long x1 = 0L;
long x0 = 0L;
float avg_size = 10.0; // amount of averages for each mass measurement

void init_display(void) {
 80a00c4:	b537      	push	{r0, r1, r2, r4, r5, lr}

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
 80a00c6:	4c18      	ldr	r4, [pc, #96]	; (80a0128 <_Z12init_displayv+0x64>)
 80a00c8:	2501      	movs	r5, #1
 80a00ca:	9500      	str	r5, [sp, #0]
 80a00cc:	462b      	mov	r3, r5
 80a00ce:	223c      	movs	r2, #60	; 0x3c
 80a00d0:	2102      	movs	r1, #2
 80a00d2:	4620      	mov	r0, r4
 80a00d4:	f000 fba4 	bl	80a0820 <_ZN16Adafruit_SSD13065beginEhhbb>
 80a00d8:	b928      	cbnz	r0, 80a00e6 <_Z12init_displayv+0x22>
    Serial.println(F("SSD1306 allocation failed"));
 80a00da:	f001 fee9 	bl	80a1eb0 <_Z16_fetch_usbserialv>
 80a00de:	4913      	ldr	r1, [pc, #76]	; (80a012c <_Z12init_displayv+0x68>)
 80a00e0:	f002 f8bd 	bl	80a225e <_ZN5Print7printlnEPK19__FlashStringHelper>
 80a00e4:	e7fe      	b.n	80a00e4 <_Z12init_displayv+0x20>
    for(;;); // Don't proceed, loop forever
  }

  display.clearDisplay();
 80a00e6:	4620      	mov	r0, r4
 80a00e8:	f000 fb8d 	bl	80a0806 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1); // Draw 2X-scale text
 80a00ec:	4629      	mov	r1, r5
 80a00ee:	4620      	mov	r0, r4
 80a00f0:	f001 fa80 	bl	80a15f4 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
  display.setFont(&FreeMono9pt7b);
 80a00f4:	4620      	mov	r0, r4
 80a00f6:	490e      	ldr	r1, [pc, #56]	; (80a0130 <_Z12init_displayv+0x6c>)
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 80a00f8:	82e5      	strh	r5, [r4, #22]
 80a00fa:	82a5      	strh	r5, [r4, #20]
 80a00fc:	f001 fa7d 	bl	80a15fa <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 80a0100:	2500      	movs	r5, #0
  display.setCursor(0, 0);
  display.println(F("Filamentwaage"));
 80a0102:	490c      	ldr	r1, [pc, #48]	; (80a0134 <_Z12init_displayv+0x70>)
 80a0104:	4620      	mov	r0, r4
 80a0106:	8225      	strh	r5, [r4, #16]
 80a0108:	8265      	strh	r5, [r4, #18]
 80a010a:	f002 f8a8 	bl	80a225e <_ZN5Print7printlnEPK19__FlashStringHelper>
 80a010e:	2310      	movs	r3, #16
  display.setCursor(0, 16);
  display.println(F("FW Version 0.1"));
 80a0110:	4909      	ldr	r1, [pc, #36]	; (80a0138 <_Z12init_displayv+0x74>)
 80a0112:	4620      	mov	r0, r4
 80a0114:	8225      	strh	r5, [r4, #16]
 80a0116:	8263      	strh	r3, [r4, #18]
 80a0118:	f002 f8a1 	bl	80a225e <_ZN5Print7printlnEPK19__FlashStringHelper>
  display.display();
 80a011c:	4620      	mov	r0, r4
}
 80a011e:	b003      	add	sp, #12
 80a0120:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  display.setFont(&FreeMono9pt7b);
  display.setCursor(0, 0);
  display.println(F("Filamentwaage"));
  display.setCursor(0, 16);
  display.println(F("FW Version 0.1"));
  display.display();
 80a0124:	f000 bdec 	b.w	80a0d00 <_ZN16Adafruit_SSD13067displayEv>
 80a0128:	2000007c 	.word	0x2000007c
 80a012c:	080a4250 	.word	0x080a4250
 80a0130:	080a45ec 	.word	0x080a45ec
 80a0134:	080a426a 	.word	0x080a426a
 80a0138:	080a4278 	.word	0x080a4278

080a013c <_Z15calibrate_scalev>:
}

void calibrate_scale(void) {
 80a013c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  display.clearDisplay();
 80a0140:	4c47      	ldr	r4, [pc, #284]	; (80a0260 <_Z15calibrate_scalev+0x124>)
 80a0142:	2500      	movs	r5, #0
 80a0144:	4620      	mov	r0, r4
 80a0146:	f000 fb5e 	bl	80a0806 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0, 0);
  display.println("Calibration");
 80a014a:	4946      	ldr	r1, [pc, #280]	; (80a0264 <_Z15calibrate_scalev+0x128>)
 80a014c:	4620      	mov	r0, r4
 80a014e:	8225      	strh	r5, [r4, #16]
 80a0150:	8265      	strh	r5, [r4, #18]
 80a0152:	f002 f87a 	bl	80a224a <_ZN5Print7printlnEPKc>
 80a0156:	2310      	movs	r3, #16
  display.setCursor(0, 16);
  display.println("started.");
 80a0158:	4943      	ldr	r1, [pc, #268]	; (80a0268 <_Z15calibrate_scalev+0x12c>)
 80a015a:	4620      	mov	r0, r4
 80a015c:	8263      	strh	r3, [r4, #18]
 80a015e:	8225      	strh	r5, [r4, #16]
 80a0160:	f002 f873 	bl	80a224a <_ZN5Print7printlnEPKc>
  display.display();
 80a0164:	4620      	mov	r0, r4
 80a0166:	f000 fdcb 	bl	80a0d00 <_ZN16Adafruit_SSD13067displayEv>
  Serial.println("Calibration started.");
 80a016a:	f001 fea1 	bl	80a1eb0 <_Z16_fetch_usbserialv>
 80a016e:	493f      	ldr	r1, [pc, #252]	; (80a026c <_Z15calibrate_scalev+0x130>)
 80a0170:	f002 f86b 	bl	80a224a <_ZN5Print7printlnEPKc>
  
  delay(1000); // allow load cell and hx711 to settle
 80a0174:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0178:	f001 ff69 	bl	80a204e <delay>
  // tare procedure
  for (int ii=0;ii<int(avg_size);ii++){
 80a017c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80a0270 <_Z15calibrate_scalev+0x134>
 80a0180:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80a0274 <_Z15calibrate_scalev+0x138>
 80a0184:	f8d8 0000 	ldr.w	r0, [r8]
 80a0188:	f003 fc86 	bl	80a3a98 <__aeabi_f2iz>
 80a018c:	4285      	cmp	r5, r0
 80a018e:	4e38      	ldr	r6, [pc, #224]	; (80a0270 <_Z15calibrate_scalev+0x134>)
 80a0190:	4f38      	ldr	r7, [pc, #224]	; (80a0274 <_Z15calibrate_scalev+0x138>)
 80a0192:	da0c      	bge.n	80a01ae <_Z15calibrate_scalev+0x72>
    delay(10);
 80a0194:	200a      	movs	r0, #10
 80a0196:	f001 ff5a 	bl	80a204e <delay>
    x0+=waage.read();
 80a019a:	4837      	ldr	r0, [pc, #220]	; (80a0278 <_Z15calibrate_scalev+0x13c>)
 80a019c:	f000 f988 	bl	80a04b0 <_ZN7Q2HX7114readEv>
 80a01a0:	f8d9 3000 	ldr.w	r3, [r9]
  display.display();
  Serial.println("Calibration started.");
  
  delay(1000); // allow load cell and hx711 to settle
  // tare procedure
  for (int ii=0;ii<int(avg_size);ii++){
 80a01a4:	3501      	adds	r5, #1
    delay(10);
    x0+=waage.read();
 80a01a6:	4418      	add	r0, r3
 80a01a8:	f8c9 0000 	str.w	r0, [r9]
  display.display();
  Serial.println("Calibration started.");
  
  delay(1000); // allow load cell and hx711 to settle
  // tare procedure
  for (int ii=0;ii<int(avg_size);ii++){
 80a01ac:	e7ea      	b.n	80a0184 <_Z15calibrate_scalev+0x48>
    delay(10);
    x0+=waage.read();
  }
  x0/=long(avg_size);
 80a01ae:	683b      	ldr	r3, [r7, #0]
 80a01b0:	2500      	movs	r5, #0
 80a01b2:	fb93 f3f0 	sdiv	r3, r3, r0
  display.clearDisplay();
 80a01b6:	482a      	ldr	r0, [pc, #168]	; (80a0260 <_Z15calibrate_scalev+0x124>)
  // tare procedure
  for (int ii=0;ii<int(avg_size);ii++){
    delay(10);
    x0+=waage.read();
  }
  x0/=long(avg_size);
 80a01b8:	603b      	str	r3, [r7, #0]
  display.clearDisplay();
 80a01ba:	f000 fb24 	bl	80a0806 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0, 0);
  display.println("Add calibrated");
 80a01be:	492f      	ldr	r1, [pc, #188]	; (80a027c <_Z15calibrate_scalev+0x140>)
 80a01c0:	4827      	ldr	r0, [pc, #156]	; (80a0260 <_Z15calibrate_scalev+0x124>)
 80a01c2:	8225      	strh	r5, [r4, #16]
 80a01c4:	8265      	strh	r5, [r4, #18]
 80a01c6:	f002 f840 	bl	80a224a <_ZN5Print7printlnEPKc>
 80a01ca:	2310      	movs	r3, #16
  display.setCursor(0, 16);
  display.println("mass.");
 80a01cc:	492c      	ldr	r1, [pc, #176]	; (80a0280 <_Z15calibrate_scalev+0x144>)
 80a01ce:	4824      	ldr	r0, [pc, #144]	; (80a0260 <_Z15calibrate_scalev+0x124>)
 80a01d0:	8263      	strh	r3, [r4, #18]
 80a01d2:	8225      	strh	r5, [r4, #16]
 80a01d4:	f002 f839 	bl	80a224a <_ZN5Print7printlnEPKc>
  display.display();
 80a01d8:	4821      	ldr	r0, [pc, #132]	; (80a0260 <_Z15calibrate_scalev+0x124>)
 80a01da:	f000 fd91 	bl	80a0d00 <_ZN16Adafruit_SSD13067displayEv>
  Serial.println("Add calibrated mass.");
 80a01de:	f001 fe67 	bl	80a1eb0 <_Z16_fetch_usbserialv>
 80a01e2:	4928      	ldr	r1, [pc, #160]	; (80a0284 <_Z15calibrate_scalev+0x148>)
 80a01e4:	f002 f831 	bl	80a224a <_ZN5Print7printlnEPKc>
  // calibration procedure (mass should be added equal to my_y1)
  int ii = 1;
  while(true){
    if (waage.read()<x0+10000){
 80a01e8:	4823      	ldr	r0, [pc, #140]	; (80a0278 <_Z15calibrate_scalev+0x13c>)
 80a01ea:	683d      	ldr	r5, [r7, #0]
 80a01ec:	f000 f960 	bl	80a04b0 <_ZN7Q2HX7114readEv>
 80a01f0:	f505 551c 	add.w	r5, r5, #9984	; 0x2700
 80a01f4:	350f      	adds	r5, #15
 80a01f6:	4285      	cmp	r5, r0
 80a01f8:	daf6      	bge.n	80a01e8 <_Z15calibrate_scalev+0xac>
    } else {
      ii++;
      delay(2000);
 80a01fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a01fe:	f001 ff26 	bl	80a204e <delay>
 80a0202:	4f21      	ldr	r7, [pc, #132]	; (80a0288 <_Z15calibrate_scalev+0x14c>)
      for (int jj=0;jj<int(avg_size);jj++){
 80a0204:	2500      	movs	r5, #0
 80a0206:	6830      	ldr	r0, [r6, #0]
 80a0208:	f003 fc46 	bl	80a3a98 <__aeabi_f2iz>
 80a020c:	4285      	cmp	r5, r0
 80a020e:	4a1e      	ldr	r2, [pc, #120]	; (80a0288 <_Z15calibrate_scalev+0x14c>)
 80a0210:	da07      	bge.n	80a0222 <_Z15calibrate_scalev+0xe6>
        x1+=waage.read();
 80a0212:	4819      	ldr	r0, [pc, #100]	; (80a0278 <_Z15calibrate_scalev+0x13c>)
 80a0214:	f000 f94c 	bl	80a04b0 <_ZN7Q2HX7114readEv>
 80a0218:	683b      	ldr	r3, [r7, #0]
  while(true){
    if (waage.read()<x0+10000){
    } else {
      ii++;
      delay(2000);
      for (int jj=0;jj<int(avg_size);jj++){
 80a021a:	3501      	adds	r5, #1
        x1+=waage.read();
 80a021c:	4418      	add	r0, r3
 80a021e:	6038      	str	r0, [r7, #0]
  while(true){
    if (waage.read()<x0+10000){
    } else {
      ii++;
      delay(2000);
      for (int jj=0;jj<int(avg_size);jj++){
 80a0220:	e7f1      	b.n	80a0206 <_Z15calibrate_scalev+0xca>
        x1+=waage.read();
      }
      x1/=long(avg_size);
 80a0222:	6813      	ldr	r3, [r2, #0]
 80a0224:	2500      	movs	r5, #0
 80a0226:	fb93 f3f0 	sdiv	r3, r3, r0
      break;
    }
  }
  display.clearDisplay();
 80a022a:	480d      	ldr	r0, [pc, #52]	; (80a0260 <_Z15calibrate_scalev+0x124>)
      ii++;
      delay(2000);
      for (int jj=0;jj<int(avg_size);jj++){
        x1+=waage.read();
      }
      x1/=long(avg_size);
 80a022c:	6013      	str	r3, [r2, #0]
      break;
    }
  }
  display.clearDisplay();
 80a022e:	f000 faea 	bl	80a0806 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(0, 0);
  display.println("Calibration");
 80a0232:	490c      	ldr	r1, [pc, #48]	; (80a0264 <_Z15calibrate_scalev+0x128>)
 80a0234:	480a      	ldr	r0, [pc, #40]	; (80a0260 <_Z15calibrate_scalev+0x124>)
 80a0236:	8225      	strh	r5, [r4, #16]
 80a0238:	8265      	strh	r5, [r4, #18]
 80a023a:	f002 f806 	bl	80a224a <_ZN5Print7printlnEPKc>
 80a023e:	2310      	movs	r3, #16
  display.setCursor(0, 16);
  display.println("complete.");
 80a0240:	4912      	ldr	r1, [pc, #72]	; (80a028c <_Z15calibrate_scalev+0x150>)
 80a0242:	4807      	ldr	r0, [pc, #28]	; (80a0260 <_Z15calibrate_scalev+0x124>)
 80a0244:	8263      	strh	r3, [r4, #18]
 80a0246:	8225      	strh	r5, [r4, #16]
 80a0248:	f001 ffff 	bl	80a224a <_ZN5Print7printlnEPKc>
  display.display();
 80a024c:	4804      	ldr	r0, [pc, #16]	; (80a0260 <_Z15calibrate_scalev+0x124>)
 80a024e:	f000 fd57 	bl	80a0d00 <_ZN16Adafruit_SSD13067displayEv>
  Serial.println("Calibration complete.");
 80a0252:	f001 fe2d 	bl	80a1eb0 <_Z16_fetch_usbserialv>
}
 80a0256:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  display.setCursor(0, 0);
  display.println("Calibration");
  display.setCursor(0, 16);
  display.println("complete.");
  display.display();
  Serial.println("Calibration complete.");
 80a025a:	490d      	ldr	r1, [pc, #52]	; (80a0290 <_Z15calibrate_scalev+0x154>)
 80a025c:	f001 bff5 	b.w	80a224a <_ZN5Print7printlnEPKc>
 80a0260:	2000007c 	.word	0x2000007c
 80a0264:	080a4287 	.word	0x080a4287
 80a0268:	080a429f 	.word	0x080a429f
 80a026c:	080a4293 	.word	0x080a4293
 80a0270:	20000000 	.word	0x20000000
 80a0274:	200000cc 	.word	0x200000cc
 80a0278:	20000074 	.word	0x20000074
 80a027c:	080a42a8 	.word	0x080a42a8
 80a0280:	080a42c6 	.word	0x080a42c6
 80a0284:	080a42b7 	.word	0x080a42b7
 80a0288:	200000d0 	.word	0x200000d0
 80a028c:	080a42d8 	.word	0x080a42d8
 80a0290:	080a42cc 	.word	0x080a42cc

080a0294 <setup>:
}

void setup(void) {
 80a0294:	b508      	push	{r3, lr}
    Serial.begin(115200);
 80a0296:	f001 fe0b 	bl	80a1eb0 <_Z16_fetch_usbserialv>
 80a029a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a029e:	f001 fded 	bl	80a1e7c <_ZN9USBSerial5beginEl>
    pinMode(TARA_BUTTON, INPUT);
 80a02a2:	2100      	movs	r1, #0
 80a02a4:	2004      	movs	r0, #4
 80a02a6:	f002 fb39 	bl	80a291c <pinMode>
    init_display();
 80a02aa:	f7ff ff0b 	bl	80a00c4 <_Z12init_displayv>
    calibrate_scale();
}
 80a02ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void setup(void) {
    Serial.begin(115200);
    pinMode(TARA_BUTTON, INPUT);
    init_display();
    calibrate_scale();
 80a02b2:	f7ff bf43 	b.w	80a013c <_Z15calibrate_scalev>
	...

080a02b8 <loop>:
}

void loop(void) {
 80a02b8:	b570      	push	{r4, r5, r6, lr}

  char str_weight[32];
  // averaging reading
  long reading = 0;

  for (int jj=0;jj<int(avg_size);jj++){
 80a02ba:	2500      	movs	r5, #0

void loop(void) {

  char str_weight[32];
  // averaging reading
  long reading = 0;
 80a02bc:	462c      	mov	r4, r5

  for (int jj=0;jj<int(avg_size);jj++){
 80a02be:	4e2f      	ldr	r6, [pc, #188]	; (80a037c <loop+0xc4>)
    pinMode(TARA_BUTTON, INPUT);
    init_display();
    calibrate_scale();
}

void loop(void) {
 80a02c0:	b086      	sub	sp, #24

  char str_weight[32];
  // averaging reading
  long reading = 0;

  for (int jj=0;jj<int(avg_size);jj++){
 80a02c2:	6830      	ldr	r0, [r6, #0]
 80a02c4:	f003 fbe8 	bl	80a3a98 <__aeabi_f2iz>
 80a02c8:	4285      	cmp	r5, r0
 80a02ca:	da05      	bge.n	80a02d8 <loop+0x20>
    reading+=waage.read();
 80a02cc:	482c      	ldr	r0, [pc, #176]	; (80a0380 <loop+0xc8>)
 80a02ce:	f000 f8ef 	bl	80a04b0 <_ZN7Q2HX7114readEv>

  char str_weight[32];
  // averaging reading
  long reading = 0;

  for (int jj=0;jj<int(avg_size);jj++){
 80a02d2:	3501      	adds	r5, #1
    reading+=waage.read();
 80a02d4:	4404      	add	r4, r0

  char str_weight[32];
  // averaging reading
  long reading = 0;

  for (int jj=0;jj<int(avg_size);jj++){
 80a02d6:	e7f4      	b.n	80a02c2 <loop+0xa>
    reading+=waage.read();
  }
  
  reading/=long(avg_size);
 80a02d8:	fb94 f4f0 	sdiv	r4, r4, r0
  // calculating mass based on calibration and linear fit
  float ratio_1 = (float) (reading-x0);
 80a02dc:	4b29      	ldr	r3, [pc, #164]	; (80a0384 <loop+0xcc>)
 80a02de:	681d      	ldr	r5, [r3, #0]
  float ratio_2 = (float) (x1-x0);
  float ratio = ratio_1/ratio_2;
  float mass = my_y1*ratio;
 80a02e0:	1b60      	subs	r0, r4, r5
 80a02e2:	f003 fa35 	bl	80a3750 <__aeabi_i2f>
  }
  
  reading/=long(avg_size);
  // calculating mass based on calibration and linear fit
  float ratio_1 = (float) (reading-x0);
  float ratio_2 = (float) (x1-x0);
 80a02e6:	4b28      	ldr	r3, [pc, #160]	; (80a0388 <loop+0xd0>)
  float ratio = ratio_1/ratio_2;
  float mass = my_y1*ratio;
 80a02e8:	4606      	mov	r6, r0
 80a02ea:	6818      	ldr	r0, [r3, #0]
 80a02ec:	1b40      	subs	r0, r0, r5
 80a02ee:	f003 fa2f 	bl	80a3750 <__aeabi_i2f>
 80a02f2:	4601      	mov	r1, r0
 80a02f4:	4630      	mov	r0, r6
 80a02f6:	f003 fb33 	bl	80a3960 <__aeabi_fdiv>
 80a02fa:	4b24      	ldr	r3, [pc, #144]	; (80a038c <loop+0xd4>)
 80a02fc:	2500      	movs	r5, #0
 80a02fe:	6819      	ldr	r1, [r3, #0]
 80a0300:	f003 fa7a 	bl	80a37f8 <__aeabi_fmul>
 80a0304:	4606      	mov	r6, r0
  Serial.print("Raw: ");
 80a0306:	f001 fdd3 	bl	80a1eb0 <_Z16_fetch_usbserialv>
 80a030a:	4921      	ldr	r1, [pc, #132]	; (80a0390 <loop+0xd8>)
 80a030c:	f001 ff8a 	bl	80a2224 <_ZN5Print5printEPKc>
  Serial.print(reading);
 80a0310:	f001 fdce 	bl	80a1eb0 <_Z16_fetch_usbserialv>
 80a0314:	220a      	movs	r2, #10
 80a0316:	4621      	mov	r1, r4
 80a0318:	f001 ffcf 	bl	80a22ba <_ZN5Print5printEli>
  Serial.print(", ");
 80a031c:	f001 fdc8 	bl	80a1eb0 <_Z16_fetch_usbserialv>
 80a0320:	491c      	ldr	r1, [pc, #112]	; (80a0394 <loop+0xdc>)
 80a0322:	f001 ff7f 	bl	80a2224 <_ZN5Print5printEPKc>
  Serial.println(mass);
 80a0326:	f001 fdc3 	bl	80a1eb0 <_Z16_fetch_usbserialv>
 80a032a:	4604      	mov	r4, r0
 80a032c:	4630      	mov	r0, r6
 80a032e:	f002 fe09 	bl	80a2f44 <__aeabi_f2d>
 80a0332:	2302      	movs	r3, #2
 80a0334:	4602      	mov	r2, r0
 80a0336:	4620      	mov	r0, r4
  
  display.clearDisplay();
 80a0338:	4c17      	ldr	r4, [pc, #92]	; (80a0398 <loop+0xe0>)
  float ratio = ratio_1/ratio_2;
  float mass = my_y1*ratio;
  Serial.print("Raw: ");
  Serial.print(reading);
  Serial.print(", ");
  Serial.println(mass);
 80a033a:	9300      	str	r3, [sp, #0]
 80a033c:	460b      	mov	r3, r1
 80a033e:	f002 f88d 	bl	80a245c <_ZN5Print7printlnEdi>
  
  display.clearDisplay();
 80a0342:	4620      	mov	r0, r4
 80a0344:	f000 fa5f 	bl	80a0806 <_ZN16Adafruit_SSD130612clearDisplayEv>
 80a0348:	8225      	strh	r5, [r4, #16]
 80a034a:	8265      	strh	r5, [r4, #18]
  display.setCursor(0, 0);
  display.println("Weight:");
 80a034c:	4913      	ldr	r1, [pc, #76]	; (80a039c <loop+0xe4>)
 80a034e:	4620      	mov	r0, r4
 80a0350:	f001 ff7b 	bl	80a224a <_ZN5Print7printlnEPKc>
 80a0354:	2310      	movs	r3, #16
 80a0356:	8263      	strh	r3, [r4, #18]
  display.setCursor(0, 16);
  display.println(String(mass));
 80a0358:	2206      	movs	r2, #6
 80a035a:	4631      	mov	r1, r6
 80a035c:	8225      	strh	r5, [r4, #16]
 80a035e:	a802      	add	r0, sp, #8
 80a0360:	f002 fa46 	bl	80a27f0 <_ZN6StringC1Efi>
 80a0364:	9902      	ldr	r1, [sp, #8]
 80a0366:	4620      	mov	r0, r4
 80a0368:	f001 ff6f 	bl	80a224a <_ZN5Print7printlnEPKc>
 80a036c:	a802      	add	r0, sp, #8
 80a036e:	f002 f9e7 	bl	80a2740 <_ZN6StringD1Ev>
  display.display();
 80a0372:	4620      	mov	r0, r4
 80a0374:	f000 fcc4 	bl	80a0d00 <_ZN16Adafruit_SSD13067displayEv>

}
 80a0378:	b006      	add	sp, #24
 80a037a:	bd70      	pop	{r4, r5, r6, pc}
 80a037c:	20000000 	.word	0x20000000
 80a0380:	20000074 	.word	0x20000074
 80a0384:	200000cc 	.word	0x200000cc
 80a0388:	200000d0 	.word	0x200000d0
 80a038c:	20000004 	.word	0x20000004
 80a0390:	080a42e2 	.word	0x080a42e2
 80a0394:	080a42e8 	.word	0x080a42e8
 80a0398:	2000007c 	.word	0x2000007c
 80a039c:	080a42eb 	.word	0x080a42eb

080a03a0 <_GLOBAL__sub_I_display>:
 80a03a0:	b530      	push	{r4, r5, lr}
 80a03a2:	b085      	sub	sp, #20
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a03a4:	f001 fa74 	bl	80a1890 <HAL_Pin_Map>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
 80a03a8:	f002 fa3a 	bl	80a2820 <_Z19__fetch_global_Wirev>
 80a03ac:	4c10      	ldr	r4, [pc, #64]	; (80a03f0 <_GLOBAL__sub_I_display+0x50>)
 80a03ae:	4a11      	ldr	r2, [pc, #68]	; (80a03f4 <_GLOBAL__sub_I_display+0x54>)
 80a03b0:	4b11      	ldr	r3, [pc, #68]	; (80a03f8 <_GLOBAL__sub_I_display+0x58>)
 80a03b2:	f04f 31ff 	mov.w	r1, #4294967295
 80a03b6:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80a03ba:	4d10      	ldr	r5, [pc, #64]	; (80a03fc <_GLOBAL__sub_I_display+0x5c>)
 80a03bc:	4603      	mov	r3, r0
 80a03be:	2220      	movs	r2, #32
 80a03c0:	2180      	movs	r1, #128	; 0x80
 80a03c2:	4620      	mov	r0, r4
 80a03c4:	f000 f920 	bl	80a0608 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
 80a03c8:	4620      	mov	r0, r4

Q2HX711 waage(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
 80a03ca:	4c0d      	ldr	r4, [pc, #52]	; (80a0400 <_GLOBAL__sub_I_display+0x60>)
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
 80a03cc:	462a      	mov	r2, r5
 80a03ce:	490d      	ldr	r1, [pc, #52]	; (80a0404 <_GLOBAL__sub_I_display+0x64>)
 80a03d0:	f002 fb05 	bl	80a29de <__aeabi_atexit>

Q2HX711 waage(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
 80a03d4:	2203      	movs	r2, #3
 80a03d6:	2102      	movs	r1, #2
 80a03d8:	4620      	mov	r0, r4
 80a03da:	f000 f84d 	bl	80a0478 <_ZN7Q2HX711C1Ehh>
 80a03de:	462a      	mov	r2, r5
 80a03e0:	4620      	mov	r0, r4
 80a03e2:	4909      	ldr	r1, [pc, #36]	; (80a0408 <_GLOBAL__sub_I_display+0x68>)
  display.println("Weight:");
  display.setCursor(0, 16);
  display.println(String(mass));
  display.display();

}
 80a03e4:	b005      	add	sp, #20
 80a03e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

Q2HX711 waage(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
 80a03ea:	f002 baf8 	b.w	80a29de <__aeabi_atexit>
 80a03ee:	bf00      	nop
 80a03f0:	2000007c 	.word	0x2000007c
 80a03f4:	00061a80 	.word	0x00061a80
 80a03f8:	000186a0 	.word	0x000186a0
 80a03fc:	20000070 	.word	0x20000070
 80a0400:	20000074 	.word	0x20000074
 80a0404:	080a0515 	.word	0x080a0515
 80a0408:	080a0469 	.word	0x080a0469

080a040c <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a040c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a040e:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 80a0410:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a0412:	4608      	mov	r0, r1
 80a0414:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 80a0416:	b133      	cbz	r3, 80a0426 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 80a0418:	b93d      	cbnz	r5, 80a042a <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 80a041a:	490c      	ldr	r1, [pc, #48]	; (80a044c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 80a041c:	b004      	add	sp, #16
 80a041e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 80a0422:	f001 beff 	b.w	80a2224 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 80a0426:	4b0a      	ldr	r3, [pc, #40]	; (80a0450 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 80a0428:	e000      	b.n	80a042c <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 80a042a:	4b0a      	ldr	r3, [pc, #40]	; (80a0454 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 80a042c:	7b16      	ldrb	r6, [r2, #12]
 80a042e:	4c0a      	ldr	r4, [pc, #40]	; (80a0458 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 80a0430:	490a      	ldr	r1, [pc, #40]	; (80a045c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a0432:	7b52      	ldrb	r2, [r2, #13]
 80a0434:	2e01      	cmp	r6, #1
 80a0436:	bf08      	it	eq
 80a0438:	4621      	moveq	r1, r4
 80a043a:	9202      	str	r2, [sp, #8]
 80a043c:	9101      	str	r1, [sp, #4]
 80a043e:	9500      	str	r5, [sp, #0]
 80a0440:	4a07      	ldr	r2, [pc, #28]	; (80a0460 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80a0442:	2100      	movs	r1, #0
 80a0444:	f002 f818 	bl	80a2478 <_ZN5Print11printf_implEbPKcz>
  }
 80a0448:	b004      	add	sp, #16
 80a044a:	bd70      	pop	{r4, r5, r6, pc}
 80a044c:	080a4615 	.word	0x080a4615
 80a0450:	080a529c 	.word	0x080a529c
 80a0454:	080a4604 	.word	0x080a4604
 80a0458:	080a460d 	.word	0x080a460d
 80a045c:	080a4611 	.word	0x080a4611
 80a0460:	080a462b 	.word	0x080a462b

080a0464 <_GLOBAL__sub_I__ZN4U8X85writeEh>:
 80a0464:	f001 ba14 	b.w	80a1890 <HAL_Pin_Map>

080a0468 <_ZN7Q2HX711D1Ev>:
  pinMode(CLOCK_PIN, OUTPUT);
  pinMode(OUT_PIN, INPUT);
}

Q2HX711::~Q2HX711() {
}
 80a0468:	4770      	bx	lr

080a046a <_ZN7Q2HX711D0Ev>:
  GAIN = 1;
  pinMode(CLOCK_PIN, OUTPUT);
  pinMode(OUT_PIN, INPUT);
}

Q2HX711::~Q2HX711() {
 80a046a:	b510      	push	{r4, lr}
 80a046c:	4604      	mov	r4, r0
}
 80a046e:	2108      	movs	r1, #8
 80a0470:	f002 faba 	bl	80a29e8 <_ZdlPvj>
 80a0474:	4620      	mov	r0, r4
 80a0476:	bd10      	pop	{r4, pc}

080a0478 <_ZN7Q2HX711C1Ehh>:
#include "WProgram.h"
#endif

#include "Q2HX711.h"

Q2HX711::Q2HX711(byte output_pin, byte clock_pin) {
 80a0478:	b510      	push	{r4, lr}
 80a047a:	4604      	mov	r4, r0
 80a047c:	4b07      	ldr	r3, [pc, #28]	; (80a049c <_ZN7Q2HX711C1Ehh+0x24>)
  CLOCK_PIN  = clock_pin;
  OUT_PIN  = output_pin;
 80a047e:	7141      	strb	r1, [r0, #5]
  GAIN = 1;
 80a0480:	2101      	movs	r1, #1
#include "WProgram.h"
#endif

#include "Q2HX711.h"

Q2HX711::Q2HX711(byte output_pin, byte clock_pin) {
 80a0482:	6003      	str	r3, [r0, #0]
  CLOCK_PIN  = clock_pin;
 80a0484:	7102      	strb	r2, [r0, #4]
  OUT_PIN  = output_pin;
  GAIN = 1;
 80a0486:	7181      	strb	r1, [r0, #6]
  pinMode(CLOCK_PIN, OUTPUT);
 80a0488:	4610      	mov	r0, r2
 80a048a:	f002 fa47 	bl	80a291c <pinMode>
  pinMode(OUT_PIN, INPUT);
 80a048e:	7960      	ldrb	r0, [r4, #5]
 80a0490:	2100      	movs	r1, #0
 80a0492:	f002 fa43 	bl	80a291c <pinMode>
}
 80a0496:	4620      	mov	r0, r4
 80a0498:	bd10      	pop	{r4, pc}
 80a049a:	bf00      	nop
 80a049c:	080a4654 	.word	0x080a4654

080a04a0 <_ZN7Q2HX71111readyToSendEv>:

Q2HX711::~Q2HX711() {
}

bool Q2HX711::readyToSend() {
 80a04a0:	b508      	push	{r3, lr}
  return digitalRead(OUT_PIN) == LOW;
 80a04a2:	7940      	ldrb	r0, [r0, #5]
 80a04a4:	f002 fa64 	bl	80a2970 <digitalRead>
}
 80a04a8:	fab0 f080 	clz	r0, r0
 80a04ac:	0940      	lsrs	r0, r0, #5
 80a04ae:	bd08      	pop	{r3, pc}

080a04b0 <_ZN7Q2HX7114readEv>:

  digitalWrite(CLOCK_PIN, LOW);
  read();
}

long Q2HX711::read() {
 80a04b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a04b2:	4604      	mov	r4, r0
   while (!readyToSend());
 80a04b4:	4620      	mov	r0, r4
 80a04b6:	f7ff fff3 	bl	80a04a0 <_ZN7Q2HX71111readyToSendEv>
 80a04ba:	2800      	cmp	r0, #0
 80a04bc:	d0fa      	beq.n	80a04b4 <_ZN7Q2HX7114readEv+0x4>
 80a04be:	2503      	movs	r5, #3

  byte data[3];

  for (byte j = 3; j--;) {
 80a04c0:	3d01      	subs	r5, #1
 80a04c2:	b2ed      	uxtb	r5, r5
 80a04c4:	2dff      	cmp	r5, #255	; 0xff
 80a04c6:	d101      	bne.n	80a04cc <_ZN7Q2HX7114readEv+0x1c>
 80a04c8:	2500      	movs	r5, #0
 80a04ca:	e009      	b.n	80a04e0 <_ZN7Q2HX7114readEv+0x30>
      data[j] = shiftIn(OUT_PIN,CLOCK_PIN, MSBFIRST);
 80a04cc:	2201      	movs	r2, #1
 80a04ce:	7921      	ldrb	r1, [r4, #4]
 80a04d0:	7960      	ldrb	r0, [r4, #5]
 80a04d2:	f002 fa60 	bl	80a2996 <shiftIn>
 80a04d6:	ab02      	add	r3, sp, #8
 80a04d8:	442b      	add	r3, r5
 80a04da:	f803 0c04 	strb.w	r0, [r3, #-4]
long Q2HX711::read() {
   while (!readyToSend());

  byte data[3];

  for (byte j = 3; j--;) {
 80a04de:	e7ef      	b.n	80a04c0 <_ZN7Q2HX7114readEv+0x10>
      data[j] = shiftIn(OUT_PIN,CLOCK_PIN, MSBFIRST);
  }

  // set gain
  for (int i = 0; i < GAIN; i++) {
 80a04e0:	79a3      	ldrb	r3, [r4, #6]
 80a04e2:	429d      	cmp	r5, r3
 80a04e4:	da09      	bge.n	80a04fa <_ZN7Q2HX7114readEv+0x4a>
    digitalWrite(CLOCK_PIN, HIGH);
 80a04e6:	2101      	movs	r1, #1
 80a04e8:	7920      	ldrb	r0, [r4, #4]
 80a04ea:	f002 fa28 	bl	80a293e <digitalWrite>
    digitalWrite(CLOCK_PIN, LOW);
 80a04ee:	2100      	movs	r1, #0
 80a04f0:	7920      	ldrb	r0, [r4, #4]
 80a04f2:	f002 fa24 	bl	80a293e <digitalWrite>
  for (byte j = 3; j--;) {
      data[j] = shiftIn(OUT_PIN,CLOCK_PIN, MSBFIRST);
  }

  // set gain
  for (int i = 0; i < GAIN; i++) {
 80a04f6:	3501      	adds	r5, #1
 80a04f8:	e7f2      	b.n	80a04e0 <_ZN7Q2HX7114readEv+0x30>
    digitalWrite(CLOCK_PIN, HIGH);
    digitalWrite(CLOCK_PIN, LOW);
  }

  data[2] ^= 0x80;
  return ((uint32_t) data[2] << 16) | ((uint32_t) data[1] << 8) | (uint32_t) data[0];
 80a04fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a04fe:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80a0502:	f083 0380 	eor.w	r3, r3, #128	; 0x80
}
 80a0506:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a050a:	b003      	add	sp, #12
 80a050c:	bd30      	pop	{r4, r5, pc}

080a050e <_GLOBAL__sub_I__ZN7Q2HX711C2Ehh>:
 80a050e:	f001 b9bf 	b.w	80a1890 <HAL_Pin_Map>
	...

080a0514 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 80a0514:	b510      	push	{r4, lr}
 80a0516:	4b04      	ldr	r3, [pc, #16]	; (80a0528 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
 80a0518:	4604      	mov	r4, r0
 80a051a:	6003      	str	r3, [r0, #0]
  if(buffer) {
 80a051c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a051e:	b108      	cbz	r0, 80a0524 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
 80a0520:	f001 fa6a 	bl	80a19f8 <free>
    buffer = NULL;
  }
}
 80a0524:	4620      	mov	r0, r4
 80a0526:	bd10      	pop	{r4, pc}
 80a0528:	080a4698 	.word	0x080a4698

080a052c <_ZN16Adafruit_SSD1306D0Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
 80a052c:	b510      	push	{r4, lr}
 80a052e:	4604      	mov	r4, r0
  if(buffer) {
    free(buffer);
    buffer = NULL;
  }
}
 80a0530:	f7ff fff0 	bl	80a0514 <_ZN16Adafruit_SSD1306D1Ev>
 80a0534:	4620      	mov	r0, r4
 80a0536:	2150      	movs	r1, #80	; 0x50
 80a0538:	f002 fa56 	bl	80a29e8 <_ZdlPvj>
 80a053c:	4620      	mov	r0, r4
 80a053e:	bd10      	pop	{r4, pc}

080a0540 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a0540:	2900      	cmp	r1, #0
    @return None (void).
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0542:	b530      	push	{r4, r5, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
 80a0544:	db5e      	blt.n	80a0604 <_ZN16Adafruit_SSD13069drawPixelEsst+0xc4>
 80a0546:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 80a054a:	428c      	cmp	r4, r1
 80a054c:	dd5a      	ble.n	80a0604 <_ZN16Adafruit_SSD13069drawPixelEsst+0xc4>
 80a054e:	2a00      	cmp	r2, #0
 80a0550:	db58      	blt.n	80a0604 <_ZN16Adafruit_SSD13069drawPixelEsst+0xc4>
 80a0552:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 80a0556:	4294      	cmp	r4, r2
 80a0558:	dc00      	bgt.n	80a055c <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c>
 80a055a:	bd30      	pop	{r4, r5, pc}
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
 80a055c:	7e84      	ldrb	r4, [r0, #26]
 80a055e:	2c02      	cmp	r4, #2
 80a0560:	d107      	bne.n	80a0572 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
      break;
     case 2:
      x = WIDTH  - x - 1;
 80a0562:	8904      	ldrh	r4, [r0, #8]
 80a0564:	3c01      	subs	r4, #1
 80a0566:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
 80a0568:	8944      	ldrh	r4, [r0, #10]
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
      break;
     case 2:
      x = WIDTH  - x - 1;
 80a056a:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
 80a056c:	3c01      	subs	r4, #1
 80a056e:	1aa2      	subs	r2, r4, r2
 80a0570:	e006      	b.n	80a0580 <_ZN16Adafruit_SSD13069drawPixelEsst+0x40>
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
 80a0572:	2c03      	cmp	r4, #3
 80a0574:	d13c      	bne.n	80a05f0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xb0>
     case 2:
      x = WIDTH  - x - 1;
      y = HEIGHT - y - 1;
      break;
     case 3:
      ssd1306_swap(x, y);
 80a0576:	460d      	mov	r5, r1
      y = HEIGHT - y - 1;
 80a0578:	8944      	ldrh	r4, [r0, #10]
     case 2:
      x = WIDTH  - x - 1;
      y = HEIGHT - y - 1;
      break;
     case 3:
      ssd1306_swap(x, y);
 80a057a:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
 80a057c:	3c01      	subs	r4, #1
 80a057e:	1b62      	subs	r2, r4, r5
 80a0580:	b212      	sxth	r2, r2
      break;
    }
    switch(color) {
 80a0582:	2b01      	cmp	r3, #1
 80a0584:	d003      	beq.n	80a058e <_ZN16Adafruit_SSD13069drawPixelEsst+0x4e>
 80a0586:	d311      	bcc.n	80a05ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
 80a0588:	2b02      	cmp	r3, #2
 80a058a:	d020      	beq.n	80a05ce <_ZN16Adafruit_SSD13069drawPixelEsst+0x8e>
 80a058c:	bd30      	pop	{r4, r5, pc}
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
 80a058e:	2408      	movs	r4, #8
 80a0590:	fb92 f4f4 	sdiv	r4, r2, r4
 80a0594:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80a0598:	f002 0207 	and.w	r2, r2, #7
 80a059c:	fb05 1104 	mla	r1, r5, r4, r1
 80a05a0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80a05a2:	4093      	lsls	r3, r2
 80a05a4:	5c60      	ldrb	r0, [r4, r1]
 80a05a6:	4303      	orrs	r3, r0
 80a05a8:	5463      	strb	r3, [r4, r1]
 80a05aa:	bd30      	pop	{r4, r5, pc}
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
 80a05ac:	2308      	movs	r3, #8
 80a05ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80a05b2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a05b6:	f002 0207 	and.w	r2, r2, #7
 80a05ba:	fb04 1103 	mla	r1, r4, r3, r1
 80a05be:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80a05c0:	2001      	movs	r0, #1
 80a05c2:	5c63      	ldrb	r3, [r4, r1]
 80a05c4:	fa00 f202 	lsl.w	r2, r0, r2
 80a05c8:	ea23 0202 	bic.w	r2, r3, r2
 80a05cc:	e00e      	b.n	80a05ec <_ZN16Adafruit_SSD13069drawPixelEsst+0xac>
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
 80a05ce:	2308      	movs	r3, #8
 80a05d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80a05d4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a05d8:	f002 0207 	and.w	r2, r2, #7
 80a05dc:	fb04 1103 	mla	r1, r4, r3, r1
 80a05e0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80a05e2:	2001      	movs	r0, #1
 80a05e4:	5c63      	ldrb	r3, [r4, r1]
 80a05e6:	fa00 f202 	lsl.w	r2, r0, r2
 80a05ea:	405a      	eors	r2, r3
 80a05ec:	5462      	strb	r2, [r4, r1]
    }
  }
}
 80a05ee:	bd30      	pop	{r4, r5, pc}
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
 80a05f0:	2c01      	cmp	r4, #1
 80a05f2:	d1c6      	bne.n	80a0582 <_ZN16Adafruit_SSD13069drawPixelEsst+0x42>
     case 1:
      ssd1306_swap(x, y);
 80a05f4:	4051      	eors	r1, r2
      x = WIDTH - x - 1;
 80a05f6:	8904      	ldrh	r4, [r0, #8]
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
     case 1:
      ssd1306_swap(x, y);
 80a05f8:	404a      	eors	r2, r1
      x = WIDTH - x - 1;
 80a05fa:	3c01      	subs	r4, #1
 80a05fc:	4051      	eors	r1, r2
 80a05fe:	1a61      	subs	r1, r4, r1
 80a0600:	b209      	sxth	r1, r1
 80a0602:	e7be      	b.n	80a0582 <_ZN16Adafruit_SSD13069drawPixelEsst+0x42>
 80a0604:	bd30      	pop	{r4, r5, pc}
	...

080a0608 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
            software, which operates I2C at a fixed 100 KHz.)
    @return Adafruit_SSD1306 object.
    @note   Call the object's begin() function before use -- buffer
            allocation is performed there!
*/
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
 80a0608:	b570      	push	{r4, r5, r6, lr}
 80a060a:	4604      	mov	r4, r0
 80a060c:	461e      	mov	r6, r3
  int8_t rst_pin, uint32_t clkDuring, uint32_t clkAfter) :
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
  mosiPin(-1), clkPin(-1), dcPin(-1), csPin(-1), rstPin(rst_pin),
  wireClk(clkDuring), restoreClk(clkAfter) {
 80a060e:	f000 fd93 	bl	80a1138 <_ZN12Adafruit_GFXC1Ess>
 80a0612:	4b14      	ldr	r3, [pc, #80]	; (80a0664 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x5c>)
 80a0614:	2500      	movs	r5, #0
 80a0616:	6023      	str	r3, [r4, #0]
 80a0618:	6265      	str	r5, [r4, #36]	; 0x24
 80a061a:	b916      	cbnz	r6, 80a0622 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
 80a061c:	f002 f900 	bl	80a2820 <_Z19__fetch_global_Wirev>
 80a0620:	e000      	b.n	80a0624 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1c>
 80a0622:	4630      	mov	r0, r6
 80a0624:	23ff      	movs	r3, #255	; 0xff
 80a0626:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
 80a062a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80a062e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 80a0632:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 80a0636:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80a063a:	62a0      	str	r0, [r4, #40]	; 0x28
 80a063c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a0640:	4b09      	ldr	r3, [pc, #36]	; (80a0668 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x60>)
 80a0642:	62e5      	str	r5, [r4, #44]	; 0x2c
 80a0644:	63a3      	str	r3, [r4, #56]	; 0x38
 80a0646:	2301      	movs	r3, #1
 80a0648:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80a064c:	9b05      	ldr	r3, [sp, #20]
 80a064e:	6425      	str	r5, [r4, #64]	; 0x40
 80a0650:	64a3      	str	r3, [r4, #72]	; 0x48
 80a0652:	9b06      	ldr	r3, [sp, #24]
 80a0654:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 80a0658:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80a065c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80a065e:	4620      	mov	r0, r4
 80a0660:	bd70      	pop	{r4, r5, r6, pc}
 80a0662:	bf00      	nop
 80a0664:	080a4698 	.word	0x080a4698
 80a0668:	080a4600 	.word	0x080a4600

080a066c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:

// Issue single command to SSD1306, using I2C or hard/soft SPI as needed.
// Because command calls are often grouped, SPI transaction and selection
// must be started/ended in calling function for efficiency.
// This is a private function, not exposed (see ssd1306_command() instead).
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 80a066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a066e:	4604      	mov	r4, r0
  if(wire) { // I2C
 80a0670:	6a80      	ldr	r0, [r0, #40]	; 0x28

// Issue single command to SSD1306, using I2C or hard/soft SPI as needed.
// Because command calls are often grouped, SPI transaction and selection
// must be started/ended in calling function for efficiency.
// This is a private function, not exposed (see ssd1306_command() instead).
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
 80a0672:	460f      	mov	r7, r1
  if(wire) { // I2C
 80a0674:	b190      	cbz	r0, 80a069c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
 80a0676:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a067a:	f001 fb9b 	bl	80a1db4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a067e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0680:	2100      	movs	r1, #0
 80a0682:	6803      	ldr	r3, [r0, #0]
 80a0684:	689b      	ldr	r3, [r3, #8]
 80a0686:	4798      	blx	r3
    WIRE_WRITE(c);
 80a0688:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a068a:	4639      	mov	r1, r7
 80a068c:	6803      	ldr	r3, [r0, #0]
 80a068e:	689b      	ldr	r3, [r3, #8]
 80a0690:	4798      	blx	r3
    wire->endTransmission();
 80a0692:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
 80a0694:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    WIRE_WRITE(c);
    wire->endTransmission();
 80a0698:	f001 bb93 	b.w	80a1dc2 <_ZN7TwoWire15endTransmissionEv>
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
 80a069c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 80a06a0:	4601      	mov	r1, r0
 80a06a2:	b298      	uxth	r0, r3
 80a06a4:	f002 f94b 	bl	80a293e <digitalWrite>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a06a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a06aa:	b120      	cbz	r0, 80a06b6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
 80a06ac:	4639      	mov	r1, r7
    wire->endTransmission();
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
 80a06ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    (void)spi->transfer(d);
 80a06b2:	f001 bb29 	b.w	80a1d08 <_ZN8SPIClass8transferEh>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a06b6:	2508      	movs	r5, #8
 80a06b8:	2680      	movs	r6, #128	; 0x80
      if(d & bit) *mosiPort |=  mosiPinMask;
      else        *mosiPort &= ~mosiPinMask;
      *clkPort |=  clkPinMask; // Clock high
      *clkPort &= ~clkPinMask; // Clock low
#else
      digitalWrite(mosiPin, d & bit);
 80a06ba:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a06be:	ea07 0106 	and.w	r1, r7, r6
 80a06c2:	b280      	uxth	r0, r0
 80a06c4:	f002 f93b 	bl	80a293e <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a06c8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a06cc:	2101      	movs	r1, #1
 80a06ce:	b280      	uxth	r0, r0
 80a06d0:	f002 f935 	bl	80a293e <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a06d4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a06d8:	2100      	movs	r1, #0
 80a06da:	b280      	uxth	r0, r0
 80a06dc:	f002 f92f 	bl	80a293e <digitalWrite>
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    (void)spi->transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a06e0:	3d01      	subs	r5, #1
 80a06e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80a06e6:	d1e8      	bne.n	80a06ba <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
    wire->endTransmission();
  } else { // SPI (hw or soft) -- transaction started in calling function
    SSD1306_MODE_COMMAND
    SPIwrite(c);
  }
}
 80a06e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a06ea <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a06ea:	b538      	push	{r3, r4, r5, lr}
 80a06ec:	4604      	mov	r4, r0
  TRANSACTION_START
 80a06ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
 80a06f0:	460d      	mov	r5, r1
  TRANSACTION_START
 80a06f2:	b118      	cbz	r0, 80a06fc <_ZN16Adafruit_SSD130613invertDisplayEb+0x12>

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 80a06f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a06f6:	f001 fb4f 	bl	80a1d98 <_ZN7TwoWire8setSpeedEm>
 80a06fa:	e00b      	b.n	80a0714 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2a>
 80a06fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a06fe:	b118      	cbz	r0, 80a0708 <_ZN16Adafruit_SSD130613invertDisplayEb+0x1e>
 80a0700:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a0704:	f001 fa90 	bl	80a1c28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
 80a0708:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a070c:	2100      	movs	r1, #0
 80a070e:	b280      	uxth	r0, r0
 80a0710:	f002 f915 	bl	80a293e <digitalWrite>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
 80a0714:	2d00      	cmp	r5, #0
 80a0716:	4620      	mov	r0, r4
 80a0718:	bf14      	ite	ne
 80a071a:	21a7      	movne	r1, #167	; 0xa7
 80a071c:	21a6      	moveq	r1, #166	; 0xa6
 80a071e:	f7ff ffa5 	bl	80a066c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
 80a0722:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0724:	b120      	cbz	r0, 80a0730 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
 80a0726:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
 80a0728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a072c:	f001 bb34 	b.w	80a1d98 <_ZN7TwoWire8setSpeedEm>
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
 80a0730:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a0734:	2101      	movs	r1, #1
 80a0736:	b280      	uxth	r0, r0
 80a0738:	f002 f901 	bl	80a293e <digitalWrite>
 80a073c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a073e:	b118      	cbz	r0, 80a0748 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
 80a0740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
 80a0744:	f001 ba57 	b.w	80a1bf6 <_ZN8SPIClass14endTransactionEv>
 80a0748:	bd38      	pop	{r3, r4, r5, pc}

080a074a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
  }
}

// Issue list of commands to SSD1306, same rules as above re: transactions.
// This is a private function, not exposed.
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 80a074a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a074e:	4604      	mov	r4, r0
  if(wire) { // I2C
 80a0750:	6a80      	ldr	r0, [r0, #40]	; 0x28
  }
}

// Issue list of commands to SSD1306, same rules as above re: transactions.
// This is a private function, not exposed.
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
 80a0752:	460d      	mov	r5, r1
 80a0754:	eb01 0802 	add.w	r8, r1, r2
  if(wire) { // I2C
 80a0758:	b348      	cbz	r0, 80a07ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x64>
    wire->beginTransmission(i2caddr);
 80a075a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a075e:	f001 fb29 	bl	80a1db4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0762:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0764:	2100      	movs	r1, #0
 80a0766:	6803      	ldr	r3, [r0, #0]
    uint8_t bytesOut = 1;
 80a0768:	2601      	movs	r6, #1
// Issue list of commands to SSD1306, same rules as above re: transactions.
// This is a private function, not exposed.
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a076a:	689b      	ldr	r3, [r3, #8]
 80a076c:	4798      	blx	r3
    uint8_t bytesOut = 1;
    while(n--) {
 80a076e:	4545      	cmp	r5, r8
 80a0770:	d018      	beq.n	80a07a4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x5a>
      if(bytesOut >= WIRE_MAX) {
 80a0772:	2e1f      	cmp	r6, #31
 80a0774:	d90d      	bls.n	80a0792 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x48>
        wire->endTransmission();
 80a0776:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0778:	f001 fb23 	bl	80a1dc2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 80a077c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a0780:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0782:	f001 fb17 	bl	80a1db4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a0786:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0788:	2100      	movs	r1, #0
 80a078a:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 80a078c:	2601      	movs	r6, #1
    uint8_t bytesOut = 1;
    while(n--) {
      if(bytesOut >= WIRE_MAX) {
        wire->endTransmission();
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
 80a078e:	689b      	ldr	r3, [r3, #8]
 80a0790:	4798      	blx	r3
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
 80a0792:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0794:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0798:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 80a079a:	3601      	adds	r6, #1
        wire->endTransmission();
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
 80a079c:	689b      	ldr	r3, [r3, #8]
 80a079e:	4798      	blx	r3
      bytesOut++;
 80a07a0:	b2f6      	uxtb	r6, r6
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
    uint8_t bytesOut = 1;
    while(n--) {
 80a07a2:	e7e4      	b.n	80a076e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
      bytesOut++;
    }
    wire->endTransmission();
 80a07a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    while(n--) SPIwrite(pgm_read_byte(c++));
  }
}
 80a07a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        bytesOut = 1;
      }
      WIRE_WRITE(pgm_read_byte(c++));
      bytesOut++;
    }
    wire->endTransmission();
 80a07aa:	f001 bb0a 	b.w	80a1dc2 <_ZN7TwoWire15endTransmissionEv>
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
 80a07ae:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
 80a07b2:	4601      	mov	r1, r0
 80a07b4:	b298      	uxth	r0, r3
 80a07b6:	f002 f8c2 	bl	80a293e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
 80a07ba:	4545      	cmp	r5, r8
 80a07bc:	d021      	beq.n	80a0802 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb8>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a07be:	6a60      	ldr	r0, [r4, #36]	; 0x24
      bytesOut++;
    }
    wire->endTransmission();
  } else { // SPI -- transaction started in calling function
    SSD1306_MODE_COMMAND
    while(n--) SPIwrite(pgm_read_byte(c++));
 80a07c0:	f815 9b01 	ldrb.w	r9, [r5], #1
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a07c4:	b118      	cbz	r0, 80a07ce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x84>
    (void)spi->transfer(d);
 80a07c6:	4649      	mov	r1, r9
 80a07c8:	f001 fa9e 	bl	80a1d08 <_ZN8SPIClass8transferEh>
 80a07cc:	e7f5      	b.n	80a07ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x70>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a07ce:	2608      	movs	r6, #8
 80a07d0:	2780      	movs	r7, #128	; 0x80
      if(d & bit) *mosiPort |=  mosiPinMask;
      else        *mosiPort &= ~mosiPinMask;
      *clkPort |=  clkPinMask; // Clock high
      *clkPort &= ~clkPinMask; // Clock low
#else
      digitalWrite(mosiPin, d & bit);
 80a07d2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a07d6:	ea09 0107 	and.w	r1, r9, r7
 80a07da:	b280      	uxth	r0, r0
 80a07dc:	f002 f8af 	bl	80a293e <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a07e0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a07e4:	2101      	movs	r1, #1
 80a07e6:	b280      	uxth	r0, r0
 80a07e8:	f002 f8a9 	bl	80a293e <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a07ec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a07f0:	2100      	movs	r1, #0
 80a07f2:	b280      	uxth	r0, r0
 80a07f4:	f002 f8a3 	bl	80a293e <digitalWrite>
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    (void)spi->transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a07f8:	3e01      	subs	r6, #1
 80a07fa:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80a07fe:	d1e8      	bne.n	80a07d2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x88>
 80a0800:	e7db      	b.n	80a07ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x70>
 80a0802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a0806 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
 80a0806:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80a080a:	2208      	movs	r2, #8
 80a080c:	3307      	adds	r3, #7
 80a080e:	fb93 f3f2 	sdiv	r3, r3, r2
 80a0812:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80a0816:	2100      	movs	r1, #0
 80a0818:	435a      	muls	r2, r3
 80a081a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a081c:	f003 bb2f 	b.w	80a3e7e <memset>

080a0820 <_ZN16Adafruit_SSD13065beginEhhbb>:
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
boolean Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, boolean reset,
  boolean periphBegin) {
 80a0820:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0824:	461e      	mov	r6, r3

  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a0826:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
            Well-behaved code should check the return value before
            proceeding.
    @note   MUST call this function before any drawing or updates!
*/
boolean Adafruit_SSD1306::begin(uint8_t vcs, uint8_t addr, boolean reset,
  boolean periphBegin) {
 80a0828:	4604      	mov	r4, r0
 80a082a:	4688      	mov	r8, r1
 80a082c:	4615      	mov	r5, r2
 80a082e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28

  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
 80a0832:	b973      	cbnz	r3, 80a0852 <_ZN16Adafruit_SSD13065beginEhhbb+0x32>
 80a0834:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80a0838:	2008      	movs	r0, #8
 80a083a:	3307      	adds	r3, #7
 80a083c:	fb93 f3f0 	sdiv	r3, r3, r0
 80a0840:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80a0844:	4358      	muls	r0, r3
 80a0846:	f001 f8cf 	bl	80a19e8 <malloc>
 80a084a:	62e0      	str	r0, [r4, #44]	; 0x2c
 80a084c:	2800      	cmp	r0, #0
 80a084e:	f000 810e 	beq.w	80a0a6e <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    return false;

  clearDisplay();
 80a0852:	4620      	mov	r0, r4
 80a0854:	f7ff ffd7 	bl	80a0806 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
 80a0858:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80a085c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80a0860:	2a20      	cmp	r2, #32
 80a0862:	f04f 0102 	mov.w	r1, #2
 80a0866:	dd0d      	ble.n	80a0884 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
      splash1_data, splash1_width, splash1_height, 1);
 80a0868:	3b52      	subs	r3, #82	; 0x52
 80a086a:	3a40      	subs	r2, #64	; 0x40
 80a086c:	fb92 f2f1 	sdiv	r2, r2, r1
 80a0870:	2052      	movs	r0, #82	; 0x52
 80a0872:	fb93 f1f1 	sdiv	r1, r3, r1
 80a0876:	f04f 0c01 	mov.w	ip, #1
 80a087a:	2340      	movs	r3, #64	; 0x40
 80a087c:	e88d 1009 	stmia.w	sp, {r0, r3, ip}
 80a0880:	4b7c      	ldr	r3, [pc, #496]	; (80a0a74 <_ZN16Adafruit_SSD13065beginEhhbb+0x254>)
 80a0882:	e00c      	b.n	80a089e <_ZN16Adafruit_SSD13065beginEhhbb+0x7e>
  } else {
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
      splash2_data, splash2_width, splash2_height, 1);
 80a0884:	3b73      	subs	r3, #115	; 0x73
 80a0886:	3a20      	subs	r2, #32
 80a0888:	fb92 f2f1 	sdiv	r2, r2, r1
 80a088c:	2073      	movs	r0, #115	; 0x73
 80a088e:	fb93 f1f1 	sdiv	r1, r3, r1
 80a0892:	f04f 0e01 	mov.w	lr, #1
 80a0896:	2320      	movs	r3, #32
 80a0898:	e88d 4009 	stmia.w	sp, {r0, r3, lr}
 80a089c:	4b76      	ldr	r3, [pc, #472]	; (80a0a78 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
 80a089e:	4620      	mov	r0, r4
 80a08a0:	b212      	sxth	r2, r2
 80a08a2:	b209      	sxth	r1, r1
 80a08a4:	f000 fcb7 	bl	80a1216 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  }

  vccstate = vcs;

  // Setup pin directions
  if(wire) { // Using I2C
 80a08a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  } else {
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
      splash2_data, splash2_width, splash2_height, 1);
  }

  vccstate = vcs;
 80a08aa:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31

  // Setup pin directions
  if(wire) { // Using I2C
 80a08ae:	b180      	cbz	r0, 80a08d2 <_ZN16Adafruit_SSD13065beginEhhbb+0xb2>
    // If I2C address is unspecified, use default
    // (0x3C for 32-pixel-tall displays, 0x3D for all others).
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
 80a08b0:	b935      	cbnz	r5, 80a08c0 <_ZN16Adafruit_SSD13065beginEhhbb+0xa0>
 80a08b2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80a08b6:	2b20      	cmp	r3, #32
 80a08b8:	bf14      	ite	ne
 80a08ba:	253d      	movne	r5, #61	; 0x3d
 80a08bc:	253c      	moveq	r5, #60	; 0x3c
 80a08be:	e000      	b.n	80a08c2 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
 80a08c0:	b26d      	sxtb	r5, r5
 80a08c2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    // TwoWire begin() function might be already performed by the calling
    // function if it has unusual circumstances (e.g. TWI variants that
    // can accept different SDA/SCL pins, or if two SSD1306 instances
    // with different addresses -- only a single begin() is needed).
    if(periphBegin) wire->begin();
 80a08c6:	2f00      	cmp	r7, #0
 80a08c8:	f000 80cd 	beq.w	80a0a66 <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
 80a08cc:	f001 fa68 	bl	80a1da0 <_ZN7TwoWire5beginEv>
 80a08d0:	e02a      	b.n	80a0928 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
  } else { // Using one of the SPI modes, either soft or hardware
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
 80a08d2:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 80a08d6:	2101      	movs	r1, #1
 80a08d8:	b280      	uxth	r0, r0
 80a08da:	f002 f81f 	bl	80a291c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
 80a08de:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a08e2:	2101      	movs	r1, #1
 80a08e4:	b280      	uxth	r0, r0
 80a08e6:	f002 f819 	bl	80a291c <pinMode>
    dcPort    = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
    dcPinMask = digitalPinToBitMask(dcPin);
    csPort    = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
    csPinMask = digitalPinToBitMask(csPin);
#endif
    SSD1306_DESELECT
 80a08ea:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a08ee:	2101      	movs	r1, #1
 80a08f0:	b280      	uxth	r0, r0
 80a08f2:	f002 f824 	bl	80a293e <digitalWrite>
    if(spi) { // Hardware SPI
 80a08f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a08f8:	b125      	cbz	r5, 80a0904 <_ZN16Adafruit_SSD13065beginEhhbb+0xe4>
      // SPI peripheral begin same as wire check above.
      if(periphBegin) spi->begin();
 80a08fa:	b1af      	cbz	r7, 80a0928 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
 80a08fc:	4628      	mov	r0, r5
 80a08fe:	f001 f975 	bl	80a1bec <_ZN8SPIClass5beginEv>
 80a0902:	e011      	b.n	80a0928 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    } else {  // Soft SPI
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
 80a0904:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a0908:	2101      	movs	r1, #1
 80a090a:	b280      	uxth	r0, r0
 80a090c:	f002 f806 	bl	80a291c <pinMode>
      pinMode(clkPin , OUTPUT);
 80a0910:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0914:	2101      	movs	r1, #1
 80a0916:	b280      	uxth	r0, r0
 80a0918:	f002 f800 	bl	80a291c <pinMode>
      mosiPinMask = digitalPinToBitMask(mosiPin);
      clkPort     = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
      clkPinMask  = digitalPinToBitMask(clkPin);
      *clkPort   &= ~clkPinMask; // Clock low
#else
      digitalWrite(clkPin, LOW); // Clock low
 80a091c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0920:	4629      	mov	r1, r5
 80a0922:	b280      	uxth	r0, r0
 80a0924:	f002 f80b 	bl	80a293e <digitalWrite>
#endif
    }
  }

  // Reset SSD1306 if requested and reset pin specified in constructor
  if(reset && (rstPin >= 0)) {
 80a0928:	b1fe      	cbz	r6, 80a096a <_ZN16Adafruit_SSD13065beginEhhbb+0x14a>
 80a092a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a092e:	2800      	cmp	r0, #0
 80a0930:	db1b      	blt.n	80a096a <_ZN16Adafruit_SSD13065beginEhhbb+0x14a>
    pinMode(     rstPin, OUTPUT);
 80a0932:	2101      	movs	r1, #1
 80a0934:	b280      	uxth	r0, r0
 80a0936:	f001 fff1 	bl	80a291c <pinMode>
    digitalWrite(rstPin, HIGH);
 80a093a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a093e:	2101      	movs	r1, #1
 80a0940:	b280      	uxth	r0, r0
 80a0942:	f001 fffc 	bl	80a293e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
 80a0946:	2001      	movs	r0, #1
 80a0948:	f001 fb81 	bl	80a204e <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
 80a094c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a0950:	2100      	movs	r1, #0
 80a0952:	b280      	uxth	r0, r0
 80a0954:	f001 fff3 	bl	80a293e <digitalWrite>
    delay(10);                  // Wait 10 ms
 80a0958:	200a      	movs	r0, #10
 80a095a:	f001 fb78 	bl	80a204e <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
 80a095e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
 80a0962:	2101      	movs	r1, #1
 80a0964:	b280      	uxth	r0, r0
 80a0966:	f001 ffea 	bl	80a293e <digitalWrite>
  }

  TRANSACTION_START
 80a096a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a096c:	b118      	cbz	r0, 80a0976 <_ZN16Adafruit_SSD13065beginEhhbb+0x156>
 80a096e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0970:	f001 fa12 	bl	80a1d98 <_ZN7TwoWire8setSpeedEm>
 80a0974:	e00b      	b.n	80a098e <_ZN16Adafruit_SSD13065beginEhhbb+0x16e>
 80a0976:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0978:	b118      	cbz	r0, 80a0982 <_ZN16Adafruit_SSD13065beginEhhbb+0x162>
 80a097a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a097e:	f001 f953 	bl	80a1c28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
 80a0982:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a0986:	2100      	movs	r1, #0
 80a0988:	b280      	uxth	r0, r0
 80a098a:	f001 ffd8 	bl	80a293e <digitalWrite>
  static const uint8_t PROGMEM init1[] = {
    SSD1306_DISPLAYOFF,                   // 0xAE
    SSD1306_SETDISPLAYCLOCKDIV,           // 0xD5
    0x80,                                 // the suggested ratio 0x80
    SSD1306_SETMULTIPLEX };               // 0xA8
  ssd1306_commandList(init1, sizeof(init1));
 80a098e:	2204      	movs	r2, #4
 80a0990:	493a      	ldr	r1, [pc, #232]	; (80a0a7c <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
 80a0992:	4620      	mov	r0, r4
 80a0994:	f7ff fed9 	bl	80a074a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
 80a0998:	7aa1      	ldrb	r1, [r4, #10]
 80a099a:	4620      	mov	r0, r4
 80a099c:	3901      	subs	r1, #1
 80a099e:	b2c9      	uxtb	r1, r1
 80a09a0:	f7ff fe64 	bl	80a066c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  static const uint8_t PROGMEM init2[] = {
    SSD1306_SETDISPLAYOFFSET,             // 0xD3
    0x0,                                  // no offset
    SSD1306_SETSTARTLINE | 0x0,           // line #0
    SSD1306_CHARGEPUMP };                 // 0x8D
  ssd1306_commandList(init2, sizeof(init2));
 80a09a4:	4936      	ldr	r1, [pc, #216]	; (80a0a80 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
 80a09a6:	2204      	movs	r2, #4
 80a09a8:	4620      	mov	r0, r4
 80a09aa:	f7ff fece 	bl	80a074a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>

  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 80a09ae:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a09b2:	4620      	mov	r0, r4
 80a09b4:	2b01      	cmp	r3, #1
 80a09b6:	bf14      	ite	ne
 80a09b8:	2114      	movne	r1, #20
 80a09ba:	2110      	moveq	r1, #16
 80a09bc:	f7ff fe56 	bl	80a066c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  static const uint8_t PROGMEM init3[] = {
    SSD1306_MEMORYMODE,                   // 0x20
    0x00,                                 // 0x0 act like ks0108
    SSD1306_SEGREMAP | 0x1,
    SSD1306_COMSCANDEC };
  ssd1306_commandList(init3, sizeof(init3));
 80a09c0:	2204      	movs	r2, #4
 80a09c2:	4930      	ldr	r1, [pc, #192]	; (80a0a84 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
 80a09c4:	4620      	mov	r0, r4
 80a09c6:	f7ff fec0 	bl	80a074a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>

  if((WIDTH == 128) && (HEIGHT == 32)) {
 80a09ca:	68a3      	ldr	r3, [r4, #8]
 80a09cc:	4a2e      	ldr	r2, [pc, #184]	; (80a0a88 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
 80a09ce:	4293      	cmp	r3, r2
 80a09d0:	d105      	bne.n	80a09de <_ZN16Adafruit_SSD13065beginEhhbb+0x1be>
    static const uint8_t PROGMEM init4a[] = {
      SSD1306_SETCOMPINS,                 // 0xDA
      0x02,
      SSD1306_SETCONTRAST,                // 0x81
      0x8F };
    ssd1306_commandList(init4a, sizeof(init4a));
 80a09d2:	2204      	movs	r2, #4
 80a09d4:	492d      	ldr	r1, [pc, #180]	; (80a0a8c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
 80a09d6:	4620      	mov	r0, r4
 80a09d8:	f7ff feb7 	bl	80a074a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
 80a09dc:	e01f      	b.n	80a0a1e <_ZN16Adafruit_SSD13065beginEhhbb+0x1fe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
 80a09de:	4a2c      	ldr	r2, [pc, #176]	; (80a0a90 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
 80a09e0:	4293      	cmp	r3, r2
 80a09e2:	d10b      	bne.n	80a09fc <_ZN16Adafruit_SSD13065beginEhhbb+0x1dc>
    static const uint8_t PROGMEM init4b[] = {
      SSD1306_SETCOMPINS,                 // 0xDA
      0x12,
      SSD1306_SETCONTRAST };              // 0x81
    ssd1306_commandList(init4b, sizeof(init4b));
 80a09e4:	492b      	ldr	r1, [pc, #172]	; (80a0a94 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
 80a09e6:	2203      	movs	r2, #3
 80a09e8:	4620      	mov	r0, r4
 80a09ea:	f7ff feae 	bl	80a074a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
 80a09ee:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a09f2:	2b01      	cmp	r3, #1
 80a09f4:	bf14      	ite	ne
 80a09f6:	21cf      	movne	r1, #207	; 0xcf
 80a09f8:	219f      	moveq	r1, #159	; 0x9f
 80a09fa:	e00d      	b.n	80a0a18 <_ZN16Adafruit_SSD13065beginEhhbb+0x1f8>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
 80a09fc:	4a26      	ldr	r2, [pc, #152]	; (80a0a98 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
 80a09fe:	4293      	cmp	r3, r2
 80a0a00:	d10d      	bne.n	80a0a1e <_ZN16Adafruit_SSD13065beginEhhbb+0x1fe>
    static const uint8_t PROGMEM init4c[] = {
      SSD1306_SETCOMPINS,                 // 0xDA
      0x2,    // ada x12
      SSD1306_SETCONTRAST };              // 0x81
    ssd1306_commandList(init4c, sizeof(init4c));
 80a0a02:	4926      	ldr	r1, [pc, #152]	; (80a0a9c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
 80a0a04:	2203      	movs	r2, #3
 80a0a06:	4620      	mov	r0, r4
 80a0a08:	f7ff fe9f 	bl	80a074a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
 80a0a0c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a0a10:	2b01      	cmp	r3, #1
 80a0a12:	bf14      	ite	ne
 80a0a14:	21af      	movne	r1, #175	; 0xaf
 80a0a16:	2110      	moveq	r1, #16
 80a0a18:	4620      	mov	r0, r4
 80a0a1a:	f7ff fe27 	bl	80a066c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  } else {
    // Other screen varieties -- TBD
  }

  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
 80a0a1e:	21d9      	movs	r1, #217	; 0xd9
 80a0a20:	4620      	mov	r0, r4
 80a0a22:	f7ff fe23 	bl	80a066c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 80a0a26:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
 80a0a2a:	4620      	mov	r0, r4
 80a0a2c:	2b01      	cmp	r3, #1
 80a0a2e:	bf14      	ite	ne
 80a0a30:	21f1      	movne	r1, #241	; 0xf1
 80a0a32:	2122      	moveq	r1, #34	; 0x22
 80a0a34:	f7ff fe1a 	bl	80a066c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    0x40,
    SSD1306_DISPLAYALLON_RESUME,         // 0xA4
    SSD1306_NORMALDISPLAY,               // 0xA6
    SSD1306_DEACTIVATE_SCROLL,
    SSD1306_DISPLAYON };                 // Main screen turn on
  ssd1306_commandList(init5, sizeof(init5));
 80a0a38:	4620      	mov	r0, r4
 80a0a3a:	2206      	movs	r2, #6
 80a0a3c:	4918      	ldr	r1, [pc, #96]	; (80a0aa0 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
 80a0a3e:	f7ff fe84 	bl	80a074a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>

  TRANSACTION_END
 80a0a42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0a44:	b118      	cbz	r0, 80a0a4e <_ZN16Adafruit_SSD13065beginEhhbb+0x22e>
 80a0a46:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80a0a48:	f001 f9a6 	bl	80a1d98 <_ZN7TwoWire8setSpeedEm>
 80a0a4c:	e009      	b.n	80a0a62 <_ZN16Adafruit_SSD13065beginEhhbb+0x242>
 80a0a4e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a0a52:	2101      	movs	r1, #1
 80a0a54:	b280      	uxth	r0, r0
 80a0a56:	f001 ff72 	bl	80a293e <digitalWrite>
 80a0a5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0a5c:	b108      	cbz	r0, 80a0a62 <_ZN16Adafruit_SSD13065beginEhhbb+0x242>
 80a0a5e:	f001 f8ca 	bl	80a1bf6 <_ZN8SPIClass14endTransactionEv>

  return true; // Success
 80a0a62:	2001      	movs	r0, #1
 80a0a64:	e003      	b.n	80a0a6e <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
#endif
    }
  }

  // Reset SSD1306 if requested and reset pin specified in constructor
  if(reset && (rstPin >= 0)) {
 80a0a66:	2e00      	cmp	r6, #0
 80a0a68:	f47f af5f 	bne.w	80a092a <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
 80a0a6c:	e77f      	b.n	80a096e <_ZN16Adafruit_SSD13065beginEhhbb+0x14e>
  ssd1306_commandList(init5, sizeof(init5));

  TRANSACTION_END

  return true; // Success
}
 80a0a6e:	b004      	add	sp, #16
 80a0a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a74:	080a46e8 	.word	0x080a46e8
 80a0a78:	080a49a8 	.word	0x080a49a8
 80a0a7c:	080a466e 	.word	0x080a466e
 80a0a80:	080a4672 	.word	0x080a4672
 80a0a84:	080a4676 	.word	0x080a4676
 80a0a88:	00200080 	.word	0x00200080
 80a0a8c:	080a4667 	.word	0x080a4667
 80a0a90:	00400080 	.word	0x00400080
 80a0a94:	080a466b 	.word	0x080a466b
 80a0a98:	00100060 	.word	0x00100060
 80a0a9c:	080a4664 	.word	0x080a4664
 80a0aa0:	080a467a 	.word	0x080a467a

080a0aa4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  if(bSwap) drawFastVLineInternal(x, y, w, color);
  else      drawFastHLineInternal(x, y, w, color);
}

void Adafruit_SSD1306::drawFastHLineInternal(
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0aa4:	b570      	push	{r4, r5, r6, lr}

  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 80a0aa6:	2a00      	cmp	r2, #0
  if(bSwap) drawFastVLineInternal(x, y, w, color);
  else      drawFastHLineInternal(x, y, w, color);
}

void Adafruit_SSD1306::drawFastHLineInternal(
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0aa8:	f8bd 5010 	ldrh.w	r5, [sp, #16]

  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
 80a0aac:	db44      	blt.n	80a0b38 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
 80a0aae:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0ab2:	4294      	cmp	r4, r2
 80a0ab4:	dd40      	ble.n	80a0b38 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
    if(x < 0) { // Clip left
 80a0ab6:	2900      	cmp	r1, #0
      w += x;
 80a0ab8:	bfbe      	ittt	lt
 80a0aba:	185b      	addlt	r3, r3, r1
 80a0abc:	b21b      	sxthlt	r3, r3
      x  = 0;
 80a0abe:	2100      	movlt	r1, #0
    }
    if((x + w) > WIDTH) { // Clip right
 80a0ac0:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80a0ac4:	185c      	adds	r4, r3, r1
 80a0ac6:	42b4      	cmp	r4, r6
      w = (WIDTH - x);
 80a0ac8:	bfc4      	itt	gt
 80a0aca:	1a73      	subgt	r3, r6, r1
 80a0acc:	b21b      	sxthgt	r3, r3
    }
    if(w > 0) { // Proceed only if width is positive
 80a0ace:	2b00      	cmp	r3, #0
 80a0ad0:	dd32      	ble.n	80a0b38 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
 80a0ad2:	2408      	movs	r4, #8
 80a0ad4:	fb92 f4f4 	sdiv	r4, r2, r4
 80a0ad8:	fb06 1104 	mla	r1, r6, r4, r1
 80a0adc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
               mask = 1 << (y & 7);
 80a0ade:	f002 0207 	and.w	r2, r2, #7
    }
    if((x + w) > WIDTH) { // Clip right
      w = (WIDTH - x);
    }
    if(w > 0) { // Proceed only if width is positive
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
 80a0ae2:	4408      	add	r0, r1
               mask = 1 << (y & 7);
 80a0ae4:	2101      	movs	r1, #1
 80a0ae6:	fa01 f202 	lsl.w	r2, r1, r2
      switch(color) {
 80a0aea:	428d      	cmp	r5, r1
    if((x + w) > WIDTH) { // Clip right
      w = (WIDTH - x);
    }
    if(w > 0) { // Proceed only if width is positive
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
               mask = 1 << (y & 7);
 80a0aec:	b2d2      	uxtb	r2, r2
      switch(color) {
 80a0aee:	d003      	beq.n	80a0af8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x54>
 80a0af0:	d30c      	bcc.n	80a0b0c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x68>
 80a0af2:	2d02      	cmp	r5, #2
 80a0af4:	d016      	beq.n	80a0b24 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x80>
 80a0af6:	bd70      	pop	{r4, r5, r6, pc}
 80a0af8:	3b01      	subs	r3, #1
 80a0afa:	b21b      	sxth	r3, r3
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
 80a0afc:	1c5d      	adds	r5, r3, #1
 80a0afe:	d01b      	beq.n	80a0b38 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
 80a0b00:	f810 1b01 	ldrb.w	r1, [r0], #1
 80a0b04:	4311      	orrs	r1, r2
 80a0b06:	f800 1c01 	strb.w	r1, [r0, #-1]
 80a0b0a:	e7f5      	b.n	80a0af8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x54>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
 80a0b0c:	43d2      	mvns	r2, r2
 80a0b0e:	b2d2      	uxtb	r2, r2
 80a0b10:	3b01      	subs	r3, #1
 80a0b12:	b21b      	sxth	r3, r3
 80a0b14:	1c5c      	adds	r4, r3, #1
 80a0b16:	d00f      	beq.n	80a0b38 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
 80a0b18:	f810 1b01 	ldrb.w	r1, [r0], #1
 80a0b1c:	4011      	ands	r1, r2
 80a0b1e:	f800 1c01 	strb.w	r1, [r0, #-1]
 80a0b22:	e7f5      	b.n	80a0b10 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x6c>
 80a0b24:	3b01      	subs	r3, #1
 80a0b26:	b21b      	sxth	r3, r3
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
 80a0b28:	1c59      	adds	r1, r3, #1
 80a0b2a:	d005      	beq.n	80a0b38 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x94>
 80a0b2c:	f810 1b01 	ldrb.w	r1, [r0], #1
 80a0b30:	4051      	eors	r1, r2
 80a0b32:	f800 1c01 	strb.w	r1, [r0, #-1]
 80a0b36:	e7f5      	b.n	80a0b24 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x80>
 80a0b38:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0b3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  if(bSwap) drawFastHLineInternal(x, y, h, color);
  else      drawFastVLineInternal(x, y, h, color);
}

void Adafruit_SSD1306::drawFastVLineInternal(
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
 80a0b3c:	b5f0      	push	{r4, r5, r6, r7, lr}

  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 80a0b3e:	2900      	cmp	r1, #0
  if(bSwap) drawFastHLineInternal(x, y, h, color);
  else      drawFastVLineInternal(x, y, h, color);
}

void Adafruit_SSD1306::drawFastVLineInternal(
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
 80a0b40:	f8bd 5014 	ldrh.w	r5, [sp, #20]

  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
 80a0b44:	f2c0 8088 	blt.w	80a0c58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
 80a0b48:	f9b0 e008 	ldrsh.w	lr, [r0, #8]
 80a0b4c:	4571      	cmp	r1, lr
 80a0b4e:	f280 8083 	bge.w	80a0c58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
    if(__y < 0) { // Clip top
 80a0b52:	2a00      	cmp	r2, #0
      __h += __y;
 80a0b54:	bfbe      	ittt	lt
 80a0b56:	189b      	addlt	r3, r3, r2
 80a0b58:	b21b      	sxthlt	r3, r3
      __y = 0;
 80a0b5a:	2200      	movlt	r2, #0
    }
    if((__y + __h) > HEIGHT) { // Clip bottom
 80a0b5c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0b60:	18d6      	adds	r6, r2, r3
 80a0b62:	42a6      	cmp	r6, r4
      __h = (HEIGHT - __y);
 80a0b64:	bfc4      	itt	gt
 80a0b66:	1aa3      	subgt	r3, r4, r2
 80a0b68:	b21b      	sxthgt	r3, r3
    }
    if(__h > 0) { // Proceed only if height is now positive
 80a0b6a:	2b00      	cmp	r3, #0
 80a0b6c:	dd74      	ble.n	80a0c58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
      // this display doesn't need ints for coordinates,
      // use local byte registers for faster juggling
      uint8_t  y = __y, h = __h;
 80a0b6e:	b2d2      	uxtb	r2, r2
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 80a0b70:	08d4      	lsrs	r4, r2, #3
 80a0b72:	fb0e 1104 	mla	r1, lr, r4, r1
 80a0b76:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

      // do the first partial byte, if necessary - this requires some masking
      uint8_t mod = (y & 7);
      if(mod) {
 80a0b78:	f012 0207 	ands.w	r2, r2, #7
      __h = (HEIGHT - __y);
    }
    if(__h > 0) { // Proceed only if height is now positive
      // this display doesn't need ints for coordinates,
      // use local byte registers for faster juggling
      uint8_t  y = __y, h = __h;
 80a0b7c:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
 80a0b7e:	eb06 0401 	add.w	r4, r6, r1

      // do the first partial byte, if necessary - this requires some masking
      uint8_t mod = (y & 7);
      if(mod) {
 80a0b82:	d02b      	beq.n	80a0bdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xa0>
        // mask off the high n bits we want to set
        mod = 8 - mod;
 80a0b84:	f1c2 0208 	rsb	r2, r2, #8
 80a0b88:	b2d2      	uxtb	r2, r2
        // note - lookup table results in a nearly 10% performance
        // improvement in fill* functions
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] =
          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
        uint8_t mask = pgm_read_byte(&premask[mod]);
 80a0b8a:	4f34      	ldr	r7, [pc, #208]	; (80a0c5c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x120>)
        // adjust the mask if we're not going to reach the end of this byte
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a0b8c:	4293      	cmp	r3, r2
        // note - lookup table results in a nearly 10% performance
        // improvement in fill* functions
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] =
          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
        uint8_t mask = pgm_read_byte(&premask[mod]);
 80a0b8e:	5cbf      	ldrb	r7, [r7, r2]
        // adjust the mask if we're not going to reach the end of this byte
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a0b90:	d20d      	bcs.n	80a0bae <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x72>
 80a0b92:	ebc3 0c02 	rsb	ip, r3, r2
 80a0b96:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80a0b9a:	fa4e fe0c 	asr.w	lr, lr, ip

        switch(color) {
 80a0b9e:	2d01      	cmp	r5, #1
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] =
          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if(h < mod) mask &= (0XFF >> (mod - h));
 80a0ba0:	ea0e 0707 	and.w	r7, lr, r7

        switch(color) {
 80a0ba4:	d005      	beq.n	80a0bb2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x76>
 80a0ba6:	d30a      	bcc.n	80a0bbe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
 80a0ba8:	2d02      	cmp	r5, #2
 80a0baa:	d155      	bne.n	80a0c58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
 80a0bac:	e00c      	b.n	80a0bc8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
 80a0bae:	2d01      	cmp	r5, #1
 80a0bb0:	d104      	bne.n	80a0bbc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
 80a0bb2:	f816 e001 	ldrb.w	lr, [r6, r1]
 80a0bb6:	ea47 070e 	orr.w	r7, r7, lr
 80a0bba:	e009      	b.n	80a0bd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x94>
          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if(h < mod) mask &= (0XFF >> (mod - h));

        switch(color) {
 80a0bbc:	d248      	bcs.n	80a0c50 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x114>
         case WHITE:   *pBuf |=  mask; break;
         case BLACK:   *pBuf &= ~mask; break;
 80a0bbe:	f816 e001 	ldrb.w	lr, [r6, r1]
 80a0bc2:	ea2e 0707 	bic.w	r7, lr, r7
 80a0bc6:	e003      	b.n	80a0bd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x94>
         case INVERSE: *pBuf ^=  mask; break;
 80a0bc8:	f816 e001 	ldrb.w	lr, [r6, r1]
 80a0bcc:	ea87 070e 	eor.w	r7, r7, lr
        }
        pBuf += WIDTH;
      }

      if(h >= mod) { // More to go?
 80a0bd0:	4293      	cmp	r3, r2
        if(h < mod) mask &= (0XFF >> (mod - h));

        switch(color) {
         case WHITE:   *pBuf |=  mask; break;
         case BLACK:   *pBuf &= ~mask; break;
         case INVERSE: *pBuf ^=  mask; break;
 80a0bd2:	5477      	strb	r7, [r6, r1]
        }
        pBuf += WIDTH;
      }

      if(h >= mod) { // More to go?
 80a0bd4:	d340      	bcc.n	80a0c58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
        switch(color) {
         case WHITE:   *pBuf |=  mask; break;
         case BLACK:   *pBuf &= ~mask; break;
         case INVERSE: *pBuf ^=  mask; break;
        }
        pBuf += WIDTH;
 80a0bd6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80a0bda:	440c      	add	r4, r1
      }

      if(h >= mod) { // More to go?
        h -= mod;
 80a0bdc:	1a9b      	subs	r3, r3, r2
 80a0bde:	b2db      	uxtb	r3, r3
        // Write solid bytes while we can - effectively 8 rows at a time
        if(h >= 8) {
 80a0be0:	2b07      	cmp	r3, #7
 80a0be2:	d91c      	bls.n	80a0c1e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe2>
          if(color == INVERSE) {
 80a0be4:	2d02      	cmp	r5, #2
 80a0be6:	d10b      	bne.n	80a0c00 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xc4>
 80a0be8:	461a      	mov	r2, r3
            // separate copy of the code so we don't impact performance of
            // black/white write version with an extra comparison per loop
            do {
              *pBuf ^= 0xFF;  // Invert byte
 80a0bea:	7821      	ldrb	r1, [r4, #0]
              pBuf  += WIDTH; // Advance pointer 8 rows
              h     -= 8;     // Subtract 8 rows from height
 80a0bec:	3a08      	subs	r2, #8
        if(h >= 8) {
          if(color == INVERSE) {
            // separate copy of the code so we don't impact performance of
            // black/white write version with an extra comparison per loop
            do {
              *pBuf ^= 0xFF;  // Invert byte
 80a0bee:	43c9      	mvns	r1, r1
 80a0bf0:	7021      	strb	r1, [r4, #0]
              pBuf  += WIDTH; // Advance pointer 8 rows
 80a0bf2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
 80a0bf6:	b2d2      	uxtb	r2, r2
            } while(h >= 8);
 80a0bf8:	2a07      	cmp	r2, #7
          if(color == INVERSE) {
            // separate copy of the code so we don't impact performance of
            // black/white write version with an extra comparison per loop
            do {
              *pBuf ^= 0xFF;  // Invert byte
              pBuf  += WIDTH; // Advance pointer 8 rows
 80a0bfa:	440c      	add	r4, r1
              h     -= 8;     // Subtract 8 rows from height
            } while(h >= 8);
 80a0bfc:	d8f5      	bhi.n	80a0bea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
 80a0bfe:	e01e      	b.n	80a0c3e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x102>
          } else {
            // store a local value to work with
            uint8_t val = (color != BLACK) ? 255 : 0;
 80a0c00:	2d00      	cmp	r5, #0
 80a0c02:	bf14      	ite	ne
 80a0c04:	26ff      	movne	r6, #255	; 0xff
 80a0c06:	2600      	moveq	r6, #0
 80a0c08:	461a      	mov	r2, r3
            do {
              *pBuf = val;    // Set byte
 80a0c0a:	7026      	strb	r6, [r4, #0]
              pBuf += WIDTH;  // Advance pointer 8 rows
              h    -= 8;      // Subtract 8 rows from height
 80a0c0c:	3a08      	subs	r2, #8
          } else {
            // store a local value to work with
            uint8_t val = (color != BLACK) ? 255 : 0;
            do {
              *pBuf = val;    // Set byte
              pBuf += WIDTH;  // Advance pointer 8 rows
 80a0c0e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
 80a0c12:	b2d2      	uxtb	r2, r2
            } while(h >= 8);
 80a0c14:	2a07      	cmp	r2, #7
          } else {
            // store a local value to work with
            uint8_t val = (color != BLACK) ? 255 : 0;
            do {
              *pBuf = val;    // Set byte
              pBuf += WIDTH;  // Advance pointer 8 rows
 80a0c16:	440c      	add	r4, r1
              h    -= 8;      // Subtract 8 rows from height
            } while(h >= 8);
 80a0c18:	d8f7      	bhi.n	80a0c0a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xce>
 80a0c1a:	f003 0307 	and.w	r3, r3, #7
          }
        }

        if(h) { // Do the final partial byte, if necessary
 80a0c1e:	b1db      	cbz	r3, 80a0c58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
          // uint8_t mask = (1 << mod) - 1;
          // note - lookup table results in a nearly 10% performance
          // improvement in fill* functions
          static const uint8_t PROGMEM postmask[8] =
            { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a0c20:	4a0f      	ldr	r2, [pc, #60]	; (80a0c60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x124>)
          switch(color) {
 80a0c22:	2d01      	cmp	r5, #1
          // uint8_t mask = (1 << mod) - 1;
          // note - lookup table results in a nearly 10% performance
          // improvement in fill* functions
          static const uint8_t PROGMEM postmask[8] =
            { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a0c24:	5cd3      	ldrb	r3, [r2, r3]
          switch(color) {
 80a0c26:	d003      	beq.n	80a0c30 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf4>
 80a0c28:	d305      	bcc.n	80a0c36 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
 80a0c2a:	2d02      	cmp	r5, #2
 80a0c2c:	d114      	bne.n	80a0c58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
 80a0c2e:	e00b      	b.n	80a0c48 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x10c>
           case WHITE:   *pBuf |=  mask; break;
 80a0c30:	7822      	ldrb	r2, [r4, #0]
 80a0c32:	4313      	orrs	r3, r2
 80a0c34:	e00a      	b.n	80a0c4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x110>
           case BLACK:   *pBuf &= ~mask; break;
 80a0c36:	7822      	ldrb	r2, [r4, #0]
 80a0c38:	ea22 0303 	bic.w	r3, r2, r3
 80a0c3c:	e006      	b.n	80a0c4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x110>
              h    -= 8;      // Subtract 8 rows from height
            } while(h >= 8);
          }
        }

        if(h) { // Do the final partial byte, if necessary
 80a0c3e:	f013 0307 	ands.w	r3, r3, #7
 80a0c42:	d009      	beq.n	80a0c58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x11c>
          // uint8_t mask = (1 << mod) - 1;
          // note - lookup table results in a nearly 10% performance
          // improvement in fill* functions
          static const uint8_t PROGMEM postmask[8] =
            { 0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
          uint8_t mask = pgm_read_byte(&postmask[mod]);
 80a0c44:	4a06      	ldr	r2, [pc, #24]	; (80a0c60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x124>)
 80a0c46:	5cd3      	ldrb	r3, [r2, r3]
          switch(color) {
           case WHITE:   *pBuf |=  mask; break;
           case BLACK:   *pBuf &= ~mask; break;
           case INVERSE: *pBuf ^=  mask; break;
 80a0c48:	7822      	ldrb	r2, [r4, #0]
 80a0c4a:	4053      	eors	r3, r2
 80a0c4c:	7023      	strb	r3, [r4, #0]
          }
        }
      }
    } // endif positive height
  } // endif x in bounds
}
 80a0c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          { 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if(h < mod) mask &= (0XFF >> (mod - h));

        switch(color) {
 80a0c50:	2d02      	cmp	r5, #2
 80a0c52:	d0b9      	beq.n	80a0bc8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
         case WHITE:   *pBuf |=  mask; break;
         case BLACK:   *pBuf &= ~mask; break;
         case INVERSE: *pBuf ^=  mask; break;
        }
        pBuf += WIDTH;
 80a0c54:	4474      	add	r4, lr
 80a0c56:	e7c1      	b.n	80a0bdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xa0>
 80a0c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c5a:	bf00      	nop
 80a0c5c:	080a4680 	.word	0x080a4680
 80a0c60:	080a465c 	.word	0x080a465c

080a0c64 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLine(
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0c64:	b470      	push	{r4, r5, r6}
  boolean bSwap = false;
  switch(rotation) {
 80a0c66:	7e84      	ldrb	r4, [r0, #26]
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLine(
  int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0c68:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  boolean bSwap = false;
  switch(rotation) {
 80a0c6c:	2c02      	cmp	r4, #2
 80a0c6e:	d008      	beq.n	80a0c82 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
 80a0c70:	2c03      	cmp	r4, #3
 80a0c72:	d00f      	beq.n	80a0c94 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
 80a0c74:	2c01      	cmp	r4, #1
 80a0c76:	d118      	bne.n	80a0caa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x46>
   case 1:
    // 90 degree rotation, swap x & y for rotation, then invert x
    bSwap = true;
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
 80a0c78:	8905      	ldrh	r5, [r0, #8]
 80a0c7a:	3d01      	subs	r5, #1
 80a0c7c:	1aac      	subs	r4, r5, r2
 80a0c7e:	b224      	sxth	r4, r4
    break;
 80a0c80:	e00d      	b.n	80a0c9e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
   case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x  = WIDTH  - x - 1;
    y  = HEIGHT - y - 1;
 80a0c82:	8944      	ldrh	r4, [r0, #10]
 80a0c84:	3c01      	subs	r4, #1
 80a0c86:	1aa4      	subs	r4, r4, r2
 80a0c88:	b222      	sxth	r2, r4
    x -= (w-1);
 80a0c8a:	8904      	ldrh	r4, [r0, #8]
 80a0c8c:	1a61      	subs	r1, r4, r1
 80a0c8e:	1ac9      	subs	r1, r1, r3
 80a0c90:	b209      	sxth	r1, r1
    break;
 80a0c92:	e00a      	b.n	80a0caa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x46>
   case 3:
    // 270 degree rotation, swap x & y for rotation,
    // then invert y and adjust y for w (not to become h)
    bSwap = true;
    ssd1306_swap(x, y);
 80a0c94:	4614      	mov	r4, r2
    y  = HEIGHT - y - 1;
    y -= (w-1);
 80a0c96:	8942      	ldrh	r2, [r0, #10]
 80a0c98:	1ad2      	subs	r2, r2, r3
 80a0c9a:	1a51      	subs	r1, r2, r1
 80a0c9c:	b209      	sxth	r1, r1
    break;
  }

  if(bSwap) drawFastVLineInternal(x, y, w, color);
 80a0c9e:	9603      	str	r6, [sp, #12]
 80a0ca0:	460a      	mov	r2, r1
 80a0ca2:	4621      	mov	r1, r4
  else      drawFastHLineInternal(x, y, w, color);
}
 80a0ca4:	bc70      	pop	{r4, r5, r6}
    y  = HEIGHT - y - 1;
    y -= (w-1);
    break;
  }

  if(bSwap) drawFastVLineInternal(x, y, w, color);
 80a0ca6:	f7ff bf49 	b.w	80a0b3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
  else      drawFastHLineInternal(x, y, w, color);
 80a0caa:	9603      	str	r6, [sp, #12]
}
 80a0cac:	bc70      	pop	{r4, r5, r6}
    y -= (w-1);
    break;
  }

  if(bSwap) drawFastVLineInternal(x, y, w, color);
  else      drawFastHLineInternal(x, y, w, color);
 80a0cae:	f7ff bef9 	b.w	80a0aa4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>

080a0cb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLine(
  int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a0cb2:	b430      	push	{r4, r5}
  boolean bSwap = false;
  switch(rotation) {
 80a0cb4:	7e84      	ldrb	r4, [r0, #26]
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLine(
  int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a0cb6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  boolean bSwap = false;
  switch(rotation) {
 80a0cba:	2c02      	cmp	r4, #2
 80a0cbc:	d008      	beq.n	80a0cd0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
 80a0cbe:	2c03      	cmp	r4, #3
 80a0cc0:	d00f      	beq.n	80a0ce2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
 80a0cc2:	2c01      	cmp	r4, #1
 80a0cc4:	d118      	bne.n	80a0cf8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x46>
    // 90 degree rotation, swap x & y for rotation,
    // then invert x and adjust x for h (now to become w)
    bSwap = true;
    ssd1306_swap(x, y);
    x  = WIDTH - x - 1;
    x -= (h-1);
 80a0cc6:	8904      	ldrh	r4, [r0, #8]
 80a0cc8:	1ae4      	subs	r4, r4, r3
 80a0cca:	1aa2      	subs	r2, r4, r2
 80a0ccc:	b214      	sxth	r4, r2
    break;
 80a0cce:	e00d      	b.n	80a0cec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
   case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH  - x - 1;
 80a0cd0:	8904      	ldrh	r4, [r0, #8]
 80a0cd2:	3c01      	subs	r4, #1
 80a0cd4:	1a61      	subs	r1, r4, r1
    y = HEIGHT - y - 1;
    y -= (h-1);
 80a0cd6:	8944      	ldrh	r4, [r0, #10]
    x  = WIDTH - x - 1;
    x -= (h-1);
    break;
   case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH  - x - 1;
 80a0cd8:	b209      	sxth	r1, r1
    y = HEIGHT - y - 1;
    y -= (h-1);
 80a0cda:	1aa2      	subs	r2, r4, r2
 80a0cdc:	1ad2      	subs	r2, r2, r3
 80a0cde:	b212      	sxth	r2, r2
    break;
 80a0ce0:	e00a      	b.n	80a0cf8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x46>
   case 3:
    // 270 degree rotation, swap x & y for rotation, then invert y
    bSwap = true;
    ssd1306_swap(x, y);
 80a0ce2:	4614      	mov	r4, r2
    y = HEIGHT - y - 1;
 80a0ce4:	8942      	ldrh	r2, [r0, #10]
 80a0ce6:	3a01      	subs	r2, #1
 80a0ce8:	1a51      	subs	r1, r2, r1
 80a0cea:	b209      	sxth	r1, r1
    break;
  }

  if(bSwap) drawFastHLineInternal(x, y, h, color);
 80a0cec:	9502      	str	r5, [sp, #8]
 80a0cee:	460a      	mov	r2, r1
 80a0cf0:	4621      	mov	r1, r4
  else      drawFastVLineInternal(x, y, h, color);
}
 80a0cf2:	bc30      	pop	{r4, r5}
    ssd1306_swap(x, y);
    y = HEIGHT - y - 1;
    break;
  }

  if(bSwap) drawFastHLineInternal(x, y, h, color);
 80a0cf4:	f7ff bed6 	b.w	80a0aa4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
  else      drawFastVLineInternal(x, y, h, color);
 80a0cf8:	9502      	str	r5, [sp, #8]
}
 80a0cfa:	bc30      	pop	{r4, r5}
    y = HEIGHT - y - 1;
    break;
  }

  if(bSwap) drawFastHLineInternal(x, y, h, color);
  else      drawFastVLineInternal(x, y, h, color);
 80a0cfc:	f7ff bf1e 	b.w	80a0b3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>

080a0d00 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
 80a0d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0d04:	4604      	mov	r4, r0
  TRANSACTION_START
 80a0d06:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80a0d08:	b118      	cbz	r0, 80a0d12 <_ZN16Adafruit_SSD13067displayEv+0x12>
 80a0d0a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0d0c:	f001 f844 	bl	80a1d98 <_ZN7TwoWire8setSpeedEm>
 80a0d10:	e00b      	b.n	80a0d2a <_ZN16Adafruit_SSD13067displayEv+0x2a>
 80a0d12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0d14:	b118      	cbz	r0, 80a0d1e <_ZN16Adafruit_SSD13067displayEv+0x1e>
 80a0d16:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a0d1a:	f000 ff85 	bl	80a1c28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
 80a0d1e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a0d22:	2100      	movs	r1, #0
 80a0d24:	b280      	uxth	r0, r0
 80a0d26:	f001 fe0a 	bl	80a293e <digitalWrite>
    SSD1306_PAGEADDR,
    0,                         // Page start address
    0xFF,                      // Page end (not really, but works here)
    SSD1306_COLUMNADDR,
    0 };                       // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
 80a0d2a:	2205      	movs	r2, #5
 80a0d2c:	493f      	ldr	r1, [pc, #252]	; (80a0e2c <_ZN16Adafruit_SSD13067displayEv+0x12c>)
 80a0d2e:	4620      	mov	r0, r4
 80a0d30:	f7ff fd0b 	bl	80a074a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
 80a0d34:	7a21      	ldrb	r1, [r4, #8]
 80a0d36:	4620      	mov	r0, r4
 80a0d38:	3901      	subs	r1, #1
 80a0d3a:	b2c9      	uxtb	r1, r1
 80a0d3c:	f7ff fc96 	bl	80a066c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a0d40:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 80a0d44:	2308      	movs	r3, #8
 80a0d46:	3507      	adds	r5, #7
 80a0d48:	fb95 f5f3 	sdiv	r5, r5, r3
 80a0d4c:	8923      	ldrh	r3, [r4, #8]
  uint8_t *ptr   = buffer;
 80a0d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a0d50:	435d      	muls	r5, r3
  uint8_t *ptr   = buffer;
  if(wire) { // I2C
 80a0d52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
 80a0d54:	b2ad      	uxth	r5, r5
 80a0d56:	4435      	add	r5, r6
  uint8_t *ptr   = buffer;
  if(wire) { // I2C
 80a0d58:	b340      	cbz	r0, 80a0dac <_ZN16Adafruit_SSD13067displayEv+0xac>
    wire->beginTransmission(i2caddr);
 80a0d5a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a0d5e:	f001 f829 	bl	80a1db4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
 80a0d62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0d64:	2140      	movs	r1, #64	; 0x40
 80a0d66:	6803      	ldr	r3, [r0, #0]
    uint8_t bytesOut = 1;
 80a0d68:	2701      	movs	r7, #1
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
  uint8_t *ptr   = buffer;
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
 80a0d6a:	689b      	ldr	r3, [r3, #8]
 80a0d6c:	4798      	blx	r3
    uint8_t bytesOut = 1;
    while(count--) {
 80a0d6e:	42ae      	cmp	r6, r5
 80a0d70:	d018      	beq.n	80a0da4 <_ZN16Adafruit_SSD13067displayEv+0xa4>
      if(bytesOut >= WIRE_MAX) {
 80a0d72:	2f1f      	cmp	r7, #31
 80a0d74:	d90d      	bls.n	80a0d92 <_ZN16Adafruit_SSD13067displayEv+0x92>
        wire->endTransmission();
 80a0d76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0d78:	f001 f823 	bl	80a1dc2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
 80a0d7c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 80a0d80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0d82:	f001 f817 	bl	80a1db4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
 80a0d86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0d88:	2140      	movs	r1, #64	; 0x40
 80a0d8a:	6803      	ldr	r3, [r0, #0]
        bytesOut = 1;
 80a0d8c:	2701      	movs	r7, #1
    uint8_t bytesOut = 1;
    while(count--) {
      if(bytesOut >= WIRE_MAX) {
        wire->endTransmission();
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x40);
 80a0d8e:	689b      	ldr	r3, [r3, #8]
 80a0d90:	4798      	blx	r3
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
 80a0d92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0d94:	f816 1b01 	ldrb.w	r1, [r6], #1
 80a0d98:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
 80a0d9a:	3701      	adds	r7, #1
        wire->endTransmission();
        wire->beginTransmission(i2caddr);
        WIRE_WRITE((uint8_t)0x40);
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
 80a0d9c:	689b      	ldr	r3, [r3, #8]
 80a0d9e:	4798      	blx	r3
      bytesOut++;
 80a0da0:	b2ff      	uxtb	r7, r7
  uint8_t *ptr   = buffer;
  if(wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint8_t bytesOut = 1;
    while(count--) {
 80a0da2:	e7e4      	b.n	80a0d6e <_ZN16Adafruit_SSD13067displayEv+0x6e>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
 80a0da4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0da6:	f001 f80c 	bl	80a1dc2 <_ZN7TwoWire15endTransmissionEv>
 80a0daa:	e02a      	b.n	80a0e02 <_ZN16Adafruit_SSD13067displayEv+0x102>
  } else { // SPI
    SSD1306_MODE_DATA
 80a0dac:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
 80a0db0:	2101      	movs	r1, #1
 80a0db2:	b280      	uxth	r0, r0
 80a0db4:	f001 fdc3 	bl	80a293e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
 80a0db8:	42ae      	cmp	r6, r5
 80a0dba:	d022      	beq.n	80a0e02 <_ZN16Adafruit_SSD13067displayEv+0x102>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a0dbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      bytesOut++;
    }
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
 80a0dbe:	f816 9b01 	ldrb.w	r9, [r6], #1
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a0dc2:	b118      	cbz	r0, 80a0dcc <_ZN16Adafruit_SSD13067displayEv+0xcc>
    (void)spi->transfer(d);
 80a0dc4:	4649      	mov	r1, r9
 80a0dc6:	f000 ff9f 	bl	80a1d08 <_ZN8SPIClass8transferEh>
 80a0dca:	e7f5      	b.n	80a0db8 <_ZN16Adafruit_SSD13067displayEv+0xb8>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
 80a0dcc:	2708      	movs	r7, #8
 80a0dce:	f04f 0880 	mov.w	r8, #128	; 0x80
      if(d & bit) *mosiPort |=  mosiPinMask;
      else        *mosiPort &= ~mosiPinMask;
      *clkPort |=  clkPinMask; // Clock high
      *clkPort &= ~clkPinMask; // Clock low
#else
      digitalWrite(mosiPin, d & bit);
 80a0dd2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
 80a0dd6:	ea09 0108 	and.w	r1, r9, r8
 80a0dda:	b280      	uxth	r0, r0
 80a0ddc:	f001 fdaf 	bl	80a293e <digitalWrite>
      digitalWrite(clkPin , HIGH);
 80a0de0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0de4:	2101      	movs	r1, #1
 80a0de6:	b280      	uxth	r0, r0
 80a0de8:	f001 fda9 	bl	80a293e <digitalWrite>
      digitalWrite(clkPin , LOW);
 80a0dec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
 80a0df0:	2100      	movs	r1, #0
 80a0df2:	b280      	uxth	r0, r0
 80a0df4:	f001 fda3 	bl	80a293e <digitalWrite>
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if(spi) {
    (void)spi->transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
 80a0df8:	3f01      	subs	r7, #1
 80a0dfa:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80a0dfe:	d1e8      	bne.n	80a0dd2 <_ZN16Adafruit_SSD13067displayEv+0xd2>
 80a0e00:	e7da      	b.n	80a0db8 <_ZN16Adafruit_SSD13067displayEv+0xb8>
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
 80a0e02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0e04:	b120      	cbz	r0, 80a0e10 <_ZN16Adafruit_SSD13067displayEv+0x110>
 80a0e06:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
#if defined(ESP8266)
  yield();
#endif
}
 80a0e08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0e0c:	f000 bfc4 	b.w	80a1d98 <_ZN7TwoWire8setSpeedEm>
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
 80a0e10:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
 80a0e14:	2101      	movs	r1, #1
 80a0e16:	b280      	uxth	r0, r0
 80a0e18:	f001 fd91 	bl	80a293e <digitalWrite>
 80a0e1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0e1e:	b118      	cbz	r0, 80a0e28 <_ZN16Adafruit_SSD13067displayEv+0x128>
#if defined(ESP8266)
  yield();
#endif
}
 80a0e20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
  } else { // SPI
    SSD1306_MODE_DATA
    while(count--) SPIwrite(*ptr++);
  }
  TRANSACTION_END
 80a0e24:	f000 bee7 	b.w	80a1bf6 <_ZN8SPIClass14endTransactionEv>
 80a0e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0e2c:	080a4688 	.word	0x080a4688

080a0e30 <_GLOBAL__sub_I__ZN16Adafruit_SSD1306C2EhhP7TwoWireamm>:
 80a0e30:	f000 bd2e 	b.w	80a1890 <HAL_Pin_Map>

080a0e34 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e38:	461e      	mov	r6, r3
 80a0e3a:	b085      	sub	sp, #20
 80a0e3c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a0e40:	4615      	mov	r5, r2
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a0e42:	1a9a      	subs	r2, r3, r2
 80a0e44:	2a00      	cmp	r2, #0
 80a0e46:	bfb8      	it	lt
 80a0e48:	4252      	neglt	r2, r2
 80a0e4a:	9200      	str	r2, [sp, #0]
 80a0e4c:	1a72      	subs	r2, r6, r1
 80a0e4e:	2a00      	cmp	r2, #0
 80a0e50:	bfb8      	it	lt
 80a0e52:	4252      	neglt	r2, r2
 80a0e54:	9201      	str	r2, [sp, #4]
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0e56:	460c      	mov	r4, r1
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
 80a0e58:	9a00      	ldr	r2, [sp, #0]
 80a0e5a:	9901      	ldr	r1, [sp, #4]
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0e5c:	4681      	mov	r9, r0
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
 80a0e5e:	428a      	cmp	r2, r1
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a0e60:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
 80a0e64:	dd05      	ble.n	80a0e72 <_ZN12Adafruit_GFX9writeLineEsssst+0x3e>
 80a0e66:	4632      	mov	r2, r6
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
 80a0e68:	461e      	mov	r6, r3
 80a0e6a:	4613      	mov	r3, r2
        uint16_t color) {
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
 80a0e6c:	4622      	mov	r2, r4
        _swap_int16_t(x0, y0);
 80a0e6e:	462c      	mov	r4, r5
 80a0e70:	4615      	mov	r5, r2
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80a0e72:	42b4      	cmp	r4, r6
 80a0e74:	dd05      	ble.n	80a0e82 <_ZN12Adafruit_GFX9writeLineEsssst+0x4e>
 80a0e76:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 80a0e78:	461d      	mov	r5, r3
 80a0e7a:	4613      	mov	r3, r2
    if (steep) {
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 80a0e7c:	4622      	mov	r2, r4
 80a0e7e:	4634      	mov	r4, r6
 80a0e80:	4616      	mov	r6, r2
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);
 80a0e82:	1b5a      	subs	r2, r3, r5
 80a0e84:	2a00      	cmp	r2, #0
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80a0e86:	ebc4 0806 	rsb	r8, r4, r6
    dy = abs(y1 - y0);
 80a0e8a:	bfb8      	it	lt
 80a0e8c:	4252      	neglt	r2, r2
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80a0e8e:	fa1f f888 	uxth.w	r8, r8
    dy = abs(y1 - y0);
 80a0e92:	9203      	str	r2, [sp, #12]

    int16_t err = dx / 2;
 80a0e94:	fa0f f788 	sxth.w	r7, r8
 80a0e98:	2202      	movs	r2, #2
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 80a0e9a:	429d      	cmp	r5, r3
 80a0e9c:	bfb4      	ite	lt
 80a0e9e:	2301      	movlt	r3, #1
 80a0ea0:	f04f 33ff 	movge.w	r3, #4294967295

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);

    int16_t err = dx / 2;
 80a0ea4:	fb97 f7f2 	sdiv	r7, r7, r2
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 80a0ea8:	9302      	str	r3, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 80a0eaa:	42b4      	cmp	r4, r6
 80a0eac:	dc1f      	bgt.n	80a0eee <_ZN12Adafruit_GFX9writeLineEsssst+0xba>
        if (steep) {
 80a0eae:	9a01      	ldr	r2, [sp, #4]
 80a0eb0:	9b00      	ldr	r3, [sp, #0]
            writePixel(y0, x0, color);
        } else {
            writePixel(x0, y0, color);
 80a0eb2:	4648      	mov	r0, r9
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
        if (steep) {
 80a0eb4:	4293      	cmp	r3, r2
 80a0eb6:	f8d9 3000 	ldr.w	r3, [r9]
            writePixel(y0, x0, color);
 80a0eba:	bfc8      	it	gt
 80a0ebc:	4622      	movgt	r2, r4
 80a0ebe:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a0ec2:	bfc8      	it	gt
 80a0ec4:	4629      	movgt	r1, r5
 80a0ec6:	4653      	mov	r3, sl
        } else {
            writePixel(x0, y0, color);
 80a0ec8:	bfdc      	itt	le
 80a0eca:	462a      	movle	r2, r5
 80a0ecc:	4621      	movle	r1, r4
 80a0ece:	47d8      	blx	fp
        }
        err -= dy;
 80a0ed0:	9b03      	ldr	r3, [sp, #12]
 80a0ed2:	1aff      	subs	r7, r7, r3
 80a0ed4:	b2bb      	uxth	r3, r7
 80a0ed6:	b21f      	sxth	r7, r3
        if (err < 0) {
 80a0ed8:	2f00      	cmp	r7, #0
 80a0eda:	da05      	bge.n	80a0ee8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
            y0 += ystep;
 80a0edc:	9a02      	ldr	r2, [sp, #8]
            err += dx;
 80a0ede:	eb08 0703 	add.w	r7, r8, r3
        } else {
            writePixel(x0, y0, color);
        }
        err -= dy;
        if (err < 0) {
            y0 += ystep;
 80a0ee2:	4415      	add	r5, r2
 80a0ee4:	b22d      	sxth	r5, r5
            err += dx;
 80a0ee6:	b23f      	sxth	r7, r7
 80a0ee8:	3401      	adds	r4, #1
 80a0eea:	b224      	sxth	r4, r4
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
 80a0eec:	e7dd      	b.n	80a0eaa <_ZN12Adafruit_GFX9writeLineEsssst+0x76>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
 80a0eee:	b005      	add	sp, #20
 80a0ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0ef4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 80a0ef4:	b410      	push	{r4}
    drawPixel(x, y, color);
 80a0ef6:	6804      	ldr	r4, [r0, #0]
 80a0ef8:	6924      	ldr	r4, [r4, #16]
 80a0efa:	46a4      	mov	ip, r4
}
 80a0efc:	bc10      	pop	{r4}
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    drawPixel(x, y, color);
 80a0efe:	4760      	bx	ip

080a0f00 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a0f00:	b430      	push	{r4, r5}
 80a0f02:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 80a0f06:	6804      	ldr	r4, [r0, #0]
 80a0f08:	9502      	str	r5, [sp, #8]
 80a0f0a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80a0f0c:	46a4      	mov	ip, r4
}
 80a0f0e:	bc30      	pop	{r4, r5}
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 80a0f10:	4760      	bx	ip

080a0f12 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a0f12:	b430      	push	{r4, r5}
 80a0f14:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 80a0f18:	6804      	ldr	r4, [r0, #0]
 80a0f1a:	9502      	str	r5, [sp, #8]
 80a0f1c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80a0f1e:	46a4      	mov	ip, r4
}
 80a0f20:	bc30      	pop	{r4, r5}
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 80a0f22:	4760      	bx	ip

080a0f24 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0f24:	b470      	push	{r4, r5, r6}
 80a0f26:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80a0f2a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 80a0f2e:	6804      	ldr	r4, [r0, #0]
 80a0f30:	9604      	str	r6, [sp, #16]
 80a0f32:	9503      	str	r5, [sp, #12]
 80a0f34:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80a0f36:	46a4      	mov	ip, r4
}
 80a0f38:	bc70      	pop	{r4, r5, r6}
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 80a0f3a:	4760      	bx	ip

080a0f3c <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    End a display-writing routine, overwrite in subclasses if startWrite is defined!
*/
/**************************************************************************/
void Adafruit_GFX::endWrite(){
 80a0f3c:	4770      	bx	lr

080a0f3e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a0f3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0f42:	461c      	mov	r4, r3
 80a0f44:	4616      	mov	r6, r2
 80a0f46:	4605      	mov	r5, r0
 80a0f48:	460f      	mov	r7, r1
    startWrite();
 80a0f4a:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 80a0f4c:	3c01      	subs	r4, #1
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 80a0f4e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 80a0f52:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 80a0f54:	4434      	add	r4, r6
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
 80a0f56:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 80a0f58:	b224      	sxth	r4, r4
 80a0f5a:	682b      	ldr	r3, [r5, #0]
 80a0f5c:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0f60:	9400      	str	r4, [sp, #0]
 80a0f62:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80a0f64:	4628      	mov	r0, r5
 80a0f66:	463b      	mov	r3, r7
 80a0f68:	4632      	mov	r2, r6
 80a0f6a:	4639      	mov	r1, r7
 80a0f6c:	47a0      	blx	r4
    endWrite();
 80a0f6e:	4628      	mov	r0, r5
 80a0f70:	682b      	ldr	r3, [r5, #0]
 80a0f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0f74:	b002      	add	sp, #8
 80a0f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
    writeLine(x, y, x, y+h-1, color);
    endWrite();
 80a0f7a:	4718      	bx	r3

080a0f7c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a0f7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0f80:	4617      	mov	r7, r2
 80a0f82:	4604      	mov	r4, r0
 80a0f84:	461d      	mov	r5, r3
 80a0f86:	460e      	mov	r6, r1
    startWrite();
 80a0f88:	6803      	ldr	r3, [r0, #0]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 80a0f8a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 80a0f8e:	695b      	ldr	r3, [r3, #20]
 80a0f90:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 80a0f92:	e88d 0180 	stmia.w	sp, {r7, r8}
 80a0f96:	6822      	ldr	r2, [r4, #0]
 80a0f98:	1e6b      	subs	r3, r5, #1
 80a0f9a:	4433      	add	r3, r6
 80a0f9c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80a0f9e:	4620      	mov	r0, r4
 80a0fa0:	b21b      	sxth	r3, r3
 80a0fa2:	463a      	mov	r2, r7
 80a0fa4:	4631      	mov	r1, r6
 80a0fa6:	47a8      	blx	r5
    endWrite();
 80a0fa8:	4620      	mov	r0, r4
 80a0faa:	6823      	ldr	r3, [r4, #0]
 80a0fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a0fae:	b002      	add	sp, #8
 80a0fb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    startWrite();
    writeLine(x, y, x+w-1, y, color);
    endWrite();
 80a0fb4:	4718      	bx	r3

080a0fb6 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0fb6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0fba:	461e      	mov	r6, r3
    startWrite();
 80a0fbc:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0fbe:	460c      	mov	r4, r1
    startWrite();
 80a0fc0:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a0fc2:	4605      	mov	r5, r0
 80a0fc4:	4617      	mov	r7, r2
 80a0fc6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0fca:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    startWrite();
 80a0fce:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 80a0fd0:	4426      	add	r6, r4
 80a0fd2:	42b4      	cmp	r4, r6
 80a0fd4:	682a      	ldr	r2, [r5, #0]
 80a0fd6:	da0b      	bge.n	80a0ff0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 80a0fd8:	f8cd 9000 	str.w	r9, [sp]
 80a0fdc:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80a0fe0:	4621      	mov	r1, r4
 80a0fe2:	4643      	mov	r3, r8
 80a0fe4:	463a      	mov	r2, r7
 80a0fe6:	4628      	mov	r0, r5
 80a0fe8:	3401      	adds	r4, #1
 80a0fea:	47d0      	blx	sl
 80a0fec:	b224      	sxth	r4, r4
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
 80a0fee:	e7f0      	b.n	80a0fd2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
        writeFastVLine(i, y, h, color);
    }
    endWrite();
 80a0ff0:	4628      	mov	r0, r5
 80a0ff2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
}
 80a0ff4:	b002      	add	sp, #8
 80a0ff6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
        writeFastVLine(i, y, h, color);
    }
    endWrite();
 80a0ffa:	4718      	bx	r3

080a0ffc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 80a0ffc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 80a0ffe:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a1002:	6804      	ldr	r4, [r0, #0]
 80a1004:	9101      	str	r1, [sp, #4]
 80a1006:	9200      	str	r2, [sp, #0]
 80a1008:	2200      	movs	r2, #0
 80a100a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a100e:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80a1010:	4611      	mov	r1, r2
 80a1012:	47a0      	blx	r4
}
 80a1014:	b002      	add	sp, #8
 80a1016:	bd10      	pop	{r4, pc}

080a1018 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a1018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
 80a101c:	4299      	cmp	r1, r3
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80a101e:	4690      	mov	r8, r2
 80a1020:	4607      	mov	r7, r0
 80a1022:	460e      	mov	r6, r1
 80a1024:	461c      	mov	r4, r3
 80a1026:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80a102a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
 80a102e:	6802      	ldr	r2, [r0, #0]
    // Update in subclasses if desired!
    if(x0 == x1){
 80a1030:	d10b      	bne.n	80a104a <_ZN12Adafruit_GFX8drawLineEsssst+0x32>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80a1032:	45a8      	cmp	r8, r5
 80a1034:	bfc2      	ittt	gt
 80a1036:	4643      	movgt	r3, r8
 80a1038:	46a8      	movgt	r8, r5
 80a103a:	461d      	movgt	r5, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80a103c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a1040:	1c6b      	adds	r3, r5, #1
 80a1042:	ebc8 0303 	rsb	r3, r8, r3
 80a1046:	6b94      	ldr	r4, [r2, #56]	; 0x38
 80a1048:	e00b      	b.n	80a1062 <_ZN12Adafruit_GFX8drawLineEsssst+0x4a>
    } else if(y0 == y1){
 80a104a:	45a8      	cmp	r8, r5
 80a104c:	d112      	bne.n	80a1074 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80a104e:	4299      	cmp	r1, r3
 80a1050:	bfc2      	ittt	gt
 80a1052:	460b      	movgt	r3, r1
 80a1054:	4626      	movgt	r6, r4
 80a1056:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a1058:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80a105c:	1c63      	adds	r3, r4, #1
 80a105e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a1060:	1b9b      	subs	r3, r3, r6
 80a1062:	4642      	mov	r2, r8
 80a1064:	4631      	mov	r1, r6
 80a1066:	4638      	mov	r0, r7
 80a1068:	46a4      	mov	ip, r4
 80a106a:	b21b      	sxth	r3, r3
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
 80a106c:	b003      	add	sp, #12
 80a106e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80a1072:	4760      	bx	ip
    } else {
        startWrite();
 80a1074:	6953      	ldr	r3, [r2, #20]
 80a1076:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 80a1078:	683b      	ldr	r3, [r7, #0]
 80a107a:	e88d 0220 	stmia.w	sp, {r5, r9}
 80a107e:	4638      	mov	r0, r7
 80a1080:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80a1082:	4642      	mov	r2, r8
 80a1084:	4623      	mov	r3, r4
 80a1086:	4631      	mov	r1, r6
 80a1088:	47a8      	blx	r5
        endWrite();
 80a108a:	4638      	mov	r0, r7
 80a108c:	683b      	ldr	r3, [r7, #0]
 80a108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }
}
 80a1090:	b003      	add	sp, #12
 80a1092:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
 80a1096:	4718      	bx	r3

080a1098 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a1098:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a109c:	4604      	mov	r4, r0
 80a109e:	460d      	mov	r5, r1
 80a10a0:	4617      	mov	r7, r2
 80a10a2:	461e      	mov	r6, r3
    startWrite();
 80a10a4:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a10a6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 80a10aa:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 80a10ac:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 80a10b0:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 80a10b2:	6823      	ldr	r3, [r4, #0]
 80a10b4:	f8cd 8000 	str.w	r8, [sp]
 80a10b8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a10bc:	463a      	mov	r2, r7
 80a10be:	4633      	mov	r3, r6
 80a10c0:	4629      	mov	r1, r5
 80a10c2:	4620      	mov	r0, r4
 80a10c4:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 80a10c6:	6823      	ldr	r3, [r4, #0]
 80a10c8:	f109 32ff 	add.w	r2, r9, #4294967295
 80a10cc:	f8cd 8000 	str.w	r8, [sp]
 80a10d0:	443a      	add	r2, r7
 80a10d2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 80a10d6:	4629      	mov	r1, r5
 80a10d8:	4633      	mov	r3, r6
 80a10da:	4620      	mov	r0, r4
 80a10dc:	b212      	sxth	r2, r2
 80a10de:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 80a10e0:	6823      	ldr	r3, [r4, #0]
 80a10e2:	f8cd 8000 	str.w	r8, [sp]
 80a10e6:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80a10ea:	463a      	mov	r2, r7
 80a10ec:	464b      	mov	r3, r9
 80a10ee:	4629      	mov	r1, r5
 80a10f0:	4620      	mov	r0, r4
 80a10f2:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 80a10f4:	6823      	ldr	r3, [r4, #0]
 80a10f6:	1e71      	subs	r1, r6, #1
 80a10f8:	f8cd 8000 	str.w	r8, [sp]
 80a10fc:	4429      	add	r1, r5
 80a10fe:	4620      	mov	r0, r4
 80a1100:	6a1d      	ldr	r5, [r3, #32]
 80a1102:	463a      	mov	r2, r7
 80a1104:	464b      	mov	r3, r9
 80a1106:	b209      	sxth	r1, r1
 80a1108:	47a8      	blx	r5
    endWrite();
 80a110a:	4620      	mov	r0, r4
 80a110c:	6823      	ldr	r3, [r4, #0]
 80a110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a1110:	b002      	add	sp, #8
 80a1112:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    startWrite();
    writeFastHLine(x, y, w, color);
    writeFastHLine(x, y+h-1, w, color);
    writeFastVLine(x, y, h, color);
    writeFastVLine(x+w-1, y, h, color);
    endWrite();
 80a1116:	4718      	bx	r3

080a1118 <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
 80a1118:	4770      	bx	lr

080a111a <_ZN12Adafruit_GFX11setRotationEh>:
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
 80a111a:	f001 0103 	and.w	r1, r1, #3
    switch(rotation) {
 80a111e:	2901      	cmp	r1, #1
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
 80a1120:	7681      	strb	r1, [r0, #26]
 80a1122:	8903      	ldrh	r3, [r0, #8]
 80a1124:	8942      	ldrh	r2, [r0, #10]
    switch(rotation) {
 80a1126:	d004      	beq.n	80a1132 <_ZN12Adafruit_GFX11setRotationEh+0x18>
 80a1128:	2903      	cmp	r1, #3
 80a112a:	d002      	beq.n	80a1132 <_ZN12Adafruit_GFX11setRotationEh+0x18>
        case 0:
        case 2:
            _width  = WIDTH;
 80a112c:	8183      	strh	r3, [r0, #12]
            _height = HEIGHT;
 80a112e:	81c2      	strh	r2, [r0, #14]
 80a1130:	4770      	bx	lr
            break;
        case 1:
        case 3:
            _width  = HEIGHT;
 80a1132:	8182      	strh	r2, [r0, #12]
            _height = WIDTH;
 80a1134:	81c3      	strh	r3, [r0, #14]
 80a1136:	4770      	bx	lr

080a1138 <_ZN12Adafruit_GFXC1Ess>:
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
WIDTH(w), HEIGHT(h)
 80a1138:	8101      	strh	r1, [r0, #8]
{
    _width    = WIDTH;
 80a113a:	8181      	strh	r1, [r0, #12]
    _height   = HEIGHT;
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize_x = textsize_y  = 1;
    textcolor = textbgcolor = 0xFFFF;
 80a113c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   @brief    Instatiate a GFX context for graphics! Can only be done by a superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a1140:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 80a1142:	4d09      	ldr	r5, [pc, #36]	; (80a1168 <_ZN12Adafruit_GFXC1Ess+0x30>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1144:	2400      	movs	r4, #0
 80a1146:	8142      	strh	r2, [r0, #10]
{
    _width    = WIDTH;
    _height   = HEIGHT;
 80a1148:	81c2      	strh	r2, [r0, #14]
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize_x = textsize_y  = 1;
 80a114a:	2201      	movs	r2, #1
 80a114c:	6044      	str	r4, [r0, #4]
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
WIDTH(w), HEIGHT(h)
 80a114e:	6005      	str	r5, [r0, #0]
{
    _width    = WIDTH;
    _height   = HEIGHT;
    rotation  = 0;
 80a1150:	7684      	strb	r4, [r0, #26]
    cursor_y  = cursor_x    = 0;
 80a1152:	8204      	strh	r4, [r0, #16]
 80a1154:	8244      	strh	r4, [r0, #18]
    textsize_x = textsize_y  = 1;
 80a1156:	7642      	strb	r2, [r0, #25]
 80a1158:	7602      	strb	r2, [r0, #24]
    textcolor = textbgcolor = 0xFFFF;
 80a115a:	82c1      	strh	r1, [r0, #22]
 80a115c:	8281      	strh	r1, [r0, #20]
    wrap      = true;
 80a115e:	76c2      	strb	r2, [r0, #27]
    _cp437    = false;
 80a1160:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 80a1162:	6204      	str	r4, [r0, #32]
}
 80a1164:	bd30      	pop	{r4, r5, pc}
 80a1166:	bf00      	nop
 80a1168:	080a4b90 	.word	0x080a4b90

080a116c <_ZN12Adafruit_GFX10drawBitmapEssPhsst>:
    @param    h   Height of bitmap in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {
 80a116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1170:	b089      	sub	sp, #36	; 0x24
 80a1172:	469a      	mov	sl, r3
 80a1174:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80a1178:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
 80a117c:	9304      	str	r3, [sp, #16]
 80a117e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80a1182:	9203      	str	r2, [sp, #12]
 80a1184:	9305      	str	r3, [sp, #20]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
 80a1186:	6803      	ldr	r3, [r0, #0]
    @param    h   Height of bitmap in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {
 80a1188:	9102      	str	r1, [sp, #8]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
 80a118a:	695b      	ldr	r3, [r3, #20]
 80a118c:	2600      	movs	r6, #0
    @param    h   Height of bitmap in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {
 80a118e:	4605      	mov	r5, r0

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
 80a1190:	4798      	blx	r3
 80a1192:	2308      	movs	r3, #8
 80a1194:	f109 0207 	add.w	r2, r9, #7
 80a1198:	fb92 fbf3 	sdiv	fp, r2, r3
/**************************************************************************/
void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
  uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) {

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;
 80a119c:	4634      	mov	r4, r6

    startWrite();
 80a119e:	9600      	str	r6, [sp, #0]
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a11a0:	9307      	str	r3, [sp, #28]
 80a11a2:	9a00      	ldr	r2, [sp, #0]
 80a11a4:	9b03      	ldr	r3, [sp, #12]
 80a11a6:	4413      	add	r3, r2
 80a11a8:	b21b      	sxth	r3, r3
 80a11aa:	9301      	str	r3, [sp, #4]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
 80a11ac:	9a04      	ldr	r2, [sp, #16]
 80a11ae:	f9bd 3000 	ldrsh.w	r3, [sp]
 80a11b2:	429a      	cmp	r2, r3
 80a11b4:	dd28      	ble.n	80a1208 <_ZN12Adafruit_GFX10drawBitmapEssPhsst+0x9c>
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a11b6:	eb0a 0306 	add.w	r3, sl, r6

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
 80a11ba:	f04f 0800 	mov.w	r8, #0
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a11be:	9306      	str	r3, [sp, #24]
 80a11c0:	fa0f f388 	sxth.w	r3, r8
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
 80a11c4:	454b      	cmp	r3, r9
 80a11c6:	da1a      	bge.n	80a11fe <_ZN12Adafruit_GFX10drawBitmapEssPhsst+0x92>
            if(i & 7) byte <<= 1;
 80a11c8:	fa1f f188 	uxth.w	r1, r8
 80a11cc:	074a      	lsls	r2, r1, #29
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a11ce:	bf09      	itett	eq
 80a11d0:	9a07      	ldreq	r2, [sp, #28]
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
 80a11d2:	0064      	lslne	r4, r4, #1
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a11d4:	fb93 f3f2 	sdiveq	r3, r3, r2
 80a11d8:	9a06      	ldreq	r2, [sp, #24]
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
            if(i & 7) byte <<= 1;
 80a11da:	bf14      	ite	ne
 80a11dc:	b2e4      	uxtbne	r4, r4
            else      byte   = bitmap[j * byteWidth + i / 8];
 80a11de:	5cd4      	ldrbeq	r4, [r2, r3]
            if(byte & 0x80) writePixel(x+i, y, color);
 80a11e0:	0623      	lsls	r3, r4, #24
 80a11e2:	d509      	bpl.n	80a11f8 <_ZN12Adafruit_GFX10drawBitmapEssPhsst+0x8c>
 80a11e4:	9b02      	ldr	r3, [sp, #8]
 80a11e6:	9a01      	ldr	r2, [sp, #4]
 80a11e8:	4419      	add	r1, r3
 80a11ea:	682b      	ldr	r3, [r5, #0]
 80a11ec:	b209      	sxth	r1, r1
 80a11ee:	699b      	ldr	r3, [r3, #24]
 80a11f0:	4628      	mov	r0, r5
 80a11f2:	461f      	mov	r7, r3
 80a11f4:	9b05      	ldr	r3, [sp, #20]
 80a11f6:	47b8      	blx	r7
 80a11f8:	f108 0801 	add.w	r8, r8, #1
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
        for(int16_t i=0; i<w; i++ ) {
 80a11fc:	e7e0      	b.n	80a11c0 <_ZN12Adafruit_GFX10drawBitmapEssPhsst+0x54>
 80a11fe:	9b00      	ldr	r3, [sp, #0]
 80a1200:	445e      	add	r6, fp
 80a1202:	3301      	adds	r3, #1
 80a1204:	9300      	str	r3, [sp, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    startWrite();
    for(int16_t j=0; j<h; j++, y++) {
 80a1206:	e7cc      	b.n	80a11a2 <_ZN12Adafruit_GFX10drawBitmapEssPhsst+0x36>
            if(i & 7) byte <<= 1;
            else      byte   = bitmap[j * byteWidth + i / 8];
            if(byte & 0x80) writePixel(x+i, y, color);
        }
    }
    endWrite();
 80a1208:	4628      	mov	r0, r5
 80a120a:	682b      	ldr	r3, [r5, #0]
 80a120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80a120e:	b009      	add	sp, #36	; 0x24
 80a1210:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if(i & 7) byte <<= 1;
            else      byte   = bitmap[j * byteWidth + i / 8];
            if(byte & 0x80) writePixel(x+i, y, color);
        }
    }
    endWrite();
 80a1214:	4718      	bx	r3

080a1216 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
 80a1216:	b470      	push	{r4, r5, r6}
 80a1218:	f9bd 400c 	ldrsh.w	r4, [sp, #12]
 80a121c:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 80a1220:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 80a1224:	9504      	str	r5, [sp, #16]
 80a1226:	9605      	str	r6, [sp, #20]
 80a1228:	9403      	str	r4, [sp, #12]
 80a122a:	bc70      	pop	{r4, r5, r6}
 80a122c:	f7ff bf9e 	b.w	80a116c <_ZN12Adafruit_GFX10drawBitmapEssPhsst>

080a1230 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80a1230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1234:	b091      	sub	sp, #68	; 0x44
 80a1236:	4617      	mov	r7, r2
 80a1238:	4698      	mov	r8, r3

    if(!gfxFont) { // 'Classic' built-in font
 80a123a:	6a02      	ldr	r2, [r0, #32]
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 80a123c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80a1240:	4604      	mov	r4, r0
 80a1242:	9103      	str	r1, [sp, #12]
 80a1244:	9302      	str	r3, [sp, #8]
 80a1246:	f8bd 906c 	ldrh.w	r9, [sp, #108]	; 0x6c
 80a124a:	f89d 6070 	ldrb.w	r6, [sp, #112]	; 0x70
 80a124e:	f89d 5074 	ldrb.w	r5, [sp, #116]	; 0x74

    if(!gfxFont) { // 'Classic' built-in font
 80a1252:	2a00      	cmp	r2, #0
 80a1254:	f040 80b4 	bne.w	80a13c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x190>

        if((x >= _width)            || // Clip right
 80a1258:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a125c:	428b      	cmp	r3, r1
 80a125e:	f340 813b 	ble.w	80a14d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a8>
 80a1262:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80a1266:	42bb      	cmp	r3, r7
 80a1268:	f340 8136 	ble.w	80a14d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a8>
           (y >= _height)           || // Clip bottom
 80a126c:	2306      	movs	r3, #6
 80a126e:	fb03 1306 	mla	r3, r3, r6, r1
 80a1272:	2b00      	cmp	r3, #0
 80a1274:	f340 8130 	ble.w	80a14d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a8>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 80a1278:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80a127c:	2b00      	cmp	r3, #0
 80a127e:	f340 812b 	ble.w	80a14d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2a8>
           ((y + 8 * size_y - 1) < 0))   // Clip top
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80a1282:	7f03      	ldrb	r3, [r0, #28]
 80a1284:	b933      	cbnz	r3, 80a1294 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x64>
 80a1286:	f1b8 0faf 	cmp.w	r8, #175	; 0xaf
 80a128a:	bf84      	itt	hi
 80a128c:	f108 0801 	addhi.w	r8, r8, #1
 80a1290:	fa5f f888 	uxtbhi.w	r8, r8

        startWrite();
 80a1294:	6823      	ldr	r3, [r4, #0]
 80a1296:	4620      	mov	r0, r4
 80a1298:	695b      	ldr	r3, [r3, #20]
 80a129a:	4798      	blx	r3
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a129c:	2305      	movs	r3, #5
 80a129e:	9308      	str	r3, [sp, #32]
 80a12a0:	4b8f      	ldr	r3, [pc, #572]	; (80a14e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2b0>)
 80a12a2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80a12a6:	4443      	add	r3, r8
 80a12a8:	930c      	str	r3, [sp, #48]	; 0x30
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
                } else if(bg != color) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, bg);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a12aa:	b233      	sxth	r3, r6
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80a12ac:	f04f 0a00 	mov.w	sl, #0
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
                } else if(bg != color) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, bg);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a12b0:	930b      	str	r3, [sp, #44]	; 0x2c
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a12b2:	b2b2      	uxth	r2, r6
 80a12b4:	9206      	str	r2, [sp, #24]

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a12b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a12b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a12bc:	f813 300a 	ldrb.w	r3, [r3, sl]
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a12c0:	9204      	str	r2, [sp, #16]
 80a12c2:	9904      	ldr	r1, [sp, #16]
 80a12c4:	9a06      	ldr	r2, [sp, #24]

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 80a12c6:	9305      	str	r3, [sp, #20]
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a12c8:	fa1f f38a 	uxth.w	r3, sl
 80a12cc:	fb02 1203 	mla	r2, r2, r3, r1
                } else if(bg != color) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, bg);
 80a12d0:	440b      	add	r3, r1
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a12d2:	b212      	sxth	r2, r2
 80a12d4:	9207      	str	r2, [sp, #28]
                } else if(bg != color) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, bg);
 80a12d6:	b21b      	sxth	r3, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a12d8:	2208      	movs	r2, #8
 80a12da:	9209      	str	r2, [sp, #36]	; 0x24
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80a12dc:	f04f 0800 	mov.w	r8, #0
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
                } else if(bg != color) {
                    if(size_x == 1 && size_y == 1)
                        writePixel(x+i, y+j, bg);
 80a12e0:	930a      	str	r3, [sp, #40]	; 0x28

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
 80a12e2:	9b05      	ldr	r3, [sp, #20]
 80a12e4:	07da      	lsls	r2, r3, #31
 80a12e6:	d510      	bpl.n	80a130a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xda>
                    if(size_x == 1 && size_y == 1)
 80a12e8:	2e01      	cmp	r6, #1
 80a12ea:	d108      	bne.n	80a12fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0xce>
 80a12ec:	2d01      	cmp	r5, #1
 80a12ee:	d106      	bne.n	80a12fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0xce>
                        writePixel(x+i, y+j, color);
 80a12f0:	6823      	ldr	r3, [r4, #0]
 80a12f2:	eb08 0207 	add.w	r2, r8, r7
 80a12f6:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a12fa:	9b02      	ldr	r3, [sp, #8]
 80a12fc:	e012      	b.n	80a1324 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xf4>
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 80a12fe:	9902      	ldr	r1, [sp, #8]
 80a1300:	fb08 7205 	mla	r2, r8, r5, r7
 80a1304:	6823      	ldr	r3, [r4, #0]
 80a1306:	9101      	str	r1, [sp, #4]
 80a1308:	e016      	b.n	80a1338 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x108>
                } else if(bg != color) {
 80a130a:	9b02      	ldr	r3, [sp, #8]
 80a130c:	454b      	cmp	r3, r9
 80a130e:	d01b      	beq.n	80a1348 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x118>
                    if(size_x == 1 && size_y == 1)
 80a1310:	2e01      	cmp	r6, #1
 80a1312:	d10c      	bne.n	80a132e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xfe>
 80a1314:	2d01      	cmp	r5, #1
 80a1316:	d10a      	bne.n	80a132e <_ZN12Adafruit_GFX8drawCharEsshtthh+0xfe>
                        writePixel(x+i, y+j, bg);
 80a1318:	6823      	ldr	r3, [r4, #0]
 80a131a:	eb08 0207 	add.w	r2, r8, r7
 80a131e:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a1322:	464b      	mov	r3, r9
 80a1324:	b212      	sxth	r2, r2
 80a1326:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a1328:	4620      	mov	r0, r4
 80a132a:	47d8      	blx	fp
 80a132c:	e00c      	b.n	80a1348 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x118>
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 80a132e:	fb08 7205 	mla	r2, r8, r5, r7
 80a1332:	6823      	ldr	r3, [r4, #0]
 80a1334:	f8cd 9004 	str.w	r9, [sp, #4]
 80a1338:	9500      	str	r5, [sp, #0]
 80a133a:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a133e:	b212      	sxth	r2, r2
 80a1340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a1342:	9907      	ldr	r1, [sp, #28]
 80a1344:	4620      	mov	r0, r4
 80a1346:	47d8      	blx	fp
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
 80a1348:	9b05      	ldr	r3, [sp, #20]
 80a134a:	f108 0801 	add.w	r8, r8, #1
 80a134e:	085b      	lsrs	r3, r3, #1
 80a1350:	9305      	str	r3, [sp, #20]
 80a1352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1354:	fa4f f888 	sxtb.w	r8, r8
 80a1358:	3b01      	subs	r3, #1
 80a135a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a135e:	9309      	str	r3, [sp, #36]	; 0x24
 80a1360:	d1bf      	bne.n	80a12e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb2>
 80a1362:	9b08      	ldr	r3, [sp, #32]
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 80a1364:	f10a 0a01 	add.w	sl, sl, #1
 80a1368:	3b01      	subs	r3, #1
 80a136a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a136e:	fa4f fa8a 	sxtb.w	sl, sl
 80a1372:	9308      	str	r3, [sp, #32]
 80a1374:	d19d      	bne.n	80a12b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
                    else
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
 80a1376:	9b02      	ldr	r3, [sp, #8]
 80a1378:	454b      	cmp	r3, r9
 80a137a:	f000 80a6 	beq.w	80a14ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29a>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 80a137e:	2e01      	cmp	r6, #1
 80a1380:	6823      	ldr	r3, [r4, #0]
 80a1382:	d10c      	bne.n	80a139e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
 80a1384:	2d01      	cmp	r5, #1
 80a1386:	d10a      	bne.n	80a139e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x16e>
 80a1388:	9904      	ldr	r1, [sp, #16]
 80a138a:	f8cd 9000 	str.w	r9, [sp]
 80a138e:	3105      	adds	r1, #5
 80a1390:	6a1d      	ldr	r5, [r3, #32]
 80a1392:	463a      	mov	r2, r7
 80a1394:	2308      	movs	r3, #8
 80a1396:	b209      	sxth	r1, r1
 80a1398:	4620      	mov	r0, r4
 80a139a:	47a8      	blx	r5
 80a139c:	e095      	b.n	80a14ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29a>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 80a139e:	9a06      	ldr	r2, [sp, #24]
 80a13a0:	00ed      	lsls	r5, r5, #3
 80a13a2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80a13a6:	9a04      	ldr	r2, [sp, #16]
 80a13a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80a13ac:	440a      	add	r2, r1
 80a13ae:	4611      	mov	r1, r2
 80a13b0:	9500      	str	r5, [sp, #0]
 80a13b2:	69dd      	ldr	r5, [r3, #28]
 80a13b4:	463a      	mov	r2, r7
 80a13b6:	4633      	mov	r3, r6
 80a13b8:	b209      	sxth	r1, r1
 80a13ba:	4620      	mov	r0, r4
 80a13bc:	47a8      	blx	r5
 80a13be:	e084      	b.n	80a14ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29a>
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
#else
    // expression in __AVR__ section may generate "dereferencing type-punned pointer will break strict-aliasing rules" warning
    // In fact, on other platforms (such as STM32) there is no need to do this pointer magic as program memory may be read in a usual way
    // So expression may be simplified
    return gfxFont->glyph + c;
 80a13c0:	7a13      	ldrb	r3, [r2, #8]
 80a13c2:	6851      	ldr	r1, [r2, #4]
 80a13c4:	ebc3 0808 	rsb	r8, r3, r8
 80a13c8:	6812      	ldr	r2, [r2, #0]
 80a13ca:	fa5f f888 	uxtb.w	r8, r8
 80a13ce:	920d      	str	r2, [sp, #52]	; 0x34

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c);
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a13d0:	f831 2038 	ldrh.w	r2, [r1, r8, lsl #3]
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
#else
    // expression in __AVR__ section may generate "dereferencing type-punned pointer will break strict-aliasing rules" warning
    // In fact, on other platforms (such as STM32) there is no need to do this pointer magic as program memory may be read in a usual way
    // So expression may be simplified
    return gfxFont->glyph + c;
 80a13d4:	eb01 03c8 	add.w	r3, r1, r8, lsl #3

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c);
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a13d8:	9204      	str	r2, [sp, #16]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80a13da:	789a      	ldrb	r2, [r3, #2]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size_x > 1 || size_y > 1) {
 80a13dc:	2e01      	cmp	r6, #1
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c);
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
 80a13de:	9207      	str	r2, [sp, #28]
                 h  = pgm_read_byte(&glyph->height);
 80a13e0:	78da      	ldrb	r2, [r3, #3]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
 80a13e2:	f993 b006 	ldrsb.w	fp, [r3, #6]
        GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c);
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
 80a13e6:	920a      	str	r2, [sp, #40]	; 0x28
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80a13e8:	f993 2005 	ldrsb.w	r2, [r3, #5]
 80a13ec:	9208      	str	r2, [sp, #32]
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size_x > 1 || size_y > 1) {
 80a13ee:	d801      	bhi.n	80a13f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1c4>
 80a13f0:	2d01      	cmp	r5, #1
 80a13f2:	d906      	bls.n	80a1402 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1d2>
            xo16 = xo;
 80a13f4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80a13f8:	9306      	str	r3, [sp, #24]
            yo16 = yo;
 80a13fa:	fa0f f38b 	sxth.w	r3, fp
 80a13fe:	9305      	str	r3, [sp, #20]
 80a1400:	e002      	b.n	80a1408 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1d8>
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;
 80a1402:	2300      	movs	r3, #0
 80a1404:	9305      	str	r3, [sp, #20]
 80a1406:	9306      	str	r3, [sp, #24]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
 80a1408:	f04f 0800 	mov.w	r8, #0
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
 80a140c:	46c2      	mov	sl, r8
 80a140e:	46c1      	mov	r9, r8
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
 80a1410:	6823      	ldr	r3, [r4, #0]
 80a1412:	4620      	mov	r0, r4
 80a1414:	695b      	ldr	r3, [r3, #20]
 80a1416:	4798      	blx	r3
                }
                if(bits & 0x80) {
                    if(size_x == 1 && size_y == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a1418:	b2bb      	uxth	r3, r7
 80a141a:	9309      	str	r3, [sp, #36]	; 0x24
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size_x == 1 && size_y == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a141c:	445b      	add	r3, fp
 80a141e:	930f      	str	r3, [sp, #60]	; 0x3c
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
 80a1420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a1422:	fa5f f388 	uxtb.w	r3, r8
 80a1426:	4293      	cmp	r3, r2
 80a1428:	d24f      	bcs.n	80a14ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29a>
                }
                if(bits & 0x80) {
                    if(size_x == 1 && size_y == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a142a:	9a05      	ldr	r2, [sp, #20]
 80a142c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a142e:	4442      	add	r2, r8
 80a1430:	fb02 1205 	mla	r2, r2, r5, r1
 80a1434:	b212      	sxth	r2, r2
 80a1436:	920c      	str	r2, [sp, #48]	; 0x30
 80a1438:	4652      	mov	r2, sl
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size_x == 1 && size_y == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a143a:	990f      	ldr	r1, [sp, #60]	; 0x3c
                    } else {
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 80a143c:	2700      	movs	r7, #0
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size_x == 1 && size_y == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a143e:	440b      	add	r3, r1
 80a1440:	b21b      	sxth	r3, r3
 80a1442:	930e      	str	r3, [sp, #56]	; 0x38
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
 80a1444:	9b07      	ldr	r3, [sp, #28]
 80a1446:	429f      	cmp	r7, r3
 80a1448:	d238      	bcs.n	80a14bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x28c>
                if(!(bit++ & 7)) {
 80a144a:	1c53      	adds	r3, r2, #1
 80a144c:	b2db      	uxtb	r3, r3
 80a144e:	930b      	str	r3, [sp, #44]	; 0x2c
 80a1450:	0753      	lsls	r3, r2, #29
 80a1452:	d107      	bne.n	80a1464 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
                    bits = pgm_read_byte(&bitmap[bo++]);
 80a1454:	9b04      	ldr	r3, [sp, #16]
 80a1456:	9904      	ldr	r1, [sp, #16]
 80a1458:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a145a:	3301      	adds	r3, #1
 80a145c:	b29b      	uxth	r3, r3
 80a145e:	f812 9001 	ldrb.w	r9, [r2, r1]
 80a1462:	9304      	str	r3, [sp, #16]
                }
                if(bits & 0x80) {
 80a1464:	f019 0f80 	tst.w	r9, #128	; 0x80
 80a1468:	d020      	beq.n	80a14ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27c>
                    if(size_x == 1 && size_y == 1) {
 80a146a:	2e01      	cmp	r6, #1
 80a146c:	d10e      	bne.n	80a148c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x25c>
 80a146e:	2d01      	cmp	r5, #1
 80a1470:	d10c      	bne.n	80a148c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x25c>
                        writePixel(x+xo+xx, y+yo+yy, color);
 80a1472:	9b08      	ldr	r3, [sp, #32]
 80a1474:	9a03      	ldr	r2, [sp, #12]
 80a1476:	4620      	mov	r0, r4
 80a1478:	1899      	adds	r1, r3, r2
 80a147a:	6823      	ldr	r3, [r4, #0]
 80a147c:	4439      	add	r1, r7
 80a147e:	f8d3 b018 	ldr.w	fp, [r3, #24]
 80a1482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a1484:	9b02      	ldr	r3, [sp, #8]
 80a1486:	b209      	sxth	r1, r1
 80a1488:	47d8      	blx	fp
 80a148a:	e00f      	b.n	80a14ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x27c>
                    } else {
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
                          size_x, size_y, color);
 80a148c:	9b06      	ldr	r3, [sp, #24]
 80a148e:	9a02      	ldr	r2, [sp, #8]
 80a1490:	19d9      	adds	r1, r3, r7
 80a1492:	9b03      	ldr	r3, [sp, #12]
 80a1494:	9201      	str	r2, [sp, #4]
 80a1496:	fb01 3106 	mla	r1, r1, r6, r3
 80a149a:	6823      	ldr	r3, [r4, #0]
 80a149c:	9500      	str	r5, [sp, #0]
 80a149e:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80a14a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a14a4:	4633      	mov	r3, r6
 80a14a6:	b209      	sxth	r1, r1
 80a14a8:	4620      	mov	r0, r4
 80a14aa:	47d8      	blx	fp
                    }
                }
                bits <<= 1;
 80a14ac:	ea4f 0949 	mov.w	r9, r9, lsl #1
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
 80a14b0:	3701      	adds	r7, #1
                    } else {
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
                          size_x, size_y, color);
                    }
                }
                bits <<= 1;
 80a14b2:	fa5f f989 	uxtb.w	r9, r9
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
 80a14b6:	b2ff      	uxtb	r7, r7
                if(!(bit++ & 7)) {
 80a14b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
 80a14ba:	e7c3      	b.n	80a1444 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x214>
 80a14bc:	9b07      	ldr	r3, [sp, #28]
 80a14be:	f108 0801 	add.w	r8, r8, #1
 80a14c2:	449a      	add	sl, r3
 80a14c4:	fa5f fa8a 	uxtb.w	sl, sl
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
 80a14c8:	e7aa      	b.n	80a1420 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f0>
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
 80a14ca:	4620      	mov	r0, r4
 80a14cc:	6823      	ldr	r3, [r4, #0]
 80a14ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    } // End classic vs custom font
}
 80a14d0:	b011      	add	sp, #68	; 0x44
 80a14d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
 80a14d6:	4718      	bx	r3

    } // End classic vs custom font
}
 80a14d8:	b011      	add	sp, #68	; 0x44
 80a14da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a14de:	bf00      	nop
 80a14e0:	080a4be0 	.word	0x080a4be0

080a14e4 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
 80a14e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 80a14e6:	6a02      	ldr	r2, [r0, #32]
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
 80a14e8:	b085      	sub	sp, #20
 80a14ea:	4604      	mov	r4, r0
 80a14ec:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
 80a14ee:	2a00      	cmp	r2, #0
 80a14f0:	d12f      	bne.n	80a1552 <_ZN12Adafruit_GFX5writeEh+0x6e>

        if(c == '\n') {                        // Newline?
 80a14f2:	290a      	cmp	r1, #10
 80a14f4:	d105      	bne.n	80a1502 <_ZN12Adafruit_GFX5writeEh+0x1e>
            cursor_x  = 0;                     // Reset x to zero,
 80a14f6:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 80a14f8:	8a43      	ldrh	r3, [r0, #18]
 80a14fa:	7e42      	ldrb	r2, [r0, #25]
 80a14fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a1500:	e030      	b.n	80a1564 <_ZN12Adafruit_GFX5writeEh+0x80>
        } else if(c != '\r') {                 // Ignore carriage returns
 80a1502:	290d      	cmp	r1, #13
 80a1504:	d06a      	beq.n	80a15dc <_ZN12Adafruit_GFX5writeEh+0xf8>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80a1506:	7ec1      	ldrb	r1, [r0, #27]
 80a1508:	7e45      	ldrb	r5, [r0, #25]
 80a150a:	7e00      	ldrb	r0, [r0, #24]
 80a150c:	b169      	cbz	r1, 80a152a <_ZN12Adafruit_GFX5writeEh+0x46>
 80a150e:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 80a1512:	2106      	movs	r1, #6
 80a1514:	fb01 6100 	mla	r1, r1, r0, r6
 80a1518:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80a151c:	42b1      	cmp	r1, r6
                cursor_x  = 0;                 // Reset x to zero,
 80a151e:	bfc1      	itttt	gt
 80a1520:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 80a1522:	8a62      	ldrhgt	r2, [r4, #18]
 80a1524:	eb02 02c5 	addgt.w	r2, r2, r5, lsl #3
 80a1528:	8262      	strhgt	r2, [r4, #18]
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80a152a:	9002      	str	r0, [sp, #8]
 80a152c:	8ae0      	ldrh	r0, [r4, #22]
 80a152e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a1532:	9001      	str	r0, [sp, #4]
 80a1534:	8aa0      	ldrh	r0, [r4, #20]
 80a1536:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a153a:	9000      	str	r0, [sp, #0]
 80a153c:	9503      	str	r5, [sp, #12]
 80a153e:	4620      	mov	r0, r4
 80a1540:	f7ff fe76 	bl	80a1230 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 80a1544:	7e23      	ldrb	r3, [r4, #24]
 80a1546:	8a22      	ldrh	r2, [r4, #16]
 80a1548:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a154c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80a1550:	e043      	b.n	80a15da <_ZN12Adafruit_GFX5writeEh+0xf6>
        }

    } else { // Custom font

        if(c == '\n') {
 80a1552:	290a      	cmp	r1, #10
 80a1554:	d108      	bne.n	80a1568 <_ZN12Adafruit_GFX5writeEh+0x84>
            cursor_x  = 0;
 80a1556:	2300      	movs	r3, #0
 80a1558:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a155a:	7e41      	ldrb	r1, [r0, #25]
 80a155c:	7a92      	ldrb	r2, [r2, #10]
 80a155e:	8a43      	ldrh	r3, [r0, #18]
 80a1560:	fb01 3302 	mla	r3, r1, r2, r3
 80a1564:	8263      	strh	r3, [r4, #18]
 80a1566:	e039      	b.n	80a15dc <_ZN12Adafruit_GFX5writeEh+0xf8>
        } else if(c != '\r') {
 80a1568:	290d      	cmp	r1, #13
 80a156a:	d037      	beq.n	80a15dc <_ZN12Adafruit_GFX5writeEh+0xf8>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80a156c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80a156e:	42a9      	cmp	r1, r5
 80a1570:	d334      	bcc.n	80a15dc <_ZN12Adafruit_GFX5writeEh+0xf8>
 80a1572:	7a51      	ldrb	r1, [r2, #9]
 80a1574:	4299      	cmp	r1, r3
 80a1576:	d331      	bcc.n	80a15dc <_ZN12Adafruit_GFX5writeEh+0xf8>
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
#else
    // expression in __AVR__ section may generate "dereferencing type-punned pointer will break strict-aliasing rules" warning
    // In fact, on other platforms (such as STM32) there is no need to do this pointer magic as program memory may be read in a usual way
    // So expression may be simplified
    return gfxFont->glyph + c;
 80a1578:	6851      	ldr	r1, [r2, #4]
 80a157a:	1b5d      	subs	r5, r3, r5
 80a157c:	b2ed      	uxtb	r5, r5
 80a157e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
 80a1582:	78a9      	ldrb	r1, [r5, #2]
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80a1584:	b321      	cbz	r1, 80a15d0 <_ZN12Adafruit_GFX5writeEh+0xec>
 80a1586:	78e8      	ldrb	r0, [r5, #3]
 80a1588:	b310      	cbz	r0, 80a15d0 <_ZN12Adafruit_GFX5writeEh+0xec>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80a158a:	7ee7      	ldrb	r7, [r4, #27]
 80a158c:	7e66      	ldrb	r6, [r4, #25]
 80a158e:	7e20      	ldrb	r0, [r4, #24]
 80a1590:	b18f      	cbz	r7, 80a15b6 <_ZN12Adafruit_GFX5writeEh+0xd2>
 80a1592:	f995 7005 	ldrsb.w	r7, [r5, #5]
 80a1596:	4439      	add	r1, r7
 80a1598:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
 80a159c:	fb00 7101 	mla	r1, r0, r1, r7
 80a15a0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80a15a4:	42b9      	cmp	r1, r7
 80a15a6:	dd06      	ble.n	80a15b6 <_ZN12Adafruit_GFX5writeEh+0xd2>
                        cursor_x  = 0;
 80a15a8:	2100      	movs	r1, #0
 80a15aa:	8221      	strh	r1, [r4, #16]
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a15ac:	7a92      	ldrb	r2, [r2, #10]
 80a15ae:	8a61      	ldrh	r1, [r4, #18]
 80a15b0:	fb06 1202 	mla	r2, r6, r2, r1
 80a15b4:	8262      	strh	r2, [r4, #18]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 80a15b6:	9002      	str	r0, [sp, #8]
 80a15b8:	8ae0      	ldrh	r0, [r4, #22]
 80a15ba:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a15be:	9001      	str	r0, [sp, #4]
 80a15c0:	8aa0      	ldrh	r0, [r4, #20]
 80a15c2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a15c6:	9000      	str	r0, [sp, #0]
 80a15c8:	9603      	str	r6, [sp, #12]
 80a15ca:	4620      	mov	r0, r4
 80a15cc:	f7ff fe30 	bl	80a1230 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 80a15d0:	7929      	ldrb	r1, [r5, #4]
 80a15d2:	7e22      	ldrb	r2, [r4, #24]
 80a15d4:	8a23      	ldrh	r3, [r4, #16]
 80a15d6:	fb01 3302 	mla	r3, r1, r2, r3
 80a15da:	8223      	strh	r3, [r4, #16]
            }
        }

    }
    return 1;
}
 80a15dc:	2001      	movs	r0, #1
 80a15de:	b005      	add	sp, #20
 80a15e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a15e2 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
 80a15e2:	2900      	cmp	r1, #0
 80a15e4:	bf08      	it	eq
 80a15e6:	2101      	moveq	r1, #1
    textsize_y = (s_y > 0) ? s_y : 1;
 80a15e8:	2a00      	cmp	r2, #0
 80a15ea:	bf08      	it	eq
 80a15ec:	2201      	moveq	r2, #1
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
 80a15ee:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 80a15f0:	7642      	strb	r2, [r0, #25]
 80a15f2:	4770      	bx	lr

080a15f4 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
 80a15f4:	460a      	mov	r2, r1
 80a15f6:	f7ff bff4 	b.w	80a15e2 <_ZN12Adafruit_GFX11setTextSizeEhh>

080a15fa <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void Adafruit_GFX::setFont(const GFXfont *f) {
 80a15fa:	6a03      	ldr	r3, [r0, #32]
    if(f) {            // Font struct pointer passed in?
 80a15fc:	b119      	cbz	r1, 80a1606 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
        if(!gfxFont) { // And no current font struct?
 80a15fe:	b933      	cbnz	r3, 80a160e <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x14>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 80a1600:	8a43      	ldrh	r3, [r0, #18]
 80a1602:	3306      	adds	r3, #6
 80a1604:	e002      	b.n	80a160c <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x12>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 80a1606:	b113      	cbz	r3, 80a160e <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x14>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 80a1608:	8a43      	ldrh	r3, [r0, #18]
 80a160a:	3b06      	subs	r3, #6
 80a160c:	8243      	strh	r3, [r0, #18]
    }
    gfxFont = (GFXfont *)f;
 80a160e:	6201      	str	r1, [r0, #32]
 80a1610:	4770      	bx	lr

080a1612 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a1612:	f000 b93d 	b.w	80a1890 <HAL_Pin_Map>

080a1616 <_GLOBAL__sub_I__ZN15Adafruit_SPITFTC2Ettaaaaaa>:
 80a1616:	f000 b93b 	b.w	80a1890 <HAL_Pin_Map>
	...

080a161c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a161c:	b508      	push	{r3, lr}
 80a161e:	4b02      	ldr	r3, [pc, #8]	; (80a1628 <inet_gethostbyname+0xc>)
 80a1620:	681b      	ldr	r3, [r3, #0]
 80a1622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1624:	9301      	str	r3, [sp, #4]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	080601c0 	.word	0x080601c0

080a162c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <HAL_USB_USART_Init+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	681b      	ldr	r3, [r3, #0]
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601d8 	.word	0x080601d8

080a163c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <HAL_USB_USART_Begin+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	685b      	ldr	r3, [r3, #4]
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601d8 	.word	0x080601d8

080a164c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <HAL_USB_USART_Available_Data+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	691b      	ldr	r3, [r3, #16]
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	080601d8 	.word	0x080601d8

080a165c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	695b      	ldr	r3, [r3, #20]
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601d8 	.word	0x080601d8

080a166c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <HAL_USB_USART_Receive_Data+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	699b      	ldr	r3, [r3, #24]
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601d8 	.word	0x080601d8

080a167c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <HAL_USB_USART_Send_Data+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	69db      	ldr	r3, [r3, #28]
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601d8 	.word	0x080601d8

080a168c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <HAL_USB_USART_Flush_Data+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	6a1b      	ldr	r3, [r3, #32]
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601d8 	.word	0x080601d8

080a169c <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <HAL_I2C_Set_Speed+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601ac 	.word	0x080601ac

080a16ac <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <HAL_I2C_Begin+0xc>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a16b4:	9301      	str	r3, [sp, #4]
 80a16b6:	bd08      	pop	{r3, pc}
 80a16b8:	080601ac 	.word	0x080601ac

080a16bc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a16bc:	b508      	push	{r3, lr}
 80a16be:	4b02      	ldr	r3, [pc, #8]	; (80a16c8 <HAL_I2C_Begin_Transmission+0xc>)
 80a16c0:	681b      	ldr	r3, [r3, #0]
 80a16c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a16c4:	9301      	str	r3, [sp, #4]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	080601ac 	.word	0x080601ac

080a16cc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <HAL_I2C_End_Transmission+0xc>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a16d4:	9301      	str	r3, [sp, #4]
 80a16d6:	bd08      	pop	{r3, pc}
 80a16d8:	080601ac 	.word	0x080601ac

080a16dc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a16dc:	b508      	push	{r3, lr}
 80a16de:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <HAL_I2C_Write_Data+0xc>)
 80a16e0:	681b      	ldr	r3, [r3, #0]
 80a16e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a16e4:	9301      	str	r3, [sp, #4]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	080601ac 	.word	0x080601ac

080a16ec <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <HAL_I2C_Available_Data+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601ac 	.word	0x080601ac

080a16fc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <HAL_I2C_Read_Data+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601ac 	.word	0x080601ac

080a170c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <HAL_I2C_Peek_Data+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601ac 	.word	0x080601ac

080a171c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b02      	ldr	r3, [pc, #8]	; (80a1728 <HAL_I2C_Flush_Data+0xc>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1724:	9301      	str	r3, [sp, #4]
 80a1726:	bd08      	pop	{r3, pc}
 80a1728:	080601ac 	.word	0x080601ac

080a172c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a172c:	b508      	push	{r3, lr}
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <HAL_I2C_Is_Enabled+0xc>)
 80a1730:	681b      	ldr	r3, [r3, #0]
 80a1732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1734:	9301      	str	r3, [sp, #4]
 80a1736:	bd08      	pop	{r3, pc}
 80a1738:	080601ac 	.word	0x080601ac

080a173c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a173c:	b508      	push	{r3, lr}
 80a173e:	4b03      	ldr	r3, [pc, #12]	; (80a174c <HAL_I2C_Init+0x10>)
 80a1740:	681b      	ldr	r3, [r3, #0]
 80a1742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1746:	9301      	str	r3, [sp, #4]
 80a1748:	bd08      	pop	{r3, pc}
 80a174a:	0000      	.short	0x0000
 80a174c:	080601ac 	.word	0x080601ac

080a1750 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <HAL_USART_Init+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	699b      	ldr	r3, [r3, #24]
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601c4 	.word	0x080601c4

080a1760 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <HAL_USART_Write_Data+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601c4 	.word	0x080601c4

080a1770 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <HAL_USART_Available_Data+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	080601c4 	.word	0x080601c4

080a1780 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <HAL_USART_Read_Data+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601c4 	.word	0x080601c4

080a1790 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <HAL_USART_Peek_Data+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601c4 	.word	0x080601c4

080a17a0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <HAL_USART_Flush_Data+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601c4 	.word	0x080601c4

080a17b0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <HAL_USART_Is_Enabled+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601c4 	.word	0x080601c4

080a17c0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <HAL_USART_Available_Data_For_Write+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601c4 	.word	0x080601c4

080a17d0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <os_mutex_create+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601d0 	.word	0x080601d0

080a17e0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <os_mutex_lock+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601d0 	.word	0x080601d0

080a17f0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <os_mutex_unlock+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601d0 	.word	0x080601d0

080a1800 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <HAL_RNG_GetRandomNumber+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	685b      	ldr	r3, [r3, #4]
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	0806019c 	.word	0x0806019c

080a1810 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <HAL_Delay_Microseconds+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	68db      	ldr	r3, [r3, #12]
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	0806019c 	.word	0x0806019c

080a1820 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	695b      	ldr	r3, [r3, #20]
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	0806019c 	.word	0x0806019c

080a1830 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <HAL_SPI_Begin+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	681b      	ldr	r3, [r3, #0]
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	080601b4 	.word	0x080601b4

080a1840 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <HAL_SPI_Send_Receive_Data+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	695b      	ldr	r3, [r3, #20]
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601b4 	.word	0x080601b4

080a1850 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <HAL_SPI_Init+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	69db      	ldr	r3, [r3, #28]
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080601b4 	.word	0x080601b4

080a1860 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <HAL_SPI_Is_Enabled+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	6a1b      	ldr	r3, [r3, #32]
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601b4 	.word	0x080601b4

080a1870 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <HAL_SPI_Info+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601b4 	.word	0x080601b4

080a1880 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <HAL_SPI_Set_Settings+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601b4 	.word	0x080601b4

080a1890 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <HAL_Pin_Map+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	681b      	ldr	r3, [r3, #0]
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601b0 	.word	0x080601b0

080a18a0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <HAL_Pin_Mode+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	689b      	ldr	r3, [r3, #8]
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601b0 	.word	0x080601b0

080a18b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <HAL_Get_Pin_Mode+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	68db      	ldr	r3, [r3, #12]
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601b0 	.word	0x080601b0

080a18c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b02      	ldr	r3, [pc, #8]	; (80a18cc <HAL_GPIO_Write+0xc>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	691b      	ldr	r3, [r3, #16]
 80a18c8:	9301      	str	r3, [sp, #4]
 80a18ca:	bd08      	pop	{r3, pc}
 80a18cc:	080601b0 	.word	0x080601b0

080a18d0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a18d0:	b508      	push	{r3, lr}
 80a18d2:	4b02      	ldr	r3, [pc, #8]	; (80a18dc <HAL_GPIO_Read+0xc>)
 80a18d4:	681b      	ldr	r3, [r3, #0]
 80a18d6:	695b      	ldr	r3, [r3, #20]
 80a18d8:	9301      	str	r3, [sp, #4]
 80a18da:	bd08      	pop	{r3, pc}
 80a18dc:	080601b0 	.word	0x080601b0

080a18e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a18e0:	b508      	push	{r3, lr}
 80a18e2:	4b02      	ldr	r3, [pc, #8]	; (80a18ec <panic_+0xc>)
 80a18e4:	681b      	ldr	r3, [r3, #0]
 80a18e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a18e8:	9301      	str	r3, [sp, #4]
 80a18ea:	bd08      	pop	{r3, pc}
 80a18ec:	080201a8 	.word	0x080201a8

080a18f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a18f0:	b508      	push	{r3, lr}
 80a18f2:	4b02      	ldr	r3, [pc, #8]	; (80a18fc <spark_set_random_seed_from_cloud_handler+0xc>)
 80a18f4:	681b      	ldr	r3, [r3, #0]
 80a18f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a18f8:	9301      	str	r3, [sp, #4]
 80a18fa:	bd08      	pop	{r3, pc}
 80a18fc:	080601cc 	.word	0x080601cc

080a1900 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1900:	b508      	push	{r3, lr}
 80a1902:	4b02      	ldr	r3, [pc, #8]	; (80a190c <network_connect+0xc>)
 80a1904:	681b      	ldr	r3, [r3, #0]
 80a1906:	685b      	ldr	r3, [r3, #4]
 80a1908:	9301      	str	r3, [sp, #4]
 80a190a:	bd08      	pop	{r3, pc}
 80a190c:	080601c8 	.word	0x080601c8

080a1910 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1910:	b508      	push	{r3, lr}
 80a1912:	4b02      	ldr	r3, [pc, #8]	; (80a191c <network_connecting+0xc>)
 80a1914:	681b      	ldr	r3, [r3, #0]
 80a1916:	689b      	ldr	r3, [r3, #8]
 80a1918:	9301      	str	r3, [sp, #4]
 80a191a:	bd08      	pop	{r3, pc}
 80a191c:	080601c8 	.word	0x080601c8

080a1920 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1920:	b508      	push	{r3, lr}
 80a1922:	4b02      	ldr	r3, [pc, #8]	; (80a192c <network_disconnect+0xc>)
 80a1924:	681b      	ldr	r3, [r3, #0]
 80a1926:	68db      	ldr	r3, [r3, #12]
 80a1928:	9301      	str	r3, [sp, #4]
 80a192a:	bd08      	pop	{r3, pc}
 80a192c:	080601c8 	.word	0x080601c8

080a1930 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1930:	b508      	push	{r3, lr}
 80a1932:	4b02      	ldr	r3, [pc, #8]	; (80a193c <network_ready+0xc>)
 80a1934:	681b      	ldr	r3, [r3, #0]
 80a1936:	691b      	ldr	r3, [r3, #16]
 80a1938:	9301      	str	r3, [sp, #4]
 80a193a:	bd08      	pop	{r3, pc}
 80a193c:	080601c8 	.word	0x080601c8

080a1940 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1940:	b508      	push	{r3, lr}
 80a1942:	4b02      	ldr	r3, [pc, #8]	; (80a194c <network_on+0xc>)
 80a1944:	681b      	ldr	r3, [r3, #0]
 80a1946:	695b      	ldr	r3, [r3, #20]
 80a1948:	9301      	str	r3, [sp, #4]
 80a194a:	bd08      	pop	{r3, pc}
 80a194c:	080601c8 	.word	0x080601c8

080a1950 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1950:	b508      	push	{r3, lr}
 80a1952:	4b02      	ldr	r3, [pc, #8]	; (80a195c <network_off+0xc>)
 80a1954:	681b      	ldr	r3, [r3, #0]
 80a1956:	699b      	ldr	r3, [r3, #24]
 80a1958:	9301      	str	r3, [sp, #4]
 80a195a:	bd08      	pop	{r3, pc}
 80a195c:	080601c8 	.word	0x080601c8

080a1960 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1960:	b508      	push	{r3, lr}
 80a1962:	4b02      	ldr	r3, [pc, #8]	; (80a196c <network_listen+0xc>)
 80a1964:	681b      	ldr	r3, [r3, #0]
 80a1966:	69db      	ldr	r3, [r3, #28]
 80a1968:	9301      	str	r3, [sp, #4]
 80a196a:	bd08      	pop	{r3, pc}
 80a196c:	080601c8 	.word	0x080601c8

080a1970 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1970:	b508      	push	{r3, lr}
 80a1972:	4b02      	ldr	r3, [pc, #8]	; (80a197c <network_listening+0xc>)
 80a1974:	681b      	ldr	r3, [r3, #0]
 80a1976:	6a1b      	ldr	r3, [r3, #32]
 80a1978:	9301      	str	r3, [sp, #4]
 80a197a:	bd08      	pop	{r3, pc}
 80a197c:	080601c8 	.word	0x080601c8

080a1980 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1980:	b508      	push	{r3, lr}
 80a1982:	4b02      	ldr	r3, [pc, #8]	; (80a198c <network_set_listen_timeout+0xc>)
 80a1984:	681b      	ldr	r3, [r3, #0]
 80a1986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1988:	9301      	str	r3, [sp, #4]
 80a198a:	bd08      	pop	{r3, pc}
 80a198c:	080601c8 	.word	0x080601c8

080a1990 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1990:	b508      	push	{r3, lr}
 80a1992:	4b02      	ldr	r3, [pc, #8]	; (80a199c <network_get_listen_timeout+0xc>)
 80a1994:	681b      	ldr	r3, [r3, #0]
 80a1996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1998:	9301      	str	r3, [sp, #4]
 80a199a:	bd08      	pop	{r3, pc}
 80a199c:	080601c8 	.word	0x080601c8

080a19a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a19a0:	b508      	push	{r3, lr}
 80a19a2:	4b02      	ldr	r3, [pc, #8]	; (80a19ac <set_system_mode+0xc>)
 80a19a4:	681b      	ldr	r3, [r3, #0]
 80a19a6:	685b      	ldr	r3, [r3, #4]
 80a19a8:	9301      	str	r3, [sp, #4]
 80a19aa:	bd08      	pop	{r3, pc}
 80a19ac:	080601a4 	.word	0x080601a4

080a19b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a19b0:	b508      	push	{r3, lr}
 80a19b2:	4b02      	ldr	r3, [pc, #8]	; (80a19bc <system_delay_ms+0xc>)
 80a19b4:	681b      	ldr	r3, [r3, #0]
 80a19b6:	695b      	ldr	r3, [r3, #20]
 80a19b8:	9301      	str	r3, [sp, #4]
 80a19ba:	bd08      	pop	{r3, pc}
 80a19bc:	080601a4 	.word	0x080601a4

080a19c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a19c0:	b508      	push	{r3, lr}
 80a19c2:	4b03      	ldr	r3, [pc, #12]	; (80a19d0 <system_ctrl_set_app_request_handler+0x10>)
 80a19c4:	681b      	ldr	r3, [r3, #0]
 80a19c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a19ca:	9301      	str	r3, [sp, #4]
 80a19cc:	bd08      	pop	{r3, pc}
 80a19ce:	0000      	.short	0x0000
 80a19d0:	080601a4 	.word	0x080601a4

080a19d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a19d4:	b508      	push	{r3, lr}
 80a19d6:	4b03      	ldr	r3, [pc, #12]	; (80a19e4 <system_ctrl_set_result+0x10>)
 80a19d8:	681b      	ldr	r3, [r3, #0]
 80a19da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a19de:	9301      	str	r3, [sp, #4]
 80a19e0:	bd08      	pop	{r3, pc}
 80a19e2:	0000      	.short	0x0000
 80a19e4:	080601a4 	.word	0x080601a4

080a19e8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a19e8:	b508      	push	{r3, lr}
 80a19ea:	4b02      	ldr	r3, [pc, #8]	; (80a19f4 <malloc+0xc>)
 80a19ec:	681b      	ldr	r3, [r3, #0]
 80a19ee:	681b      	ldr	r3, [r3, #0]
 80a19f0:	9301      	str	r3, [sp, #4]
 80a19f2:	bd08      	pop	{r3, pc}
 80a19f4:	080601a0 	.word	0x080601a0

080a19f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a19f8:	b508      	push	{r3, lr}
 80a19fa:	4b02      	ldr	r3, [pc, #8]	; (80a1a04 <free+0xc>)
 80a19fc:	681b      	ldr	r3, [r3, #0]
 80a19fe:	685b      	ldr	r3, [r3, #4]
 80a1a00:	9301      	str	r3, [sp, #4]
 80a1a02:	bd08      	pop	{r3, pc}
 80a1a04:	080601a0 	.word	0x080601a0

080a1a08 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1a08:	b508      	push	{r3, lr}
 80a1a0a:	4b02      	ldr	r3, [pc, #8]	; (80a1a14 <realloc+0xc>)
 80a1a0c:	681b      	ldr	r3, [r3, #0]
 80a1a0e:	689b      	ldr	r3, [r3, #8]
 80a1a10:	9301      	str	r3, [sp, #4]
 80a1a12:	bd08      	pop	{r3, pc}
 80a1a14:	080601a0 	.word	0x080601a0

080a1a18 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a1a18:	b508      	push	{r3, lr}
 80a1a1a:	4b02      	ldr	r3, [pc, #8]	; (80a1a24 <vsnprintf+0xc>)
 80a1a1c:	681b      	ldr	r3, [r3, #0]
 80a1a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1a20:	9301      	str	r3, [sp, #4]
 80a1a22:	bd08      	pop	{r3, pc}
 80a1a24:	080601a0 	.word	0x080601a0

080a1a28 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1a28:	2300      	movs	r3, #0
 80a1a2a:	461a      	mov	r2, r3
 80a1a2c:	6840      	ldr	r0, [r0, #4]
 80a1a2e:	f7ff bf67 	b.w	80a1900 <network_connect>

080a1a32 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1a32:	2200      	movs	r2, #0
 80a1a34:	2102      	movs	r1, #2
 80a1a36:	6840      	ldr	r0, [r0, #4]
 80a1a38:	f7ff bf72 	b.w	80a1920 <network_disconnect>

080a1a3c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1a3c:	2200      	movs	r2, #0
 80a1a3e:	4611      	mov	r1, r2
 80a1a40:	6840      	ldr	r0, [r0, #4]
 80a1a42:	f7ff bf65 	b.w	80a1910 <network_connecting>

080a1a46 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1a46:	2200      	movs	r2, #0
 80a1a48:	4611      	mov	r1, r2
 80a1a4a:	6840      	ldr	r0, [r0, #4]
 80a1a4c:	f7ff bf70 	b.w	80a1930 <network_ready>

080a1a50 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1a50:	2300      	movs	r3, #0
 80a1a52:	461a      	mov	r2, r3
 80a1a54:	4619      	mov	r1, r3
 80a1a56:	6840      	ldr	r0, [r0, #4]
 80a1a58:	f7ff bf72 	b.w	80a1940 <network_on>

080a1a5c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1a5c:	2300      	movs	r3, #0
 80a1a5e:	461a      	mov	r2, r3
 80a1a60:	4619      	mov	r1, r3
 80a1a62:	6840      	ldr	r0, [r0, #4]
 80a1a64:	f7ff bf74 	b.w	80a1950 <network_off>

080a1a68 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1a68:	2200      	movs	r2, #0
 80a1a6a:	f081 0101 	eor.w	r1, r1, #1
 80a1a6e:	6840      	ldr	r0, [r0, #4]
 80a1a70:	f7ff bf76 	b.w	80a1960 <network_listen>

080a1a74 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1a74:	2200      	movs	r2, #0
 80a1a76:	6840      	ldr	r0, [r0, #4]
 80a1a78:	f7ff bf82 	b.w	80a1980 <network_set_listen_timeout>

080a1a7c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1a7c:	2200      	movs	r2, #0
 80a1a7e:	4611      	mov	r1, r2
 80a1a80:	6840      	ldr	r0, [r0, #4]
 80a1a82:	f7ff bf85 	b.w	80a1990 <network_get_listen_timeout>

080a1a86 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1a86:	2200      	movs	r2, #0
 80a1a88:	4611      	mov	r1, r2
 80a1a8a:	6840      	ldr	r0, [r0, #4]
 80a1a8c:	f7ff bf70 	b.w	80a1970 <network_listening>

080a1a90 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1a90:	b570      	push	{r4, r5, r6, lr}
 80a1a92:	4616      	mov	r6, r2
 80a1a94:	b08e      	sub	sp, #56	; 0x38
 80a1a96:	4604      	mov	r4, r0
    IPAddress addr;
 80a1a98:	a808      	add	r0, sp, #32
 80a1a9a:	f000 fa8d 	bl	80a1fb8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1a9e:	2211      	movs	r2, #17
 80a1aa0:	2100      	movs	r1, #0
 80a1aa2:	a803      	add	r0, sp, #12
 80a1aa4:	f002 f9eb 	bl	80a3e7e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1aa8:	4630      	mov	r0, r6
 80a1aaa:	f002 fa19 	bl	80a3ee0 <strlen>
 80a1aae:	2500      	movs	r5, #0
 80a1ab0:	4b0a      	ldr	r3, [pc, #40]	; (80a1adc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1ab2:	9500      	str	r5, [sp, #0]
 80a1ab4:	b281      	uxth	r1, r0
 80a1ab6:	685b      	ldr	r3, [r3, #4]
 80a1ab8:	aa03      	add	r2, sp, #12
 80a1aba:	4630      	mov	r0, r6
 80a1abc:	f7ff fdae 	bl	80a161c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1ac0:	b120      	cbz	r0, 80a1acc <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1ac2:	4629      	mov	r1, r5
 80a1ac4:	4620      	mov	r0, r4
 80a1ac6:	f000 fa97 	bl	80a1ff8 <_ZN9IPAddressC1Em>
 80a1aca:	e003      	b.n	80a1ad4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1acc:	a903      	add	r1, sp, #12
 80a1ace:	4620      	mov	r0, r4
 80a1ad0:	f000 fa80 	bl	80a1fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1ad4:	4620      	mov	r0, r4
 80a1ad6:	b00e      	add	sp, #56	; 0x38
 80a1ad8:	bd70      	pop	{r4, r5, r6, pc}
 80a1ada:	bf00      	nop
 80a1adc:	200000dc 	.word	0x200000dc

080a1ae0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1ae0:	4b02      	ldr	r3, [pc, #8]	; (80a1aec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1ae2:	4a03      	ldr	r2, [pc, #12]	; (80a1af0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1ae4:	601a      	str	r2, [r3, #0]
 80a1ae6:	2200      	movs	r2, #0
 80a1ae8:	605a      	str	r2, [r3, #4]
 80a1aea:	4770      	bx	lr
 80a1aec:	200000d4 	.word	0x200000d4
 80a1af0:	080a50e8 	.word	0x080a50e8

080a1af4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1af4:	2200      	movs	r2, #0
 80a1af6:	4611      	mov	r1, r2
 80a1af8:	6840      	ldr	r0, [r0, #4]
 80a1afa:	f7ff bf19 	b.w	80a1930 <network_ready>

080a1afe <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1b00:	4616      	mov	r6, r2
 80a1b02:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1b04:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1b06:	460f      	mov	r7, r1
 80a1b08:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1b0a:	2100      	movs	r1, #0
 80a1b0c:	a803      	add	r0, sp, #12
 80a1b0e:	f002 f9b6 	bl	80a3e7e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1b12:	4630      	mov	r0, r6
 80a1b14:	f002 f9e4 	bl	80a3ee0 <strlen>
 80a1b18:	2500      	movs	r5, #0
 80a1b1a:	9500      	str	r5, [sp, #0]
 80a1b1c:	b281      	uxth	r1, r0
 80a1b1e:	687b      	ldr	r3, [r7, #4]
 80a1b20:	aa03      	add	r2, sp, #12
 80a1b22:	4630      	mov	r0, r6
 80a1b24:	f7ff fd7a 	bl	80a161c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1b28:	b120      	cbz	r0, 80a1b34 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1b2a:	4629      	mov	r1, r5
 80a1b2c:	4620      	mov	r0, r4
 80a1b2e:	f000 fa63 	bl	80a1ff8 <_ZN9IPAddressC1Em>
 80a1b32:	e003      	b.n	80a1b3c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1b34:	a903      	add	r1, sp, #12
 80a1b36:	4620      	mov	r0, r4
 80a1b38:	f000 fa4c 	bl	80a1fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1b3c:	4620      	mov	r0, r4
 80a1b3e:	b009      	add	sp, #36	; 0x24
 80a1b40:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b42 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1b42:	2200      	movs	r2, #0
 80a1b44:	4611      	mov	r1, r2
 80a1b46:	6840      	ldr	r0, [r0, #4]
 80a1b48:	f7ff bf12 	b.w	80a1970 <network_listening>

080a1b4c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1b4c:	2200      	movs	r2, #0
 80a1b4e:	4611      	mov	r1, r2
 80a1b50:	6840      	ldr	r0, [r0, #4]
 80a1b52:	f7ff bf1d 	b.w	80a1990 <network_get_listen_timeout>

080a1b56 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1b56:	2200      	movs	r2, #0
 80a1b58:	6840      	ldr	r0, [r0, #4]
 80a1b5a:	f7ff bf11 	b.w	80a1980 <network_set_listen_timeout>

080a1b5e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1b5e:	2200      	movs	r2, #0
 80a1b60:	f081 0101 	eor.w	r1, r1, #1
 80a1b64:	6840      	ldr	r0, [r0, #4]
 80a1b66:	f7ff befb 	b.w	80a1960 <network_listen>

080a1b6a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1b6a:	2300      	movs	r3, #0
 80a1b6c:	461a      	mov	r2, r3
 80a1b6e:	4619      	mov	r1, r3
 80a1b70:	6840      	ldr	r0, [r0, #4]
 80a1b72:	f7ff beed 	b.w	80a1950 <network_off>

080a1b76 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1b76:	2300      	movs	r3, #0
 80a1b78:	461a      	mov	r2, r3
 80a1b7a:	4619      	mov	r1, r3
 80a1b7c:	6840      	ldr	r0, [r0, #4]
 80a1b7e:	f7ff bedf 	b.w	80a1940 <network_on>

080a1b82 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1b82:	2200      	movs	r2, #0
 80a1b84:	4611      	mov	r1, r2
 80a1b86:	6840      	ldr	r0, [r0, #4]
 80a1b88:	f7ff bec2 	b.w	80a1910 <network_connecting>

080a1b8c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1b8c:	2200      	movs	r2, #0
 80a1b8e:	2102      	movs	r1, #2
 80a1b90:	6840      	ldr	r0, [r0, #4]
 80a1b92:	f7ff bec5 	b.w	80a1920 <network_disconnect>

080a1b96 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1b96:	2300      	movs	r3, #0
 80a1b98:	461a      	mov	r2, r3
 80a1b9a:	6840      	ldr	r0, [r0, #4]
 80a1b9c:	f7ff beb0 	b.w	80a1900 <network_connect>

080a1ba0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1ba0:	4b02      	ldr	r3, [pc, #8]	; (80a1bac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1ba2:	2204      	movs	r2, #4
 80a1ba4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1ba6:	4a02      	ldr	r2, [pc, #8]	; (80a1bb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1ba8:	601a      	str	r2, [r3, #0]
 80a1baa:	4770      	bx	lr
 80a1bac:	200000dc 	.word	0x200000dc
 80a1bb0:	080a511c 	.word	0x080a511c

080a1bb4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1bb4:	4770      	bx	lr

080a1bb6 <_ZN8SPIClassD0Ev>:
 80a1bb6:	b510      	push	{r4, lr}
 80a1bb8:	4604      	mov	r4, r0
 80a1bba:	2110      	movs	r1, #16
 80a1bbc:	f000 ff14 	bl	80a29e8 <_ZdlPvj>
 80a1bc0:	4620      	mov	r0, r4
 80a1bc2:	bd10      	pop	{r4, pc}

080a1bc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1bc4:	b570      	push	{r4, r5, r6, lr}
 80a1bc6:	4604      	mov	r4, r0
 80a1bc8:	460e      	mov	r6, r1
 80a1bca:	4b07      	ldr	r3, [pc, #28]	; (80a1be8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1bcc:	2500      	movs	r5, #0
 80a1bce:	6003      	str	r3, [r0, #0]
 80a1bd0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1bd4:	f7ff fdfc 	bl	80a17d0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1bd8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1bda:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1bdc:	f7ff fe38 	bl	80a1850 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1be0:	60a5      	str	r5, [r4, #8]
}
 80a1be2:	4620      	mov	r0, r4
 80a1be4:	bd70      	pop	{r4, r5, r6, pc}
 80a1be6:	bf00      	nop
 80a1be8:	080a5150 	.word	0x080a5150

080a1bec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a1bec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1bf0:	7900      	ldrb	r0, [r0, #4]
 80a1bf2:	f7ff be1d 	b.w	80a1830 <HAL_SPI_Begin>

080a1bf6 <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 80a1bf6:	68c0      	ldr	r0, [r0, #12]
 80a1bf8:	f7ff bdfa 	b.w	80a17f0 <os_mutex_unlock>

080a1bfc <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1bfc:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a1bfe:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1c00:	6018      	str	r0, [r3, #0]
 80a1c02:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a1c04:	6818      	ldr	r0, [r3, #0]
 80a1c06:	b2e5      	uxtb	r5, r4
 80a1c08:	4288      	cmp	r0, r1
 80a1c0a:	d906      	bls.n	80a1c1a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1c0c:	3401      	adds	r4, #1
 80a1c0e:	2c08      	cmp	r4, #8
 80a1c10:	d002      	beq.n	80a1c18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a1c12:	0840      	lsrs	r0, r0, #1
 80a1c14:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a1c16:	e7f5      	b.n	80a1c04 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1c18:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a1c1a:	4b02      	ldr	r3, [pc, #8]	; (80a1c24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1c1c:	5d5b      	ldrb	r3, [r3, r5]
 80a1c1e:	7013      	strb	r3, [r2, #0]
 80a1c20:	bd30      	pop	{r4, r5, pc}
 80a1c22:	bf00      	nop
 80a1c24:	080a5158 	.word	0x080a5158

080a1c28 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 80a1c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1c2c:	4680      	mov	r8, r0
 80a1c2e:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
 80a1c30:	68c0      	ldr	r0, [r0, #12]
 80a1c32:	460f      	mov	r7, r1
 80a1c34:	f7ff fdd4 	bl	80a17e0 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
 80a1c38:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a1c3c:	2214      	movs	r2, #20
 80a1c3e:	2100      	movs	r1, #0
 80a1c40:	a809      	add	r0, sp, #36	; 0x24
 80a1c42:	f002 f91c 	bl	80a3e7e <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1c46:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a1c48:	4620      	mov	r0, r4
 80a1c4a:	2200      	movs	r2, #0
 80a1c4c:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1c4e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
 80a1c52:	f7ff fe0d 	bl	80a1870 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
 80a1c56:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 80a1c5a:	b14c      	cbz	r4, 80a1c70 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 80a1c5c:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a1c60:	b92d      	cbnz	r5, 80a1c6e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 80a1c62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a1c64:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a1c68:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 80a1c6c:	e003      	b.n	80a1c76 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a1c6e:	2400      	movs	r4, #0
 80a1c70:	46a1      	mov	r9, r4
 80a1c72:	4626      	mov	r6, r4
 80a1c74:	2501      	movs	r5, #1
 80a1c76:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1c78:	b10d      	cbz	r5, 80a1c7e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 80a1c7a:	2b00      	cmp	r3, #0
 80a1c7c:	d140      	bne.n	80a1d00 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
 80a1c7e:	429d      	cmp	r5, r3
 80a1c80:	d10b      	bne.n	80a1c9a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 80a1c82:	68ba      	ldr	r2, [r7, #8]
 80a1c84:	42b2      	cmp	r2, r6
 80a1c86:	d108      	bne.n	80a1c9a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a1c88:	f88d 9020 	strb.w	r9, [sp, #32]
 80a1c8c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a1c90:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a1c94:	89ba      	ldrh	r2, [r7, #12]
 80a1c96:	4291      	cmp	r1, r2
 80a1c98:	d032      	beq.n	80a1d00 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
 80a1c9a:	bb23      	cbnz	r3, 80a1ce6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
 80a1c9c:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
 80a1ca0:	f10d 020f 	add.w	r2, sp, #15
 80a1ca4:	ab04      	add	r3, sp, #16
 80a1ca6:	68b9      	ldr	r1, [r7, #8]
 80a1ca8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a1caa:	f7ff ffa7 	bl	80a1bfc <_ZN8SPIClass19computeClockDividerEjjRhRj>
 80a1cae:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a1cb0:	b105      	cbz	r5, 80a1cb4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
 80a1cb2:	bb13      	cbnz	r3, 80a1cfa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
 80a1cb4:	42ab      	cmp	r3, r5
 80a1cb6:	d009      	beq.n	80a1ccc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
 80a1cb8:	2100      	movs	r1, #0
 80a1cba:	7b3b      	ldrb	r3, [r7, #12]
 80a1cbc:	9101      	str	r1, [sp, #4]
 80a1cbe:	7b7c      	ldrb	r4, [r7, #13]
 80a1cc0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a1cc4:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a1cc8:	9400      	str	r4, [sp, #0]
 80a1cca:	e013      	b.n	80a1cf4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
 80a1ccc:	68bb      	ldr	r3, [r7, #8]
 80a1cce:	42b3      	cmp	r3, r6
 80a1cd0:	d3f2      	bcc.n	80a1cb8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a1cd2:	f88d 9020 	strb.w	r9, [sp, #32]
 80a1cd6:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a1cda:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a1cde:	89bb      	ldrh	r3, [r7, #12]
 80a1ce0:	429a      	cmp	r2, r3
 80a1ce2:	d1e9      	bne.n	80a1cb8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
 80a1ce4:	e009      	b.n	80a1cfa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
 80a1ce6:	2300      	movs	r3, #0
 80a1ce8:	461a      	mov	r2, r3
 80a1cea:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a1cee:	9301      	str	r3, [sp, #4]
 80a1cf0:	9300      	str	r3, [sp, #0]
 80a1cf2:	2101      	movs	r1, #1
 80a1cf4:	f7ff fdc4 	bl	80a1880 <HAL_SPI_Set_Settings>
 80a1cf8:	e002      	b.n	80a1d00 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
 80a1cfa:	9b04      	ldr	r3, [sp, #16]
 80a1cfc:	42b3      	cmp	r3, r6
 80a1cfe:	d1db      	bne.n	80a1cb8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
 80a1d00:	2000      	movs	r0, #0
 80a1d02:	b00f      	add	sp, #60	; 0x3c
 80a1d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a1d08 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1d08:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a1d0a:	7900      	ldrb	r0, [r0, #4]
 80a1d0c:	f7ff fd98 	bl	80a1840 <HAL_SPI_Send_Receive_Data>
}
 80a1d10:	b2c0      	uxtb	r0, r0
 80a1d12:	bd08      	pop	{r3, pc}

080a1d14 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1d14:	7900      	ldrb	r0, [r0, #4]
 80a1d16:	f7ff bda3 	b.w	80a1860 <HAL_SPI_Is_Enabled>

080a1d1a <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1d1a:	4770      	bx	lr

080a1d1c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d1e:	4606      	mov	r6, r0
 80a1d20:	4615      	mov	r5, r2
 80a1d22:	460c      	mov	r4, r1
 80a1d24:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1d26:	42bc      	cmp	r4, r7
 80a1d28:	d006      	beq.n	80a1d38 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1d2a:	6833      	ldr	r3, [r6, #0]
 80a1d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1d30:	689b      	ldr	r3, [r3, #8]
 80a1d32:	4630      	mov	r0, r6
 80a1d34:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1d36:	e7f6      	b.n	80a1d26 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1d38:	4628      	mov	r0, r5
 80a1d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1d3c <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1d3c:	2200      	movs	r2, #0
 80a1d3e:	7c00      	ldrb	r0, [r0, #16]
 80a1d40:	f7ff bccc 	b.w	80a16dc <HAL_I2C_Write_Data>

080a1d44 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1d44:	2100      	movs	r1, #0
 80a1d46:	7c00      	ldrb	r0, [r0, #16]
 80a1d48:	f7ff bcd0 	b.w	80a16ec <HAL_I2C_Available_Data>

080a1d4c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1d4c:	2100      	movs	r1, #0
 80a1d4e:	7c00      	ldrb	r0, [r0, #16]
 80a1d50:	f7ff bcd4 	b.w	80a16fc <HAL_I2C_Read_Data>

080a1d54 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1d54:	2100      	movs	r1, #0
 80a1d56:	7c00      	ldrb	r0, [r0, #16]
 80a1d58:	f7ff bcd8 	b.w	80a170c <HAL_I2C_Peek_Data>

080a1d5c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1d5c:	2100      	movs	r1, #0
 80a1d5e:	7c00      	ldrb	r0, [r0, #16]
 80a1d60:	f7ff bcdc 	b.w	80a171c <HAL_I2C_Flush_Data>

080a1d64 <_ZN7TwoWireD0Ev>:
 80a1d64:	b510      	push	{r4, lr}
 80a1d66:	4604      	mov	r4, r0
 80a1d68:	2114      	movs	r1, #20
 80a1d6a:	f000 fe3d 	bl	80a29e8 <_ZdlPvj>
 80a1d6e:	4620      	mov	r0, r4
 80a1d70:	bd10      	pop	{r4, pc}
	...

080a1d74 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1d74:	b510      	push	{r4, lr}
 80a1d76:	4604      	mov	r4, r0
 80a1d78:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1d7e:	60a3      	str	r3, [r4, #8]
 80a1d80:	4b04      	ldr	r3, [pc, #16]	; (80a1d94 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1d82:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1d84:	7420      	strb	r0, [r4, #16]
 80a1d86:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1d88:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1d8a:	f7ff fcd7 	bl	80a173c <HAL_I2C_Init>

}
 80a1d8e:	4620      	mov	r0, r4
 80a1d90:	bd10      	pop	{r4, pc}
 80a1d92:	bf00      	nop
 80a1d94:	080a5168 	.word	0x080a5168

080a1d98 <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a1d98:	2200      	movs	r2, #0
 80a1d9a:	7c00      	ldrb	r0, [r0, #16]
 80a1d9c:	f7ff bc7e 	b.w	80a169c <HAL_I2C_Set_Speed>

080a1da0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a1da0:	2300      	movs	r3, #0
 80a1da2:	461a      	mov	r2, r3
 80a1da4:	4619      	mov	r1, r3
 80a1da6:	7c00      	ldrb	r0, [r0, #16]
 80a1da8:	f7ff bc80 	b.w	80a16ac <HAL_I2C_Begin>

080a1dac <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a1dac:	2200      	movs	r2, #0
 80a1dae:	7c00      	ldrb	r0, [r0, #16]
 80a1db0:	f7ff bc84 	b.w	80a16bc <HAL_I2C_Begin_Transmission>

080a1db4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a1db4:	b2c9      	uxtb	r1, r1
 80a1db6:	f7ff bff9 	b.w	80a1dac <_ZN7TwoWire17beginTransmissionEh>

080a1dba <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a1dba:	2200      	movs	r2, #0
 80a1dbc:	7c00      	ldrb	r0, [r0, #16]
 80a1dbe:	f7ff bc85 	b.w	80a16cc <HAL_I2C_End_Transmission>

080a1dc2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a1dc2:	2101      	movs	r1, #1
 80a1dc4:	f7ff bff9 	b.w	80a1dba <_ZN7TwoWire15endTransmissionEh>

080a1dc8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1dc8:	2100      	movs	r1, #0
 80a1dca:	7c00      	ldrb	r0, [r0, #16]
 80a1dcc:	f7ff bcae 	b.w	80a172c <HAL_I2C_Is_Enabled>

080a1dd0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1dd0:	7441      	strb	r1, [r0, #17]
 80a1dd2:	4770      	bx	lr

080a1dd4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1dd4:	4770      	bx	lr

080a1dd6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1dd6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1dd8:	2100      	movs	r1, #0
 80a1dda:	7c00      	ldrb	r0, [r0, #16]
 80a1ddc:	f7ff fc46 	bl	80a166c <HAL_USB_USART_Receive_Data>
}
 80a1de0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1de4:	bf28      	it	cs
 80a1de6:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1dea:	bd08      	pop	{r3, pc}

080a1dec <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1dec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1dee:	2101      	movs	r1, #1
 80a1df0:	7c00      	ldrb	r0, [r0, #16]
 80a1df2:	f7ff fc3b 	bl	80a166c <HAL_USB_USART_Receive_Data>
}
 80a1df6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1dfa:	bf28      	it	cs
 80a1dfc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1e00:	bd08      	pop	{r3, pc}

080a1e02 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1e02:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1e04:	7c00      	ldrb	r0, [r0, #16]
 80a1e06:	f7ff fc29 	bl	80a165c <HAL_USB_USART_Available_Data_For_Write>
}
 80a1e0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e0e:	bd08      	pop	{r3, pc}

080a1e10 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1e10:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1e12:	7c00      	ldrb	r0, [r0, #16]
 80a1e14:	f7ff fc1a 	bl	80a164c <HAL_USB_USART_Available_Data>
}
 80a1e18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1e1c:	bd08      	pop	{r3, pc}

080a1e1e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1e1e:	7c00      	ldrb	r0, [r0, #16]
 80a1e20:	f7ff bc34 	b.w	80a168c <HAL_USB_USART_Flush_Data>

080a1e24 <_ZN9USBSerialD0Ev>:
 80a1e24:	b510      	push	{r4, lr}
 80a1e26:	4604      	mov	r4, r0
 80a1e28:	2114      	movs	r1, #20
 80a1e2a:	f000 fddd 	bl	80a29e8 <_ZdlPvj>
 80a1e2e:	4620      	mov	r0, r4
 80a1e30:	bd10      	pop	{r4, pc}

080a1e32 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1e32:	b538      	push	{r3, r4, r5, lr}
 80a1e34:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1e36:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1e38:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1e3a:	f7ff fc0f 	bl	80a165c <HAL_USB_USART_Available_Data_For_Write>
 80a1e3e:	2800      	cmp	r0, #0
 80a1e40:	dc01      	bgt.n	80a1e46 <_ZN9USBSerial5writeEh+0x14>
 80a1e42:	7c60      	ldrb	r0, [r4, #17]
 80a1e44:	b128      	cbz	r0, 80a1e52 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1e46:	4629      	mov	r1, r5
 80a1e48:	7c20      	ldrb	r0, [r4, #16]
 80a1e4a:	f7ff fc17 	bl	80a167c <HAL_USB_USART_Send_Data>
 80a1e4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1e52:	bd38      	pop	{r3, r4, r5, pc}

080a1e54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1e54:	b510      	push	{r4, lr}
 80a1e56:	4604      	mov	r4, r0
 80a1e58:	2300      	movs	r3, #0
 80a1e5a:	6063      	str	r3, [r4, #4]
 80a1e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e60:	60a3      	str	r3, [r4, #8]
 80a1e62:	4b05      	ldr	r3, [pc, #20]	; (80a1e78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1e64:	4608      	mov	r0, r1
 80a1e66:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1e68:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1e6a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1e6c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1e6e:	4611      	mov	r1, r2
 80a1e70:	f7ff fbdc 	bl	80a162c <HAL_USB_USART_Init>
}
 80a1e74:	4620      	mov	r0, r4
 80a1e76:	bd10      	pop	{r4, pc}
 80a1e78:	080a5190 	.word	0x080a5190

080a1e7c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1e7c:	2200      	movs	r2, #0
 80a1e7e:	7c00      	ldrb	r0, [r0, #16]
 80a1e80:	f7ff bbdc 	b.w	80a163c <HAL_USB_USART_Begin>

080a1e84 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1e84:	b510      	push	{r4, lr}
 80a1e86:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1e88:	2214      	movs	r2, #20
 80a1e8a:	2100      	movs	r1, #0
 80a1e8c:	f001 fff7 	bl	80a3e7e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1e90:	4b05      	ldr	r3, [pc, #20]	; (80a1ea8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1e92:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1e94:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1e96:	4b05      	ldr	r3, [pc, #20]	; (80a1eac <_Z19acquireSerialBufferv+0x28>)
 80a1e98:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1e9a:	f240 1301 	movw	r3, #257	; 0x101
 80a1e9e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1ea0:	2381      	movs	r3, #129	; 0x81
 80a1ea2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1ea4:	bd10      	pop	{r4, pc}
 80a1ea6:	bf00      	nop
 80a1ea8:	20000169 	.word	0x20000169
 80a1eac:	200000e8 	.word	0x200000e8

080a1eb0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1eb0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1eb2:	4d0e      	ldr	r5, [pc, #56]	; (80a1eec <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1eb4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1eb6:	a801      	add	r0, sp, #4
 80a1eb8:	f7ff ffe4 	bl	80a1e84 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1ebc:	6829      	ldr	r1, [r5, #0]
 80a1ebe:	f011 0401 	ands.w	r4, r1, #1
 80a1ec2:	d110      	bne.n	80a1ee6 <_Z16_fetch_usbserialv+0x36>
 80a1ec4:	4628      	mov	r0, r5
 80a1ec6:	f7fe f8f5 	bl	80a00b4 <__cxa_guard_acquire>
 80a1eca:	b160      	cbz	r0, 80a1ee6 <_Z16_fetch_usbserialv+0x36>
 80a1ecc:	aa01      	add	r2, sp, #4
 80a1ece:	4621      	mov	r1, r4
 80a1ed0:	4807      	ldr	r0, [pc, #28]	; (80a1ef0 <_Z16_fetch_usbserialv+0x40>)
 80a1ed2:	f7ff ffbf 	bl	80a1e54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1ed6:	4628      	mov	r0, r5
 80a1ed8:	f7fe f8f1 	bl	80a00be <__cxa_guard_release>
 80a1edc:	4a05      	ldr	r2, [pc, #20]	; (80a1ef4 <_Z16_fetch_usbserialv+0x44>)
 80a1ede:	4906      	ldr	r1, [pc, #24]	; (80a1ef8 <_Z16_fetch_usbserialv+0x48>)
 80a1ee0:	4803      	ldr	r0, [pc, #12]	; (80a1ef0 <_Z16_fetch_usbserialv+0x40>)
 80a1ee2:	f000 fd7c 	bl	80a29de <__aeabi_atexit>
	return _usbserial;
}
 80a1ee6:	4802      	ldr	r0, [pc, #8]	; (80a1ef0 <_Z16_fetch_usbserialv+0x40>)
 80a1ee8:	b007      	add	sp, #28
 80a1eea:	bd30      	pop	{r4, r5, pc}
 80a1eec:	200000e4 	.word	0x200000e4
 80a1ef0:	2000026c 	.word	0x2000026c
 80a1ef4:	20000070 	.word	0x20000070
 80a1ef8:	080a1dd5 	.word	0x080a1dd5

080a1efc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1efc:	b510      	push	{r4, lr}
 80a1efe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1f00:	2214      	movs	r2, #20
 80a1f02:	2100      	movs	r1, #0
 80a1f04:	f001 ffbb 	bl	80a3e7e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1f08:	4b05      	ldr	r3, [pc, #20]	; (80a1f20 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1f0a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1f0c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1f0e:	4b05      	ldr	r3, [pc, #20]	; (80a1f24 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1f10:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1f12:	f240 1301 	movw	r3, #257	; 0x101
 80a1f16:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1f18:	2381      	movs	r3, #129	; 0x81
 80a1f1a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1f1c:	bd10      	pop	{r4, pc}
 80a1f1e:	bf00      	nop
 80a1f20:	2000031c 	.word	0x2000031c
 80a1f24:	20000284 	.word	0x20000284

080a1f28 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1f28:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1f2a:	4c0e      	ldr	r4, [pc, #56]	; (80a1f64 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1f2c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1f2e:	a801      	add	r0, sp, #4
 80a1f30:	f7ff ffe4 	bl	80a1efc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1f34:	6823      	ldr	r3, [r4, #0]
 80a1f36:	07db      	lsls	r3, r3, #31
 80a1f38:	d410      	bmi.n	80a1f5c <_Z17_fetch_usbserial1v+0x34>
 80a1f3a:	4620      	mov	r0, r4
 80a1f3c:	f7fe f8ba 	bl	80a00b4 <__cxa_guard_acquire>
 80a1f40:	b160      	cbz	r0, 80a1f5c <_Z17_fetch_usbserial1v+0x34>
 80a1f42:	aa01      	add	r2, sp, #4
 80a1f44:	2101      	movs	r1, #1
 80a1f46:	4808      	ldr	r0, [pc, #32]	; (80a1f68 <_Z17_fetch_usbserial1v+0x40>)
 80a1f48:	f7ff ff84 	bl	80a1e54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1f4c:	4620      	mov	r0, r4
 80a1f4e:	f7fe f8b6 	bl	80a00be <__cxa_guard_release>
 80a1f52:	4a06      	ldr	r2, [pc, #24]	; (80a1f6c <_Z17_fetch_usbserial1v+0x44>)
 80a1f54:	4906      	ldr	r1, [pc, #24]	; (80a1f70 <_Z17_fetch_usbserial1v+0x48>)
 80a1f56:	4804      	ldr	r0, [pc, #16]	; (80a1f68 <_Z17_fetch_usbserial1v+0x40>)
 80a1f58:	f000 fd41 	bl	80a29de <__aeabi_atexit>
  return _usbserial1;
}
 80a1f5c:	4802      	ldr	r0, [pc, #8]	; (80a1f68 <_Z17_fetch_usbserial1v+0x40>)
 80a1f5e:	b006      	add	sp, #24
 80a1f60:	bd10      	pop	{r4, pc}
 80a1f62:	bf00      	nop
 80a1f64:	20000280 	.word	0x20000280
 80a1f68:	20000308 	.word	0x20000308
 80a1f6c:	20000070 	.word	0x20000070
 80a1f70:	080a1dd5 	.word	0x080a1dd5

080a1f74 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1f74:	4770      	bx	lr

080a1f76 <_ZN9IPAddressD0Ev>:
 80a1f76:	b510      	push	{r4, lr}
 80a1f78:	4604      	mov	r4, r0
 80a1f7a:	2118      	movs	r1, #24
 80a1f7c:	f000 fd34 	bl	80a29e8 <_ZdlPvj>
 80a1f80:	4620      	mov	r0, r4
 80a1f82:	bd10      	pop	{r4, pc}

080a1f84 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f86:	460f      	mov	r7, r1
 80a1f88:	f100 0608 	add.w	r6, r0, #8
 80a1f8c:	1d05      	adds	r5, r0, #4
 80a1f8e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1f90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1f94:	220a      	movs	r2, #10
 80a1f96:	4638      	mov	r0, r7
 80a1f98:	f000 f98d 	bl	80a22b6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1f9c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1f9e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1fa0:	d007      	beq.n	80a1fb2 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1fa2:	2c00      	cmp	r4, #0
 80a1fa4:	d0f4      	beq.n	80a1f90 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1fa6:	212e      	movs	r1, #46	; 0x2e
 80a1fa8:	4638      	mov	r0, r7
 80a1faa:	f000 f93f 	bl	80a222c <_ZN5Print5printEc>
 80a1fae:	4404      	add	r4, r0
 80a1fb0:	e7ee      	b.n	80a1f90 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1fb2:	4620      	mov	r0, r4
 80a1fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1fb8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1fb8:	b510      	push	{r4, lr}
 80a1fba:	4604      	mov	r4, r0
 80a1fbc:	4b04      	ldr	r3, [pc, #16]	; (80a1fd0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1fbe:	2211      	movs	r2, #17
 80a1fc0:	f840 3b04 	str.w	r3, [r0], #4
 80a1fc4:	2100      	movs	r1, #0
 80a1fc6:	f001 ff5a 	bl	80a3e7e <memset>
{
    clear();
}
 80a1fca:	4620      	mov	r0, r4
 80a1fcc:	bd10      	pop	{r4, pc}
 80a1fce:	bf00      	nop
 80a1fd0:	080a51c0 	.word	0x080a51c0

080a1fd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1fd4:	4603      	mov	r3, r0
 80a1fd6:	4a07      	ldr	r2, [pc, #28]	; (80a1ff4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1fd8:	b510      	push	{r4, lr}
 80a1fda:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1fde:	f101 0210 	add.w	r2, r1, #16
 80a1fe2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1fe6:	4291      	cmp	r1, r2
 80a1fe8:	f843 4b04 	str.w	r4, [r3], #4
 80a1fec:	d1f9      	bne.n	80a1fe2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1fee:	780a      	ldrb	r2, [r1, #0]
 80a1ff0:	701a      	strb	r2, [r3, #0]
}
 80a1ff2:	bd10      	pop	{r4, pc}
 80a1ff4:	080a51c0 	.word	0x080a51c0

080a1ff8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1ff8:	4a02      	ldr	r2, [pc, #8]	; (80a2004 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1ffa:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1ffc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1ffe:	2204      	movs	r2, #4
 80a2000:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2002:	4770      	bx	lr
 80a2004:	080a51c0 	.word	0x080a51c0

080a2008 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2008:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a200a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a200e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2012:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2016:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a201a:	2304      	movs	r3, #4
 80a201c:	6041      	str	r1, [r0, #4]
 80a201e:	7503      	strb	r3, [r0, #20]
 80a2020:	bd10      	pop	{r4, pc}
	...

080a2024 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2026:	4d04      	ldr	r5, [pc, #16]	; (80a2038 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2028:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a202a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a202e:	9500      	str	r5, [sp, #0]
 80a2030:	f7ff ffea 	bl	80a2008 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2034:	b003      	add	sp, #12
 80a2036:	bd30      	pop	{r4, r5, pc}
 80a2038:	080a51c0 	.word	0x080a51c0

080a203c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a203c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a203e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2040:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2042:	b113      	cbz	r3, 80a204a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2044:	2203      	movs	r2, #3
 80a2046:	4601      	mov	r1, r0
 80a2048:	4798      	blx	r3
    }
 80a204a:	4620      	mov	r0, r4
 80a204c:	bd10      	pop	{r4, pc}

080a204e <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a204e:	2100      	movs	r1, #0
 80a2050:	f7ff bcae 	b.w	80a19b0 <system_delay_ms>

080a2054 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2054:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2056:	4b14      	ldr	r3, [pc, #80]	; (80a20a8 <serialEventRun+0x54>)
 80a2058:	b133      	cbz	r3, 80a2068 <serialEventRun+0x14>
 80a205a:	f7ff ff29 	bl	80a1eb0 <_Z16_fetch_usbserialv>
 80a205e:	6803      	ldr	r3, [r0, #0]
 80a2060:	691b      	ldr	r3, [r3, #16]
 80a2062:	4798      	blx	r3
 80a2064:	2800      	cmp	r0, #0
 80a2066:	dc16      	bgt.n	80a2096 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2068:	4b10      	ldr	r3, [pc, #64]	; (80a20ac <serialEventRun+0x58>)
 80a206a:	b133      	cbz	r3, 80a207a <serialEventRun+0x26>
 80a206c:	f000 fa9a 	bl	80a25a4 <_Z22__fetch_global_Serial1v>
 80a2070:	6803      	ldr	r3, [r0, #0]
 80a2072:	691b      	ldr	r3, [r3, #16]
 80a2074:	4798      	blx	r3
 80a2076:	2800      	cmp	r0, #0
 80a2078:	dc10      	bgt.n	80a209c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a207a:	4b0d      	ldr	r3, [pc, #52]	; (80a20b0 <serialEventRun+0x5c>)
 80a207c:	b10b      	cbz	r3, 80a2082 <serialEventRun+0x2e>
 80a207e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2082:	4b0c      	ldr	r3, [pc, #48]	; (80a20b4 <serialEventRun+0x60>)
 80a2084:	b17b      	cbz	r3, 80a20a6 <serialEventRun+0x52>
 80a2086:	f7ff ff4f 	bl	80a1f28 <_Z17_fetch_usbserial1v>
 80a208a:	6803      	ldr	r3, [r0, #0]
 80a208c:	691b      	ldr	r3, [r3, #16]
 80a208e:	4798      	blx	r3
 80a2090:	2800      	cmp	r0, #0
 80a2092:	dc06      	bgt.n	80a20a2 <serialEventRun+0x4e>
 80a2094:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2096:	f3af 8000 	nop.w
 80a209a:	e7e5      	b.n	80a2068 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a209c:	f3af 8000 	nop.w
 80a20a0:	e7eb      	b.n	80a207a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a20a2:	f3af 8000 	nop.w
 80a20a6:	bd08      	pop	{r3, pc}
	...

080a20b8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a20b8:	b508      	push	{r3, lr}
	serialEventRun();
 80a20ba:	f7ff ffcb 	bl	80a2054 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a20be:	f7ff fbaf 	bl	80a1820 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a20c2:	4b01      	ldr	r3, [pc, #4]	; (80a20c8 <_post_loop+0x10>)
 80a20c4:	6018      	str	r0, [r3, #0]
 80a20c6:	bd08      	pop	{r3, pc}
 80a20c8:	20000598 	.word	0x20000598

080a20cc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a20cc:	4802      	ldr	r0, [pc, #8]	; (80a20d8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a20ce:	4a03      	ldr	r2, [pc, #12]	; (80a20dc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a20d0:	4903      	ldr	r1, [pc, #12]	; (80a20e0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a20d2:	1a12      	subs	r2, r2, r0
 80a20d4:	f001 bec8 	b.w	80a3e68 <memcpy>
 80a20d8:	40024000 	.word	0x40024000
 80a20dc:	40024004 	.word	0x40024004
 80a20e0:	080a53c8 	.word	0x080a53c8

080a20e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a20e4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a20e6:	2300      	movs	r3, #0
 80a20e8:	9300      	str	r3, [sp, #0]
 80a20ea:	461a      	mov	r2, r3
 80a20ec:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a20f0:	f7ff fc70 	bl	80a19d4 <system_ctrl_set_result>
}
 80a20f4:	b003      	add	sp, #12
 80a20f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a20fc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a20fc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a20fe:	8843      	ldrh	r3, [r0, #2]
 80a2100:	2b0a      	cmp	r3, #10
 80a2102:	d008      	beq.n	80a2116 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2104:	2b50      	cmp	r3, #80	; 0x50
 80a2106:	d109      	bne.n	80a211c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2108:	4b09      	ldr	r3, [pc, #36]	; (80a2130 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a210a:	681b      	ldr	r3, [r3, #0]
 80a210c:	b13b      	cbz	r3, 80a211e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a210e:	b003      	add	sp, #12
 80a2110:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2114:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2116:	f7ff ffe5 	bl	80a20e4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a211a:	e006      	b.n	80a212a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a211c:	2300      	movs	r3, #0
 80a211e:	9300      	str	r3, [sp, #0]
 80a2120:	461a      	mov	r2, r3
 80a2122:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2126:	f7ff fc55 	bl	80a19d4 <system_ctrl_set_result>
        break;
    }
}
 80a212a:	b003      	add	sp, #12
 80a212c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2130:	20000420 	.word	0x20000420

080a2134 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2134:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2136:	4c10      	ldr	r4, [pc, #64]	; (80a2178 <module_user_init_hook+0x44>)
 80a2138:	4d10      	ldr	r5, [pc, #64]	; (80a217c <module_user_init_hook+0x48>)
 80a213a:	6823      	ldr	r3, [r4, #0]
 80a213c:	42ab      	cmp	r3, r5
 80a213e:	4b10      	ldr	r3, [pc, #64]	; (80a2180 <module_user_init_hook+0x4c>)
 80a2140:	bf0c      	ite	eq
 80a2142:	2201      	moveq	r2, #1
 80a2144:	2200      	movne	r2, #0
 80a2146:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2148:	d002      	beq.n	80a2150 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a214a:	f7ff ffbf 	bl	80a20cc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a214e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2150:	f7ff fb56 	bl	80a1800 <HAL_RNG_GetRandomNumber>
 80a2154:	4604      	mov	r4, r0
    srand(seed);
 80a2156:	f001 fe9b 	bl	80a3e90 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a215a:	4b0a      	ldr	r3, [pc, #40]	; (80a2184 <module_user_init_hook+0x50>)
 80a215c:	b113      	cbz	r3, 80a2164 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a215e:	4620      	mov	r0, r4
 80a2160:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2164:	2100      	movs	r1, #0
 80a2166:	4807      	ldr	r0, [pc, #28]	; (80a2184 <module_user_init_hook+0x50>)
 80a2168:	f7ff fbc2 	bl	80a18f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a216c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2170:	2100      	movs	r1, #0
 80a2172:	4805      	ldr	r0, [pc, #20]	; (80a2188 <module_user_init_hook+0x54>)
 80a2174:	f7ff bc24 	b.w	80a19c0 <system_ctrl_set_app_request_handler>
 80a2178:	40024000 	.word	0x40024000
 80a217c:	9a271c1e 	.word	0x9a271c1e
 80a2180:	20000424 	.word	0x20000424
 80a2184:	00000000 	.word	0x00000000
 80a2188:	080a20fd 	.word	0x080a20fd

080a218c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a218c:	b510      	push	{r4, lr}
 80a218e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2190:	f7ff ff54 	bl	80a203c <_ZNSt14_Function_baseD1Ev>
 80a2194:	4620      	mov	r0, r4
 80a2196:	bd10      	pop	{r4, pc}

080a2198 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2198:	4803      	ldr	r0, [pc, #12]	; (80a21a8 <_GLOBAL__sub_I_RGB+0x10>)
 80a219a:	2300      	movs	r3, #0
 80a219c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a219e:	4a03      	ldr	r2, [pc, #12]	; (80a21ac <_GLOBAL__sub_I_RGB+0x14>)
 80a21a0:	4903      	ldr	r1, [pc, #12]	; (80a21b0 <_GLOBAL__sub_I_RGB+0x18>)
 80a21a2:	f000 bc1c 	b.w	80a29de <__aeabi_atexit>
 80a21a6:	bf00      	nop
 80a21a8:	20000428 	.word	0x20000428
 80a21ac:	20000070 	.word	0x20000070
 80a21b0:	080a218d 	.word	0x080a218d

080a21b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a21b4:	4b02      	ldr	r3, [pc, #8]	; (80a21c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a21b6:	681a      	ldr	r2, [r3, #0]
 80a21b8:	4b02      	ldr	r3, [pc, #8]	; (80a21c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a21ba:	601a      	str	r2, [r3, #0]
 80a21bc:	4770      	bx	lr
 80a21be:	bf00      	nop
 80a21c0:	20000008 	.word	0x20000008
 80a21c4:	20000438 	.word	0x20000438

080a21c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a21c8:	4a01      	ldr	r2, [pc, #4]	; (80a21d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a21ca:	4b02      	ldr	r3, [pc, #8]	; (80a21d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a21cc:	601a      	str	r2, [r3, #0]
 80a21ce:	4770      	bx	lr
 80a21d0:	080a526b 	.word	0x080a526b
 80a21d4:	2000043c 	.word	0x2000043c

080a21d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a21d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a21da:	4606      	mov	r6, r0
 80a21dc:	460d      	mov	r5, r1
 80a21de:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a21e0:	2400      	movs	r4, #0
  while (size--) {
 80a21e2:	42bd      	cmp	r5, r7
 80a21e4:	d00c      	beq.n	80a2200 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a21e6:	6833      	ldr	r3, [r6, #0]
 80a21e8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a21ec:	689b      	ldr	r3, [r3, #8]
 80a21ee:	4630      	mov	r0, r6
 80a21f0:	4798      	blx	r3
     if (chunk>=0)
 80a21f2:	2800      	cmp	r0, #0
 80a21f4:	db01      	blt.n	80a21fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a21f6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a21f8:	e7f3      	b.n	80a21e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a21fa:	2c00      	cmp	r4, #0
 80a21fc:	bf08      	it	eq
 80a21fe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2200:	4620      	mov	r0, r4
 80a2202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2204 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2204:	b570      	push	{r4, r5, r6, lr}
 80a2206:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2208:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a220a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a220c:	b149      	cbz	r1, 80a2222 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a220e:	f001 fe67 	bl	80a3ee0 <strlen>
 80a2212:	682b      	ldr	r3, [r5, #0]
 80a2214:	4602      	mov	r2, r0
 80a2216:	4621      	mov	r1, r4
 80a2218:	4628      	mov	r0, r5
    }
 80a221a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a221e:	68db      	ldr	r3, [r3, #12]
 80a2220:	4718      	bx	r3
    }
 80a2222:	bd70      	pop	{r4, r5, r6, pc}

080a2224 <_ZN5Print5printEPKc>:
 80a2224:	b508      	push	{r3, lr}
 80a2226:	f7ff ffed 	bl	80a2204 <_ZN5Print5writeEPKc>
 80a222a:	bd08      	pop	{r3, pc}

080a222c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a222c:	6803      	ldr	r3, [r0, #0]
 80a222e:	689b      	ldr	r3, [r3, #8]
 80a2230:	4718      	bx	r3

080a2232 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2232:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2234:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2236:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2238:	f7ff fff8 	bl	80a222c <_ZN5Print5printEc>
  n += print('\n');
 80a223c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a223e:	4604      	mov	r4, r0
  n += print('\n');
 80a2240:	4628      	mov	r0, r5
 80a2242:	f7ff fff3 	bl	80a222c <_ZN5Print5printEc>
  return n;
}
 80a2246:	4420      	add	r0, r4
 80a2248:	bd38      	pop	{r3, r4, r5, pc}

080a224a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a224a:	b538      	push	{r3, r4, r5, lr}
 80a224c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a224e:	f7ff ffd9 	bl	80a2204 <_ZN5Print5writeEPKc>
 80a2252:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2254:	4628      	mov	r0, r5
 80a2256:	f7ff ffec 	bl	80a2232 <_ZN5Print7printlnEv>
  return n;
}
 80a225a:	4420      	add	r0, r4
 80a225c:	bd38      	pop	{r3, r4, r5, pc}

080a225e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 80a225e:	f7ff bff4 	b.w	80a224a <_ZN5Print7printlnEPKc>

080a2262 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2262:	2a01      	cmp	r2, #1
 80a2264:	bf98      	it	ls
 80a2266:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2268:	b530      	push	{r4, r5, lr}
 80a226a:	460b      	mov	r3, r1
 80a226c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a226e:	2100      	movs	r1, #0
 80a2270:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2274:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2278:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a227c:	fb05 3312 	mls	r3, r5, r2, r3
 80a2280:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2282:	2b09      	cmp	r3, #9
 80a2284:	bf94      	ite	ls
 80a2286:	3330      	addls	r3, #48	; 0x30
 80a2288:	3337      	addhi	r3, #55	; 0x37
 80a228a:	b2db      	uxtb	r3, r3
 80a228c:	4621      	mov	r1, r4
 80a228e:	f804 3901 	strb.w	r3, [r4], #-1
 80a2292:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2294:	2d00      	cmp	r5, #0
 80a2296:	d1ef      	bne.n	80a2278 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2298:	f7ff ffb4 	bl	80a2204 <_ZN5Print5writeEPKc>
}
 80a229c:	b00b      	add	sp, #44	; 0x2c
 80a229e:	bd30      	pop	{r4, r5, pc}

080a22a0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a22a0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a22a2:	b922      	cbnz	r2, 80a22ae <_ZN5Print5printEmi+0xe>
 80a22a4:	6803      	ldr	r3, [r0, #0]
 80a22a6:	b2c9      	uxtb	r1, r1
 80a22a8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a22aa:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a22ac:	4718      	bx	r3
  else return printNumber(n, base);
 80a22ae:	b2d2      	uxtb	r2, r2
}
 80a22b0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a22b2:	f7ff bfd6 	b.w	80a2262 <_ZN5Print11printNumberEmh>

080a22b6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a22b6:	f7ff bff3 	b.w	80a22a0 <_ZN5Print5printEmi>

080a22ba <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a22ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a22be:	4607      	mov	r7, r0
 80a22c0:	460e      	mov	r6, r1
  if (base == 0) {
 80a22c2:	4615      	mov	r5, r2
 80a22c4:	b92a      	cbnz	r2, 80a22d2 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a22c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a22ca:	6803      	ldr	r3, [r0, #0]
 80a22cc:	b2c9      	uxtb	r1, r1
 80a22ce:	689b      	ldr	r3, [r3, #8]
 80a22d0:	4718      	bx	r3
  } else if (base == 10) {
 80a22d2:	2a0a      	cmp	r2, #10
 80a22d4:	d102      	bne.n	80a22dc <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a22d6:	2900      	cmp	r1, #0
 80a22d8:	da01      	bge.n	80a22de <_ZN5Print5printEli+0x24>
 80a22da:	e004      	b.n	80a22e6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a22dc:	b2d2      	uxtb	r2, r2
  }
}
 80a22de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a22e2:	f7ff bfbe 	b.w	80a2262 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a22e6:	212d      	movs	r1, #45	; 0x2d
 80a22e8:	f7ff ffa0 	bl	80a222c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a22ec:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a22ee:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a22f0:	4271      	negs	r1, r6
 80a22f2:	4638      	mov	r0, r7
 80a22f4:	f7ff ffb5 	bl	80a2262 <_ZN5Print11printNumberEmh>
 80a22f8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a22fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a2300 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2304:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2306:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2308:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a230a:	4617      	mov	r7, r2
 80a230c:	461e      	mov	r6, r3
 80a230e:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2312:	f001 f905 	bl	80a3520 <__aeabi_dcmpun>
 80a2316:	b108      	cbz	r0, 80a231c <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2318:	4947      	ldr	r1, [pc, #284]	; (80a2438 <_ZN5Print10printFloatEdh+0x138>)
 80a231a:	e012      	b.n	80a2342 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a231c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a2320:	f04f 32ff 	mov.w	r2, #4294967295
 80a2324:	4b45      	ldr	r3, [pc, #276]	; (80a243c <_ZN5Print10printFloatEdh+0x13c>)
 80a2326:	4638      	mov	r0, r7
 80a2328:	4621      	mov	r1, r4
 80a232a:	f001 f8f9 	bl	80a3520 <__aeabi_dcmpun>
 80a232e:	b968      	cbnz	r0, 80a234c <_ZN5Print10printFloatEdh+0x4c>
 80a2330:	f04f 32ff 	mov.w	r2, #4294967295
 80a2334:	4b41      	ldr	r3, [pc, #260]	; (80a243c <_ZN5Print10printFloatEdh+0x13c>)
 80a2336:	4638      	mov	r0, r7
 80a2338:	4621      	mov	r1, r4
 80a233a:	f001 f8d3 	bl	80a34e4 <__aeabi_dcmple>
 80a233e:	b928      	cbnz	r0, 80a234c <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2340:	493f      	ldr	r1, [pc, #252]	; (80a2440 <_ZN5Print10printFloatEdh+0x140>)
 80a2342:	4640      	mov	r0, r8
 80a2344:	f7ff ff5e 	bl	80a2204 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a234c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2350:	4b3c      	ldr	r3, [pc, #240]	; (80a2444 <_ZN5Print10printFloatEdh+0x144>)
 80a2352:	4638      	mov	r0, r7
 80a2354:	4631      	mov	r1, r6
 80a2356:	f001 f8d9 	bl	80a350c <__aeabi_dcmpgt>
 80a235a:	b108      	cbz	r0, 80a2360 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a235c:	493a      	ldr	r1, [pc, #232]	; (80a2448 <_ZN5Print10printFloatEdh+0x148>)
 80a235e:	e7f0      	b.n	80a2342 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a2360:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2364:	4b39      	ldr	r3, [pc, #228]	; (80a244c <_ZN5Print10printFloatEdh+0x14c>)
 80a2366:	4638      	mov	r0, r7
 80a2368:	4631      	mov	r1, r6
 80a236a:	f001 f8b1 	bl	80a34d0 <__aeabi_dcmplt>
 80a236e:	2800      	cmp	r0, #0
 80a2370:	d1f4      	bne.n	80a235c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a2372:	2200      	movs	r2, #0
 80a2374:	2300      	movs	r3, #0
 80a2376:	4638      	mov	r0, r7
 80a2378:	4631      	mov	r1, r6
 80a237a:	f001 f8a9 	bl	80a34d0 <__aeabi_dcmplt>
 80a237e:	b138      	cbz	r0, 80a2390 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a2380:	212d      	movs	r1, #45	; 0x2d
 80a2382:	4640      	mov	r0, r8
 80a2384:	f7ff ff52 	bl	80a222c <_ZN5Print5printEc>
     number = -number;
 80a2388:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a238c:	4604      	mov	r4, r0
 80a238e:	e000      	b.n	80a2392 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2390:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2392:	492f      	ldr	r1, [pc, #188]	; (80a2450 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2394:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2398:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a239a:	fa5f f389 	uxtb.w	r3, r9
 80a239e:	429d      	cmp	r5, r3
 80a23a0:	d906      	bls.n	80a23b0 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a23a2:	2200      	movs	r2, #0
 80a23a4:	4b2b      	ldr	r3, [pc, #172]	; (80a2454 <_ZN5Print10printFloatEdh+0x154>)
 80a23a6:	f000 ff4b 	bl	80a3240 <__aeabi_ddiv>
 80a23aa:	f109 0901 	add.w	r9, r9, #1
 80a23ae:	e7f4      	b.n	80a239a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a23b0:	463a      	mov	r2, r7
 80a23b2:	4633      	mov	r3, r6
 80a23b4:	f000 fc68 	bl	80a2c88 <__adddf3>
 80a23b8:	460f      	mov	r7, r1
 80a23ba:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a23bc:	f001 f8ee 	bl	80a359c <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a23c0:	220a      	movs	r2, #10
 80a23c2:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a23c4:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a23c6:	4640      	mov	r0, r8
 80a23c8:	f7ff ff4b 	bl	80a2262 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a23cc:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a23ce:	b37d      	cbz	r5, 80a2430 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a23d0:	4648      	mov	r0, r9
 80a23d2:	f000 fd95 	bl	80a2f00 <__aeabi_ui2d>
 80a23d6:	4602      	mov	r2, r0
 80a23d8:	460b      	mov	r3, r1
 80a23da:	4630      	mov	r0, r6
 80a23dc:	4639      	mov	r1, r7
 80a23de:	f000 fc51 	bl	80a2c84 <__aeabi_dsub>
 80a23e2:	4606      	mov	r6, r0
 80a23e4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a23e6:	4640      	mov	r0, r8
 80a23e8:	491b      	ldr	r1, [pc, #108]	; (80a2458 <_ZN5Print10printFloatEdh+0x158>)
 80a23ea:	f7ff ff0b 	bl	80a2204 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a23ee:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a23f0:	4b18      	ldr	r3, [pc, #96]	; (80a2454 <_ZN5Print10printFloatEdh+0x154>)
 80a23f2:	2200      	movs	r2, #0
 80a23f4:	4630      	mov	r0, r6
 80a23f6:	4639      	mov	r1, r7
 80a23f8:	f000 fdf8 	bl	80a2fec <__aeabi_dmul>
 80a23fc:	460f      	mov	r7, r1
 80a23fe:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a2400:	f001 f8a4 	bl	80a354c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2404:	220a      	movs	r2, #10
 80a2406:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a2408:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a240a:	4640      	mov	r0, r8
 80a240c:	f7ff ff55 	bl	80a22ba <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a2410:	4404      	add	r4, r0
    remainder -= toPrint;
 80a2412:	4648      	mov	r0, r9
 80a2414:	f000 fd84 	bl	80a2f20 <__aeabi_i2d>
 80a2418:	4602      	mov	r2, r0
 80a241a:	460b      	mov	r3, r1
 80a241c:	4630      	mov	r0, r6
 80a241e:	4639      	mov	r1, r7
 80a2420:	f000 fc30 	bl	80a2c84 <__aeabi_dsub>
 80a2424:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a2426:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a242a:	4606      	mov	r6, r0
 80a242c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a242e:	d1df      	bne.n	80a23f0 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2430:	4620      	mov	r0, r4
 80a2432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2436:	bf00      	nop
 80a2438:	080a52d4 	.word	0x080a52d4
 80a243c:	7fefffff 	.word	0x7fefffff
 80a2440:	080a52dc 	.word	0x080a52dc
 80a2444:	41efffff 	.word	0x41efffff
 80a2448:	080a52d8 	.word	0x080a52d8
 80a244c:	c1efffff 	.word	0xc1efffff
 80a2450:	3fe00000 	.word	0x3fe00000
 80a2454:	40240000 	.word	0x40240000
 80a2458:	080a42a6 	.word	0x080a42a6

080a245c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a245c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a245e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a2462:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a2464:	9100      	str	r1, [sp, #0]
 80a2466:	f7ff ff4b 	bl	80a2300 <_ZN5Print10printFloatEdh>
 80a246a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a246c:	4628      	mov	r0, r5
 80a246e:	f7ff fee0 	bl	80a2232 <_ZN5Print7printlnEv>
  return n;
}
 80a2472:	4420      	add	r0, r4
 80a2474:	b003      	add	sp, #12
 80a2476:	bd30      	pop	{r4, r5, pc}

080a2478 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a2478:	b40c      	push	{r2, r3}
 80a247a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a247e:	b087      	sub	sp, #28
 80a2480:	af00      	add	r7, sp, #0
 80a2482:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a2486:	f854 9b04 	ldr.w	r9, [r4], #4
 80a248a:	4605      	mov	r5, r0
 80a248c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a248e:	4623      	mov	r3, r4
 80a2490:	464a      	mov	r2, r9
 80a2492:	2114      	movs	r1, #20
 80a2494:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a2496:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a2498:	f7ff fabe 	bl	80a1a18 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a249c:	2813      	cmp	r0, #19
 80a249e:	d805      	bhi.n	80a24ac <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a24a0:	1d39      	adds	r1, r7, #4
 80a24a2:	4628      	mov	r0, r5
 80a24a4:	f7ff feae 	bl	80a2204 <_ZN5Print5writeEPKc>
 80a24a8:	4604      	mov	r4, r0
 80a24aa:	e013      	b.n	80a24d4 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a24ac:	f100 0308 	add.w	r3, r0, #8
 80a24b0:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a24b4:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a24b6:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a24ba:	1c41      	adds	r1, r0, #1
 80a24bc:	4623      	mov	r3, r4
 80a24be:	464a      	mov	r2, r9
 80a24c0:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a24c2:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a24c4:	f7ff faa8 	bl	80a1a18 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a24c8:	4669      	mov	r1, sp
 80a24ca:	4628      	mov	r0, r5
 80a24cc:	f7ff fe9a 	bl	80a2204 <_ZN5Print5writeEPKc>
 80a24d0:	4604      	mov	r4, r0
 80a24d2:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a24d4:	b11e      	cbz	r6, 80a24de <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a24d6:	4628      	mov	r0, r5
 80a24d8:	f7ff feab 	bl	80a2232 <_ZN5Print7printlnEv>
 80a24dc:	4404      	add	r4, r0
    return n;
}
 80a24de:	4620      	mov	r0, r4
 80a24e0:	371c      	adds	r7, #28
 80a24e2:	46bd      	mov	sp, r7
 80a24e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a24e8:	b002      	add	sp, #8
 80a24ea:	4770      	bx	lr

080a24ec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a24ec:	4770      	bx	lr

080a24ee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a24ee:	7441      	strb	r1, [r0, #17]
 80a24f0:	4770      	bx	lr

080a24f2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a24f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a24f4:	7c00      	ldrb	r0, [r0, #16]
 80a24f6:	f7ff f963 	bl	80a17c0 <HAL_USART_Available_Data_For_Write>
}
 80a24fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24fe:	bd08      	pop	{r3, pc}

080a2500 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2500:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2502:	7c00      	ldrb	r0, [r0, #16]
 80a2504:	f7ff f934 	bl	80a1770 <HAL_USART_Available_Data>
}
 80a2508:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a250c:	bd08      	pop	{r3, pc}

080a250e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a250e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2510:	7c00      	ldrb	r0, [r0, #16]
 80a2512:	f7ff f93d 	bl	80a1790 <HAL_USART_Peek_Data>
}
 80a2516:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a251a:	bf28      	it	cs
 80a251c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2520:	bd08      	pop	{r3, pc}

080a2522 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2522:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2524:	7c00      	ldrb	r0, [r0, #16]
 80a2526:	f7ff f92b 	bl	80a1780 <HAL_USART_Read_Data>
}
 80a252a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a252e:	bf28      	it	cs
 80a2530:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2534:	bd08      	pop	{r3, pc}

080a2536 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2536:	7c00      	ldrb	r0, [r0, #16]
 80a2538:	f7ff b932 	b.w	80a17a0 <HAL_USART_Flush_Data>

080a253c <_ZN11USARTSerialD0Ev>:
 80a253c:	b510      	push	{r4, lr}
 80a253e:	4604      	mov	r4, r0
 80a2540:	2114      	movs	r1, #20
 80a2542:	f000 fa51 	bl	80a29e8 <_ZdlPvj>
 80a2546:	4620      	mov	r0, r4
 80a2548:	bd10      	pop	{r4, pc}

080a254a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a254a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a254c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a254e:	4604      	mov	r4, r0
 80a2550:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2552:	b925      	cbnz	r5, 80a255e <_ZN11USARTSerial5writeEh+0x14>
 80a2554:	7c00      	ldrb	r0, [r0, #16]
 80a2556:	f7ff f933 	bl	80a17c0 <HAL_USART_Available_Data_For_Write>
 80a255a:	2800      	cmp	r0, #0
 80a255c:	dd05      	ble.n	80a256a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a255e:	4631      	mov	r1, r6
 80a2560:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2566:	f7ff b8fb 	b.w	80a1760 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a256a:	4628      	mov	r0, r5
 80a256c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2570 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2570:	b510      	push	{r4, lr}
 80a2572:	4604      	mov	r4, r0
 80a2574:	4608      	mov	r0, r1
 80a2576:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2578:	2200      	movs	r2, #0
 80a257a:	6062      	str	r2, [r4, #4]
 80a257c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2580:	60a2      	str	r2, [r4, #8]
 80a2582:	4a05      	ldr	r2, [pc, #20]	; (80a2598 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2584:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2586:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2588:	2201      	movs	r2, #1
 80a258a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a258c:	461a      	mov	r2, r3
 80a258e:	f7ff f8df 	bl	80a1750 <HAL_USART_Init>
}
 80a2592:	4620      	mov	r0, r4
 80a2594:	bd10      	pop	{r4, pc}
 80a2596:	bf00      	nop
 80a2598:	080a52e8 	.word	0x080a52e8

080a259c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a259c:	7c00      	ldrb	r0, [r0, #16]
 80a259e:	f7ff b907 	b.w	80a17b0 <HAL_USART_Is_Enabled>
	...

080a25a4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a25a4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a25a6:	4d0c      	ldr	r5, [pc, #48]	; (80a25d8 <_Z22__fetch_global_Serial1v+0x34>)
 80a25a8:	6829      	ldr	r1, [r5, #0]
 80a25aa:	f011 0401 	ands.w	r4, r1, #1
 80a25ae:	d111      	bne.n	80a25d4 <_Z22__fetch_global_Serial1v+0x30>
 80a25b0:	4628      	mov	r0, r5
 80a25b2:	f7fd fd7f 	bl	80a00b4 <__cxa_guard_acquire>
 80a25b6:	b168      	cbz	r0, 80a25d4 <_Z22__fetch_global_Serial1v+0x30>
 80a25b8:	4a08      	ldr	r2, [pc, #32]	; (80a25dc <_Z22__fetch_global_Serial1v+0x38>)
 80a25ba:	4621      	mov	r1, r4
 80a25bc:	4b08      	ldr	r3, [pc, #32]	; (80a25e0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a25be:	4809      	ldr	r0, [pc, #36]	; (80a25e4 <_Z22__fetch_global_Serial1v+0x40>)
 80a25c0:	f7ff ffd6 	bl	80a2570 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a25c4:	4628      	mov	r0, r5
 80a25c6:	f7fd fd7a 	bl	80a00be <__cxa_guard_release>
 80a25ca:	4a07      	ldr	r2, [pc, #28]	; (80a25e8 <_Z22__fetch_global_Serial1v+0x44>)
 80a25cc:	4907      	ldr	r1, [pc, #28]	; (80a25ec <_Z22__fetch_global_Serial1v+0x48>)
 80a25ce:	4805      	ldr	r0, [pc, #20]	; (80a25e4 <_Z22__fetch_global_Serial1v+0x40>)
 80a25d0:	f000 fa05 	bl	80a29de <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a25d4:	4803      	ldr	r0, [pc, #12]	; (80a25e4 <_Z22__fetch_global_Serial1v+0x40>)
 80a25d6:	bd38      	pop	{r3, r4, r5, pc}
 80a25d8:	200004d8 	.word	0x200004d8
 80a25dc:	200004dc 	.word	0x200004dc
 80a25e0:	20000454 	.word	0x20000454
 80a25e4:	20000440 	.word	0x20000440
 80a25e8:	20000070 	.word	0x20000070
 80a25ec:	080a24ed 	.word	0x080a24ed

080a25f0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a25f0:	b510      	push	{r4, lr}
 80a25f2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a25f4:	f001 fc74 	bl	80a3ee0 <strlen>
 80a25f8:	3801      	subs	r0, #1
 80a25fa:	1823      	adds	r3, r4, r0
 80a25fc:	4620      	mov	r0, r4
	while(i<j){
 80a25fe:	4298      	cmp	r0, r3
 80a2600:	d206      	bcs.n	80a2610 <_Z11str_reversePc+0x20>
		c = *i;
 80a2602:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a2604:	7819      	ldrb	r1, [r3, #0]
 80a2606:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a260a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a260e:	e7f6      	b.n	80a25fe <_Z11str_reversePc+0xe>
 80a2610:	bd10      	pop	{r4, pc}

080a2612 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a2612:	b570      	push	{r4, r5, r6, lr}
 80a2614:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a2616:	1e91      	subs	r1, r2, #2
 80a2618:	2922      	cmp	r1, #34	; 0x22
 80a261a:	d820      	bhi.n	80a265e <ultoa+0x4c>
 80a261c:	4625      	mov	r5, r4
 80a261e:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2620:	b910      	cbnz	r0, 80a2628 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2622:	4423      	add	r3, r4
            *ptr++ = '0';
 80a2624:	2230      	movs	r2, #48	; 0x30
 80a2626:	e00e      	b.n	80a2646 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a2628:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a262c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a2630:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a2632:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a2634:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a2638:	bf94      	ite	ls
 80a263a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a263c:	3157      	addhi	r1, #87	; 0x57
 80a263e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a2642:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2644:	e7eb      	b.n	80a261e <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2646:	4299      	cmp	r1, r3
 80a2648:	d202      	bcs.n	80a2650 <ultoa+0x3e>
            *ptr++ = '0';
 80a264a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a264e:	e7fa      	b.n	80a2646 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a2650:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a2652:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a2654:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a2656:	f7ff ffcb 	bl	80a25f0 <_Z11str_reversePc>
	return buffer;
 80a265a:	4620      	mov	r0, r4
 80a265c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a265e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a2660:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2664 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2668:	4b03      	ldr	r3, [pc, #12]	; (80a2678 <_GLOBAL__sub_I_System+0x14>)
 80a266a:	2000      	movs	r0, #0
 80a266c:	7018      	strb	r0, [r3, #0]
 80a266e:	8058      	strh	r0, [r3, #2]
 80a2670:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2672:	f7ff b995 	b.w	80a19a0 <set_system_mode>
 80a2676:	bf00      	nop
 80a2678:	20000560 	.word	0x20000560

080a267c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a267c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2680:	4680      	mov	r8, r0
 80a2682:	460d      	mov	r5, r1
 80a2684:	4617      	mov	r7, r2
 80a2686:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a2688:	2200      	movs	r2, #0
 80a268a:	2300      	movs	r3, #0
 80a268c:	4640      	mov	r0, r8
 80a268e:	4629      	mov	r1, r5
 80a2690:	f000 ff1e 	bl	80a34d0 <__aeabi_dcmplt>
 80a2694:	b120      	cbz	r0, 80a26a0 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a2696:	232d      	movs	r3, #45	; 0x2d
 80a2698:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a269a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a269e:	3601      	adds	r6, #1
 80a26a0:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a26a2:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a26a4:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a26a6:	b2d9      	uxtb	r1, r3
 80a26a8:	428f      	cmp	r7, r1
 80a26aa:	d902      	bls.n	80a26b2 <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a26ac:	4354      	muls	r4, r2
 80a26ae:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a26b0:	e7f9      	b.n	80a26a6 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a26b2:	4620      	mov	r0, r4
 80a26b4:	f000 fc34 	bl	80a2f20 <__aeabi_i2d>
 80a26b8:	4642      	mov	r2, r8
 80a26ba:	462b      	mov	r3, r5
 80a26bc:	f000 fc96 	bl	80a2fec <__aeabi_dmul>
 80a26c0:	4682      	mov	sl, r0
 80a26c2:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a26c4:	f001 fa26 	bl	80a3b14 <__aeabi_d2ulz>
 80a26c8:	4680      	mov	r8, r0
 80a26ca:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a26cc:	f000 fc58 	bl	80a2f80 <__aeabi_ul2d>
 80a26d0:	4602      	mov	r2, r0
 80a26d2:	460b      	mov	r3, r1
 80a26d4:	4650      	mov	r0, sl
 80a26d6:	4659      	mov	r1, fp
 80a26d8:	f000 fad4 	bl	80a2c84 <__aeabi_dsub>
 80a26dc:	2200      	movs	r2, #0
 80a26de:	4b17      	ldr	r3, [pc, #92]	; (80a273c <_Z4dtoadhPc+0xc0>)
 80a26e0:	f000 ff0a 	bl	80a34f8 <__aeabi_dcmpge>
 80a26e4:	b118      	cbz	r0, 80a26ee <_Z4dtoadhPc+0x72>
        fixed++;
 80a26e6:	f118 0801 	adds.w	r8, r8, #1
 80a26ea:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a26ee:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a26f0:	4622      	mov	r2, r4
 80a26f2:	462b      	mov	r3, r5
 80a26f4:	4640      	mov	r0, r8
 80a26f6:	4649      	mov	r1, r9
 80a26f8:	f001 f9f4 	bl	80a3ae4 <__aeabi_uldivmod>
 80a26fc:	2301      	movs	r3, #1
 80a26fe:	220a      	movs	r2, #10
 80a2700:	4631      	mov	r1, r6
 80a2702:	f7ff ff86 	bl	80a2612 <ultoa>
    if (prec) {
 80a2706:	b1af      	cbz	r7, 80a2734 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a2708:	4630      	mov	r0, r6
 80a270a:	f001 fbe9 	bl	80a3ee0 <strlen>
        *sout++ = '.';
 80a270e:	232e      	movs	r3, #46	; 0x2e
 80a2710:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a2712:	3001      	adds	r0, #1
 80a2714:	4406      	add	r6, r0
 80a2716:	4622      	mov	r2, r4
 80a2718:	462b      	mov	r3, r5
 80a271a:	4640      	mov	r0, r8
 80a271c:	4649      	mov	r1, r9
 80a271e:	f001 f9e1 	bl	80a3ae4 <__aeabi_uldivmod>
 80a2722:	463b      	mov	r3, r7
 80a2724:	4610      	mov	r0, r2
 80a2726:	4631      	mov	r1, r6
 80a2728:	220a      	movs	r2, #10
    }
}
 80a272a:	b001      	add	sp, #4
 80a272c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a2730:	f7ff bf6f 	b.w	80a2612 <ultoa>
    }
}
 80a2734:	b001      	add	sp, #4
 80a2736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a273a:	bf00      	nop
 80a273c:	3fe00000 	.word	0x3fe00000

080a2740 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2740:	b510      	push	{r4, lr}
 80a2742:	4604      	mov	r4, r0
{
	free(buffer);
 80a2744:	6800      	ldr	r0, [r0, #0]
 80a2746:	f7ff f957 	bl	80a19f8 <free>
}
 80a274a:	4620      	mov	r0, r4
 80a274c:	bd10      	pop	{r4, pc}

080a274e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a274e:	b510      	push	{r4, lr}
 80a2750:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2752:	6800      	ldr	r0, [r0, #0]
 80a2754:	b108      	cbz	r0, 80a275a <_ZN6String10invalidateEv+0xc>
 80a2756:	f7ff f94f 	bl	80a19f8 <free>
	buffer = NULL;
 80a275a:	2300      	movs	r3, #0
 80a275c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a275e:	60a3      	str	r3, [r4, #8]
 80a2760:	6063      	str	r3, [r4, #4]
 80a2762:	bd10      	pop	{r4, pc}

080a2764 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2764:	b538      	push	{r3, r4, r5, lr}
 80a2766:	4604      	mov	r4, r0
 80a2768:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a276a:	6800      	ldr	r0, [r0, #0]
 80a276c:	3101      	adds	r1, #1
 80a276e:	f7ff f94b 	bl	80a1a08 <realloc>
	if (newbuffer) {
 80a2772:	b110      	cbz	r0, 80a277a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2774:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2778:	2001      	movs	r0, #1
	}
	return 0;
}
 80a277a:	bd38      	pop	{r3, r4, r5, pc}

080a277c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a277c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a277e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2780:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2782:	b113      	cbz	r3, 80a278a <_ZN6String7reserveEj+0xe>
 80a2784:	6843      	ldr	r3, [r0, #4]
 80a2786:	428b      	cmp	r3, r1
 80a2788:	d207      	bcs.n	80a279a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a278a:	4620      	mov	r0, r4
 80a278c:	f7ff ffea 	bl	80a2764 <_ZN6String12changeBufferEj>
 80a2790:	b120      	cbz	r0, 80a279c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2792:	68a3      	ldr	r3, [r4, #8]
 80a2794:	b90b      	cbnz	r3, 80a279a <_ZN6String7reserveEj+0x1e>
 80a2796:	6822      	ldr	r2, [r4, #0]
 80a2798:	7013      	strb	r3, [r2, #0]
 80a279a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a279c:	bd10      	pop	{r4, pc}

080a279e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a279e:	b570      	push	{r4, r5, r6, lr}
 80a27a0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a27a2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a27a4:	4604      	mov	r4, r0
 80a27a6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a27a8:	f7ff ffe8 	bl	80a277c <_ZN6String7reserveEj>
 80a27ac:	b918      	cbnz	r0, 80a27b6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a27ae:	4620      	mov	r0, r4
 80a27b0:	f7ff ffcd 	bl	80a274e <_ZN6String10invalidateEv>
		return *this;
 80a27b4:	e009      	b.n	80a27ca <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a27b6:	462a      	mov	r2, r5
 80a27b8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a27ba:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a27bc:	6820      	ldr	r0, [r4, #0]
 80a27be:	f001 fb53 	bl	80a3e68 <memcpy>
	buffer[len] = 0;
 80a27c2:	6822      	ldr	r2, [r4, #0]
 80a27c4:	68a3      	ldr	r3, [r4, #8]
 80a27c6:	2100      	movs	r1, #0
 80a27c8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a27ca:	4620      	mov	r0, r4
 80a27cc:	bd70      	pop	{r4, r5, r6, pc}

080a27ce <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a27ce:	b538      	push	{r3, r4, r5, lr}
 80a27d0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a27d2:	460c      	mov	r4, r1
 80a27d4:	b141      	cbz	r1, 80a27e8 <_ZN6StringaSEPKc+0x1a>
 80a27d6:	4608      	mov	r0, r1
 80a27d8:	f001 fb82 	bl	80a3ee0 <strlen>
 80a27dc:	4621      	mov	r1, r4
 80a27de:	4602      	mov	r2, r0
 80a27e0:	4628      	mov	r0, r5
 80a27e2:	f7ff ffdc 	bl	80a279e <_ZN6String4copyEPKcj>
 80a27e6:	e001      	b.n	80a27ec <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a27e8:	f7ff ffb1 	bl	80a274e <_ZN6String10invalidateEv>

	return *this;
}
 80a27ec:	4628      	mov	r0, r5
 80a27ee:	bd38      	pop	{r3, r4, r5, pc}

080a27f0 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a27f0:	b530      	push	{r4, r5, lr}
 80a27f2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a27f4:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a27f6:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a27f8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a27fa:	6043      	str	r3, [r0, #4]
	len = 0;
 80a27fc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a27fe:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a2800:	b2d5      	uxtb	r5, r2
 80a2802:	4608      	mov	r0, r1
 80a2804:	f000 fb9e 	bl	80a2f44 <__aeabi_f2d>
 80a2808:	ab01      	add	r3, sp, #4
 80a280a:	462a      	mov	r2, r5
 80a280c:	f7ff ff36 	bl	80a267c <_Z4dtoadhPc>
        *this = buf;
 80a2810:	a901      	add	r1, sp, #4
 80a2812:	4620      	mov	r0, r4
 80a2814:	f7ff ffdb 	bl	80a27ce <_ZN6StringaSEPKc>
}
 80a2818:	4620      	mov	r0, r4
 80a281a:	b00b      	add	sp, #44	; 0x2c
 80a281c:	bd30      	pop	{r4, r5, pc}
	...

080a2820 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2820:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2822:	4d0b      	ldr	r5, [pc, #44]	; (80a2850 <_Z19__fetch_global_Wirev+0x30>)
 80a2824:	6829      	ldr	r1, [r5, #0]
 80a2826:	f011 0401 	ands.w	r4, r1, #1
 80a282a:	d10f      	bne.n	80a284c <_Z19__fetch_global_Wirev+0x2c>
 80a282c:	4628      	mov	r0, r5
 80a282e:	f7fd fc41 	bl	80a00b4 <__cxa_guard_acquire>
 80a2832:	b158      	cbz	r0, 80a284c <_Z19__fetch_global_Wirev+0x2c>
 80a2834:	4621      	mov	r1, r4
 80a2836:	4807      	ldr	r0, [pc, #28]	; (80a2854 <_Z19__fetch_global_Wirev+0x34>)
 80a2838:	f7ff fa9c 	bl	80a1d74 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a283c:	4628      	mov	r0, r5
 80a283e:	f7fd fc3e 	bl	80a00be <__cxa_guard_release>
 80a2842:	4a05      	ldr	r2, [pc, #20]	; (80a2858 <_Z19__fetch_global_Wirev+0x38>)
 80a2844:	4905      	ldr	r1, [pc, #20]	; (80a285c <_Z19__fetch_global_Wirev+0x3c>)
 80a2846:	4803      	ldr	r0, [pc, #12]	; (80a2854 <_Z19__fetch_global_Wirev+0x34>)
 80a2848:	f000 f8c9 	bl	80a29de <__aeabi_atexit>
	return wire;
}
 80a284c:	4801      	ldr	r0, [pc, #4]	; (80a2854 <_Z19__fetch_global_Wirev+0x34>)
 80a284e:	bd38      	pop	{r3, r4, r5, pc}
 80a2850:	20000568 	.word	0x20000568
 80a2854:	2000056c 	.word	0x2000056c
 80a2858:	20000070 	.word	0x20000070
 80a285c:	080a1d1b 	.word	0x080a1d1b

080a2860 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2860:	b513      	push	{r0, r1, r4, lr}
 80a2862:	4c08      	ldr	r4, [pc, #32]	; (80a2884 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2864:	2300      	movs	r3, #0
 80a2866:	461a      	mov	r2, r3
 80a2868:	4619      	mov	r1, r3
 80a286a:	9300      	str	r3, [sp, #0]
 80a286c:	4620      	mov	r0, r4
 80a286e:	f7ff fbd9 	bl	80a2024 <_ZN9IPAddressC1Ehhhh>
 80a2872:	4620      	mov	r0, r4
 80a2874:	4a04      	ldr	r2, [pc, #16]	; (80a2888 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2876:	4905      	ldr	r1, [pc, #20]	; (80a288c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2878:	b002      	add	sp, #8
 80a287a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a287e:	f000 b8ae 	b.w	80a29de <__aeabi_atexit>
 80a2882:	bf00      	nop
 80a2884:	20000580 	.word	0x20000580
 80a2888:	20000070 	.word	0x20000070
 80a288c:	080a1f75 	.word	0x080a1f75

080a2890 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2890:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2892:	4c0c      	ldr	r4, [pc, #48]	; (80a28c4 <_GLOBAL__sub_I_SPI+0x34>)
 80a2894:	4e0c      	ldr	r6, [pc, #48]	; (80a28c8 <_GLOBAL__sub_I_SPI+0x38>)
 80a2896:	4d0d      	ldr	r5, [pc, #52]	; (80a28cc <_GLOBAL__sub_I_SPI+0x3c>)
 80a2898:	2100      	movs	r1, #0
 80a289a:	4620      	mov	r0, r4
 80a289c:	f7ff f992 	bl	80a1bc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a28a0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a28a2:	4c0b      	ldr	r4, [pc, #44]	; (80a28d0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a28a4:	4632      	mov	r2, r6
 80a28a6:	4629      	mov	r1, r5
 80a28a8:	f000 f899 	bl	80a29de <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a28ac:	2101      	movs	r1, #1
 80a28ae:	4620      	mov	r0, r4
 80a28b0:	f7ff f988 	bl	80a1bc4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a28b4:	4632      	mov	r2, r6
 80a28b6:	4629      	mov	r1, r5
 80a28b8:	4620      	mov	r0, r4
 80a28ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a28be:	f000 b88e 	b.w	80a29de <__aeabi_atexit>
 80a28c2:	bf00      	nop
 80a28c4:	2000059c 	.word	0x2000059c
 80a28c8:	20000070 	.word	0x20000070
 80a28cc:	080a1bb5 	.word	0x080a1bb5
 80a28d0:	200005ac 	.word	0x200005ac

080a28d4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a28d4:	b510      	push	{r4, lr}
 80a28d6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a28d8:	480f      	ldr	r0, [pc, #60]	; (80a2918 <pinAvailable+0x44>)
 80a28da:	f7ff fa1b 	bl	80a1d14 <_ZN8SPIClass9isEnabledEv>
 80a28de:	b128      	cbz	r0, 80a28ec <pinAvailable+0x18>
 80a28e0:	f1a4 030d 	sub.w	r3, r4, #13
 80a28e4:	2b02      	cmp	r3, #2
 80a28e6:	d801      	bhi.n	80a28ec <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a28e8:	2000      	movs	r0, #0
 80a28ea:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a28ec:	f7ff ff98 	bl	80a2820 <_Z19__fetch_global_Wirev>
 80a28f0:	f7ff fa6a 	bl	80a1dc8 <_ZN7TwoWire9isEnabledEv>
 80a28f4:	b108      	cbz	r0, 80a28fa <pinAvailable+0x26>
 80a28f6:	2c01      	cmp	r4, #1
 80a28f8:	d9f6      	bls.n	80a28e8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a28fa:	f7ff fe53 	bl	80a25a4 <_Z22__fetch_global_Serial1v>
 80a28fe:	f7ff fe4d 	bl	80a259c <_ZN11USARTSerial9isEnabledEv>
 80a2902:	b118      	cbz	r0, 80a290c <pinAvailable+0x38>
 80a2904:	f1a4 0312 	sub.w	r3, r4, #18
 80a2908:	2b01      	cmp	r3, #1
 80a290a:	d9ed      	bls.n	80a28e8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a290c:	2c17      	cmp	r4, #23
 80a290e:	bf8c      	ite	hi
 80a2910:	2000      	movhi	r0, #0
 80a2912:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2914:	bd10      	pop	{r4, pc}
 80a2916:	bf00      	nop
 80a2918:	2000059c 	.word	0x2000059c

080a291c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a291c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a291e:	b538      	push	{r3, r4, r5, lr}
 80a2920:	4604      	mov	r4, r0
 80a2922:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2924:	d80a      	bhi.n	80a293c <pinMode+0x20>
 80a2926:	29ff      	cmp	r1, #255	; 0xff
 80a2928:	d008      	beq.n	80a293c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a292a:	f7ff ffd3 	bl	80a28d4 <pinAvailable>
 80a292e:	b128      	cbz	r0, 80a293c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2930:	4629      	mov	r1, r5
 80a2932:	4620      	mov	r0, r4
}
 80a2934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2938:	f7fe bfb2 	b.w	80a18a0 <HAL_Pin_Mode>
 80a293c:	bd38      	pop	{r3, r4, r5, pc}

080a293e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a293e:	b538      	push	{r3, r4, r5, lr}
 80a2940:	4604      	mov	r4, r0
 80a2942:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2944:	f7fe ffb4 	bl	80a18b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2948:	28ff      	cmp	r0, #255	; 0xff
 80a294a:	d010      	beq.n	80a296e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a294c:	2806      	cmp	r0, #6
 80a294e:	d804      	bhi.n	80a295a <digitalWrite+0x1c>
 80a2950:	234d      	movs	r3, #77	; 0x4d
 80a2952:	fa23 f000 	lsr.w	r0, r3, r0
 80a2956:	07c3      	lsls	r3, r0, #31
 80a2958:	d409      	bmi.n	80a296e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a295a:	4620      	mov	r0, r4
 80a295c:	f7ff ffba 	bl	80a28d4 <pinAvailable>
 80a2960:	b128      	cbz	r0, 80a296e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2962:	4629      	mov	r1, r5
 80a2964:	4620      	mov	r0, r4
}
 80a2966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a296a:	f7fe bfa9 	b.w	80a18c0 <HAL_GPIO_Write>
 80a296e:	bd38      	pop	{r3, r4, r5, pc}

080a2970 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2970:	b510      	push	{r4, lr}
 80a2972:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2974:	f7fe ff9c 	bl	80a18b0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2978:	3804      	subs	r0, #4
 80a297a:	b2c0      	uxtb	r0, r0
 80a297c:	2801      	cmp	r0, #1
 80a297e:	d908      	bls.n	80a2992 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2980:	4620      	mov	r0, r4
 80a2982:	f7ff ffa7 	bl	80a28d4 <pinAvailable>
 80a2986:	b120      	cbz	r0, 80a2992 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2988:	4620      	mov	r0, r4
}
 80a298a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a298e:	f7fe bf9f 	b.w	80a18d0 <HAL_GPIO_Read>
}
 80a2992:	2000      	movs	r0, #0
 80a2994:	bd10      	pop	{r4, pc}

080a2996 <shiftIn>:
  }

  return HAL_PWM_Get_Max_Frequency(pin);
}

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
 80a2996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a299a:	4690      	mov	r8, r2
  uint8_t value = 0;
  uint8_t i;

  for (i = 0; i < 8; ++i) {
    digitalWrite(clockPin, HIGH);
 80a299c:	460e      	mov	r6, r1
 80a299e:	4607      	mov	r7, r0
  }

  return HAL_PWM_Get_Max_Frequency(pin);
}

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
 80a29a0:	2507      	movs	r5, #7
  uint8_t value = 0;
 80a29a2:	2400      	movs	r4, #0
  uint8_t i;

  for (i = 0; i < 8; ++i) {
    digitalWrite(clockPin, HIGH);
 80a29a4:	4630      	mov	r0, r6
 80a29a6:	2101      	movs	r1, #1
 80a29a8:	f7ff ffc9 	bl	80a293e <digitalWrite>
    if (bitOrder == LSBFIRST)
      value |= digitalRead(dataPin) << i;
 80a29ac:	4638      	mov	r0, r7
  uint8_t value = 0;
  uint8_t i;

  for (i = 0; i < 8; ++i) {
    digitalWrite(clockPin, HIGH);
    if (bitOrder == LSBFIRST)
 80a29ae:	f1b8 0f00 	cmp.w	r8, #0
 80a29b2:	d105      	bne.n	80a29c0 <shiftIn+0x2a>
      value |= digitalRead(dataPin) << i;
 80a29b4:	f7ff ffdc 	bl	80a2970 <digitalRead>
 80a29b8:	f1c5 0307 	rsb	r3, r5, #7
 80a29bc:	4098      	lsls	r0, r3
 80a29be:	e002      	b.n	80a29c6 <shiftIn+0x30>
    else
      value |= digitalRead(dataPin) << (7 - i);
 80a29c0:	f7ff ffd6 	bl	80a2970 <digitalRead>
 80a29c4:	40a8      	lsls	r0, r5
 80a29c6:	4304      	orrs	r4, r0
    digitalWrite(clockPin, LOW);
 80a29c8:	2100      	movs	r1, #0
 80a29ca:	4630      	mov	r0, r6
 80a29cc:	f7ff ffb7 	bl	80a293e <digitalWrite>

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
  uint8_t value = 0;
  uint8_t i;

  for (i = 0; i < 8; ++i) {
 80a29d0:	f115 35ff 	adds.w	r5, r5, #4294967295
    digitalWrite(clockPin, HIGH);
    if (bitOrder == LSBFIRST)
      value |= digitalRead(dataPin) << i;
    else
      value |= digitalRead(dataPin) << (7 - i);
 80a29d4:	b2e4      	uxtb	r4, r4

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
  uint8_t value = 0;
  uint8_t i;

  for (i = 0; i < 8; ++i) {
 80a29d6:	d2e5      	bcs.n	80a29a4 <shiftIn+0xe>
    else
      value |= digitalRead(dataPin) << (7 - i);
    digitalWrite(clockPin, LOW);
  }
  return value;
}
 80a29d8:	4620      	mov	r0, r4
 80a29da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a29de <__aeabi_atexit>:
 80a29de:	460b      	mov	r3, r1
 80a29e0:	4601      	mov	r1, r0
 80a29e2:	4618      	mov	r0, r3
 80a29e4:	f001 ba32 	b.w	80a3e4c <__cxa_atexit>

080a29e8 <_ZdlPvj>:
 80a29e8:	f7fd bb57 	b.w	80a009a <_ZdlPv>

080a29ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a29ec:	4b18      	ldr	r3, [pc, #96]	; (80a2a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a29ee:	681a      	ldr	r2, [r3, #0]
 80a29f0:	07d1      	lsls	r1, r2, #31
 80a29f2:	bf5c      	itt	pl
 80a29f4:	2201      	movpl	r2, #1
 80a29f6:	601a      	strpl	r2, [r3, #0]
 80a29f8:	4b16      	ldr	r3, [pc, #88]	; (80a2a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a29fa:	681a      	ldr	r2, [r3, #0]
 80a29fc:	07d2      	lsls	r2, r2, #31
 80a29fe:	bf5c      	itt	pl
 80a2a00:	2201      	movpl	r2, #1
 80a2a02:	601a      	strpl	r2, [r3, #0]
 80a2a04:	4b14      	ldr	r3, [pc, #80]	; (80a2a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2a06:	681a      	ldr	r2, [r3, #0]
 80a2a08:	07d0      	lsls	r0, r2, #31
 80a2a0a:	bf5c      	itt	pl
 80a2a0c:	2201      	movpl	r2, #1
 80a2a0e:	601a      	strpl	r2, [r3, #0]
 80a2a10:	4b12      	ldr	r3, [pc, #72]	; (80a2a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2a12:	681a      	ldr	r2, [r3, #0]
 80a2a14:	07d1      	lsls	r1, r2, #31
 80a2a16:	bf5c      	itt	pl
 80a2a18:	2201      	movpl	r2, #1
 80a2a1a:	601a      	strpl	r2, [r3, #0]
 80a2a1c:	4b10      	ldr	r3, [pc, #64]	; (80a2a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2a1e:	681a      	ldr	r2, [r3, #0]
 80a2a20:	07d2      	lsls	r2, r2, #31
 80a2a22:	bf5c      	itt	pl
 80a2a24:	2201      	movpl	r2, #1
 80a2a26:	601a      	strpl	r2, [r3, #0]
 80a2a28:	4b0e      	ldr	r3, [pc, #56]	; (80a2a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2a2a:	681a      	ldr	r2, [r3, #0]
 80a2a2c:	07d0      	lsls	r0, r2, #31
 80a2a2e:	bf5c      	itt	pl
 80a2a30:	2201      	movpl	r2, #1
 80a2a32:	601a      	strpl	r2, [r3, #0]
 80a2a34:	4b0c      	ldr	r3, [pc, #48]	; (80a2a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2a36:	681a      	ldr	r2, [r3, #0]
 80a2a38:	07d1      	lsls	r1, r2, #31
 80a2a3a:	bf5c      	itt	pl
 80a2a3c:	2201      	movpl	r2, #1
 80a2a3e:	601a      	strpl	r2, [r3, #0]
 80a2a40:	4b0a      	ldr	r3, [pc, #40]	; (80a2a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2a42:	681a      	ldr	r2, [r3, #0]
 80a2a44:	07d2      	lsls	r2, r2, #31
 80a2a46:	bf5c      	itt	pl
 80a2a48:	2201      	movpl	r2, #1
 80a2a4a:	601a      	strpl	r2, [r3, #0]
 80a2a4c:	4770      	bx	lr
 80a2a4e:	bf00      	nop
 80a2a50:	200005d8 	.word	0x200005d8
 80a2a54:	200005d4 	.word	0x200005d4
 80a2a58:	200005d0 	.word	0x200005d0
 80a2a5c:	200005cc 	.word	0x200005cc
 80a2a60:	200005c8 	.word	0x200005c8
 80a2a64:	200005c4 	.word	0x200005c4
 80a2a68:	200005c0 	.word	0x200005c0
 80a2a6c:	200005bc 	.word	0x200005bc

080a2a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2a70:	4b24      	ldr	r3, [pc, #144]	; (80a2b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2a72:	681a      	ldr	r2, [r3, #0]
 80a2a74:	07d0      	lsls	r0, r2, #31
 80a2a76:	bf5c      	itt	pl
 80a2a78:	2201      	movpl	r2, #1
 80a2a7a:	601a      	strpl	r2, [r3, #0]
 80a2a7c:	4b22      	ldr	r3, [pc, #136]	; (80a2b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2a7e:	681a      	ldr	r2, [r3, #0]
 80a2a80:	07d1      	lsls	r1, r2, #31
 80a2a82:	bf5c      	itt	pl
 80a2a84:	2201      	movpl	r2, #1
 80a2a86:	601a      	strpl	r2, [r3, #0]
 80a2a88:	4b20      	ldr	r3, [pc, #128]	; (80a2b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2a8a:	681a      	ldr	r2, [r3, #0]
 80a2a8c:	07d2      	lsls	r2, r2, #31
 80a2a8e:	bf5c      	itt	pl
 80a2a90:	2201      	movpl	r2, #1
 80a2a92:	601a      	strpl	r2, [r3, #0]
 80a2a94:	4b1e      	ldr	r3, [pc, #120]	; (80a2b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2a96:	681a      	ldr	r2, [r3, #0]
 80a2a98:	07d0      	lsls	r0, r2, #31
 80a2a9a:	bf5c      	itt	pl
 80a2a9c:	2201      	movpl	r2, #1
 80a2a9e:	601a      	strpl	r2, [r3, #0]
 80a2aa0:	4b1c      	ldr	r3, [pc, #112]	; (80a2b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2aa2:	681a      	ldr	r2, [r3, #0]
 80a2aa4:	07d1      	lsls	r1, r2, #31
 80a2aa6:	bf5c      	itt	pl
 80a2aa8:	2201      	movpl	r2, #1
 80a2aaa:	601a      	strpl	r2, [r3, #0]
 80a2aac:	4b1a      	ldr	r3, [pc, #104]	; (80a2b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2aae:	681a      	ldr	r2, [r3, #0]
 80a2ab0:	07d2      	lsls	r2, r2, #31
 80a2ab2:	bf5c      	itt	pl
 80a2ab4:	2201      	movpl	r2, #1
 80a2ab6:	601a      	strpl	r2, [r3, #0]
 80a2ab8:	4b18      	ldr	r3, [pc, #96]	; (80a2b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2aba:	681a      	ldr	r2, [r3, #0]
 80a2abc:	07d0      	lsls	r0, r2, #31
 80a2abe:	bf5c      	itt	pl
 80a2ac0:	2201      	movpl	r2, #1
 80a2ac2:	601a      	strpl	r2, [r3, #0]
 80a2ac4:	4b16      	ldr	r3, [pc, #88]	; (80a2b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2ac6:	681a      	ldr	r2, [r3, #0]
 80a2ac8:	07d1      	lsls	r1, r2, #31
 80a2aca:	bf5c      	itt	pl
 80a2acc:	2201      	movpl	r2, #1
 80a2ace:	601a      	strpl	r2, [r3, #0]
 80a2ad0:	4b14      	ldr	r3, [pc, #80]	; (80a2b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2ad2:	681a      	ldr	r2, [r3, #0]
 80a2ad4:	07d2      	lsls	r2, r2, #31
 80a2ad6:	bf5c      	itt	pl
 80a2ad8:	2201      	movpl	r2, #1
 80a2ada:	601a      	strpl	r2, [r3, #0]
 80a2adc:	4b12      	ldr	r3, [pc, #72]	; (80a2b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2ade:	681a      	ldr	r2, [r3, #0]
 80a2ae0:	07d0      	lsls	r0, r2, #31
 80a2ae2:	bf5c      	itt	pl
 80a2ae4:	2201      	movpl	r2, #1
 80a2ae6:	601a      	strpl	r2, [r3, #0]
 80a2ae8:	4b10      	ldr	r3, [pc, #64]	; (80a2b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2aea:	681a      	ldr	r2, [r3, #0]
 80a2aec:	07d1      	lsls	r1, r2, #31
 80a2aee:	bf5c      	itt	pl
 80a2af0:	2201      	movpl	r2, #1
 80a2af2:	601a      	strpl	r2, [r3, #0]
 80a2af4:	4b0e      	ldr	r3, [pc, #56]	; (80a2b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2af6:	681a      	ldr	r2, [r3, #0]
 80a2af8:	07d2      	lsls	r2, r2, #31
 80a2afa:	bf5c      	itt	pl
 80a2afc:	2201      	movpl	r2, #1
 80a2afe:	601a      	strpl	r2, [r3, #0]
 80a2b00:	4770      	bx	lr
 80a2b02:	bf00      	nop
 80a2b04:	20000608 	.word	0x20000608
 80a2b08:	20000604 	.word	0x20000604
 80a2b0c:	20000600 	.word	0x20000600
 80a2b10:	200005fc 	.word	0x200005fc
 80a2b14:	200005f8 	.word	0x200005f8
 80a2b18:	200005f4 	.word	0x200005f4
 80a2b1c:	200005f0 	.word	0x200005f0
 80a2b20:	200005ec 	.word	0x200005ec
 80a2b24:	200005e8 	.word	0x200005e8
 80a2b28:	200005e4 	.word	0x200005e4
 80a2b2c:	200005e0 	.word	0x200005e0
 80a2b30:	200005dc 	.word	0x200005dc

080a2b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2b34:	4b24      	ldr	r3, [pc, #144]	; (80a2bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2b36:	681a      	ldr	r2, [r3, #0]
 80a2b38:	07d0      	lsls	r0, r2, #31
 80a2b3a:	bf5c      	itt	pl
 80a2b3c:	2201      	movpl	r2, #1
 80a2b3e:	601a      	strpl	r2, [r3, #0]
 80a2b40:	4b22      	ldr	r3, [pc, #136]	; (80a2bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2b42:	681a      	ldr	r2, [r3, #0]
 80a2b44:	07d1      	lsls	r1, r2, #31
 80a2b46:	bf5c      	itt	pl
 80a2b48:	2201      	movpl	r2, #1
 80a2b4a:	601a      	strpl	r2, [r3, #0]
 80a2b4c:	4b20      	ldr	r3, [pc, #128]	; (80a2bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2b4e:	681a      	ldr	r2, [r3, #0]
 80a2b50:	07d2      	lsls	r2, r2, #31
 80a2b52:	bf5c      	itt	pl
 80a2b54:	2201      	movpl	r2, #1
 80a2b56:	601a      	strpl	r2, [r3, #0]
 80a2b58:	4b1e      	ldr	r3, [pc, #120]	; (80a2bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2b5a:	681a      	ldr	r2, [r3, #0]
 80a2b5c:	07d0      	lsls	r0, r2, #31
 80a2b5e:	bf5c      	itt	pl
 80a2b60:	2201      	movpl	r2, #1
 80a2b62:	601a      	strpl	r2, [r3, #0]
 80a2b64:	4b1c      	ldr	r3, [pc, #112]	; (80a2bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2b66:	681a      	ldr	r2, [r3, #0]
 80a2b68:	07d1      	lsls	r1, r2, #31
 80a2b6a:	bf5c      	itt	pl
 80a2b6c:	2201      	movpl	r2, #1
 80a2b6e:	601a      	strpl	r2, [r3, #0]
 80a2b70:	4b1a      	ldr	r3, [pc, #104]	; (80a2bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2b72:	681a      	ldr	r2, [r3, #0]
 80a2b74:	07d2      	lsls	r2, r2, #31
 80a2b76:	bf5c      	itt	pl
 80a2b78:	2201      	movpl	r2, #1
 80a2b7a:	601a      	strpl	r2, [r3, #0]
 80a2b7c:	4b18      	ldr	r3, [pc, #96]	; (80a2be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2b7e:	681a      	ldr	r2, [r3, #0]
 80a2b80:	07d0      	lsls	r0, r2, #31
 80a2b82:	bf5c      	itt	pl
 80a2b84:	2201      	movpl	r2, #1
 80a2b86:	601a      	strpl	r2, [r3, #0]
 80a2b88:	4b16      	ldr	r3, [pc, #88]	; (80a2be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2b8a:	681a      	ldr	r2, [r3, #0]
 80a2b8c:	07d1      	lsls	r1, r2, #31
 80a2b8e:	bf5c      	itt	pl
 80a2b90:	2201      	movpl	r2, #1
 80a2b92:	601a      	strpl	r2, [r3, #0]
 80a2b94:	4b14      	ldr	r3, [pc, #80]	; (80a2be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2b96:	681a      	ldr	r2, [r3, #0]
 80a2b98:	07d2      	lsls	r2, r2, #31
 80a2b9a:	bf5c      	itt	pl
 80a2b9c:	2201      	movpl	r2, #1
 80a2b9e:	601a      	strpl	r2, [r3, #0]
 80a2ba0:	4b12      	ldr	r3, [pc, #72]	; (80a2bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2ba2:	681a      	ldr	r2, [r3, #0]
 80a2ba4:	07d0      	lsls	r0, r2, #31
 80a2ba6:	bf5c      	itt	pl
 80a2ba8:	2201      	movpl	r2, #1
 80a2baa:	601a      	strpl	r2, [r3, #0]
 80a2bac:	4b10      	ldr	r3, [pc, #64]	; (80a2bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2bae:	681a      	ldr	r2, [r3, #0]
 80a2bb0:	07d1      	lsls	r1, r2, #31
 80a2bb2:	bf5c      	itt	pl
 80a2bb4:	2201      	movpl	r2, #1
 80a2bb6:	601a      	strpl	r2, [r3, #0]
 80a2bb8:	4b0e      	ldr	r3, [pc, #56]	; (80a2bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2bba:	681a      	ldr	r2, [r3, #0]
 80a2bbc:	07d2      	lsls	r2, r2, #31
 80a2bbe:	bf5c      	itt	pl
 80a2bc0:	2201      	movpl	r2, #1
 80a2bc2:	601a      	strpl	r2, [r3, #0]
 80a2bc4:	4770      	bx	lr
 80a2bc6:	bf00      	nop
 80a2bc8:	20000638 	.word	0x20000638
 80a2bcc:	20000634 	.word	0x20000634
 80a2bd0:	20000630 	.word	0x20000630
 80a2bd4:	2000062c 	.word	0x2000062c
 80a2bd8:	20000628 	.word	0x20000628
 80a2bdc:	20000624 	.word	0x20000624
 80a2be0:	20000620 	.word	0x20000620
 80a2be4:	2000061c 	.word	0x2000061c
 80a2be8:	20000618 	.word	0x20000618
 80a2bec:	20000614 	.word	0x20000614
 80a2bf0:	20000610 	.word	0x20000610
 80a2bf4:	2000060c 	.word	0x2000060c

080a2bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2bf8:	4b18      	ldr	r3, [pc, #96]	; (80a2c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2bfa:	681a      	ldr	r2, [r3, #0]
 80a2bfc:	07d1      	lsls	r1, r2, #31
 80a2bfe:	bf5c      	itt	pl
 80a2c00:	2201      	movpl	r2, #1
 80a2c02:	601a      	strpl	r2, [r3, #0]
 80a2c04:	4b16      	ldr	r3, [pc, #88]	; (80a2c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2c06:	681a      	ldr	r2, [r3, #0]
 80a2c08:	07d2      	lsls	r2, r2, #31
 80a2c0a:	bf5c      	itt	pl
 80a2c0c:	2201      	movpl	r2, #1
 80a2c0e:	601a      	strpl	r2, [r3, #0]
 80a2c10:	4b14      	ldr	r3, [pc, #80]	; (80a2c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2c12:	681a      	ldr	r2, [r3, #0]
 80a2c14:	07d0      	lsls	r0, r2, #31
 80a2c16:	bf5c      	itt	pl
 80a2c18:	2201      	movpl	r2, #1
 80a2c1a:	601a      	strpl	r2, [r3, #0]
 80a2c1c:	4b12      	ldr	r3, [pc, #72]	; (80a2c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2c1e:	681a      	ldr	r2, [r3, #0]
 80a2c20:	07d1      	lsls	r1, r2, #31
 80a2c22:	bf5c      	itt	pl
 80a2c24:	2201      	movpl	r2, #1
 80a2c26:	601a      	strpl	r2, [r3, #0]
 80a2c28:	4b10      	ldr	r3, [pc, #64]	; (80a2c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2c2a:	681a      	ldr	r2, [r3, #0]
 80a2c2c:	07d2      	lsls	r2, r2, #31
 80a2c2e:	bf5c      	itt	pl
 80a2c30:	2201      	movpl	r2, #1
 80a2c32:	601a      	strpl	r2, [r3, #0]
 80a2c34:	4b0e      	ldr	r3, [pc, #56]	; (80a2c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2c36:	681a      	ldr	r2, [r3, #0]
 80a2c38:	07d0      	lsls	r0, r2, #31
 80a2c3a:	bf5c      	itt	pl
 80a2c3c:	2201      	movpl	r2, #1
 80a2c3e:	601a      	strpl	r2, [r3, #0]
 80a2c40:	4b0c      	ldr	r3, [pc, #48]	; (80a2c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2c42:	681a      	ldr	r2, [r3, #0]
 80a2c44:	07d1      	lsls	r1, r2, #31
 80a2c46:	bf5c      	itt	pl
 80a2c48:	2201      	movpl	r2, #1
 80a2c4a:	601a      	strpl	r2, [r3, #0]
 80a2c4c:	4b0a      	ldr	r3, [pc, #40]	; (80a2c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2c4e:	681a      	ldr	r2, [r3, #0]
 80a2c50:	07d2      	lsls	r2, r2, #31
 80a2c52:	bf5c      	itt	pl
 80a2c54:	2201      	movpl	r2, #1
 80a2c56:	601a      	strpl	r2, [r3, #0]
 80a2c58:	4770      	bx	lr
 80a2c5a:	bf00      	nop
 80a2c5c:	20000658 	.word	0x20000658
 80a2c60:	20000654 	.word	0x20000654
 80a2c64:	20000650 	.word	0x20000650
 80a2c68:	2000064c 	.word	0x2000064c
 80a2c6c:	20000648 	.word	0x20000648
 80a2c70:	20000644 	.word	0x20000644
 80a2c74:	20000640 	.word	0x20000640
 80a2c78:	2000063c 	.word	0x2000063c

080a2c7c <__aeabi_drsub>:
 80a2c7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2c80:	e002      	b.n	80a2c88 <__adddf3>
 80a2c82:	bf00      	nop

080a2c84 <__aeabi_dsub>:
 80a2c84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2c88 <__adddf3>:
 80a2c88:	b530      	push	{r4, r5, lr}
 80a2c8a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2c8e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2c92:	ea94 0f05 	teq	r4, r5
 80a2c96:	bf08      	it	eq
 80a2c98:	ea90 0f02 	teqeq	r0, r2
 80a2c9c:	bf1f      	itttt	ne
 80a2c9e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2ca2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2ca6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2caa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2cae:	f000 80e2 	beq.w	80a2e76 <__adddf3+0x1ee>
 80a2cb2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2cb6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2cba:	bfb8      	it	lt
 80a2cbc:	426d      	neglt	r5, r5
 80a2cbe:	dd0c      	ble.n	80a2cda <__adddf3+0x52>
 80a2cc0:	442c      	add	r4, r5
 80a2cc2:	ea80 0202 	eor.w	r2, r0, r2
 80a2cc6:	ea81 0303 	eor.w	r3, r1, r3
 80a2cca:	ea82 0000 	eor.w	r0, r2, r0
 80a2cce:	ea83 0101 	eor.w	r1, r3, r1
 80a2cd2:	ea80 0202 	eor.w	r2, r0, r2
 80a2cd6:	ea81 0303 	eor.w	r3, r1, r3
 80a2cda:	2d36      	cmp	r5, #54	; 0x36
 80a2cdc:	bf88      	it	hi
 80a2cde:	bd30      	pophi	{r4, r5, pc}
 80a2ce0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2ce4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2ce8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2cec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2cf0:	d002      	beq.n	80a2cf8 <__adddf3+0x70>
 80a2cf2:	4240      	negs	r0, r0
 80a2cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2cf8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2cfc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2d00:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2d04:	d002      	beq.n	80a2d0c <__adddf3+0x84>
 80a2d06:	4252      	negs	r2, r2
 80a2d08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2d0c:	ea94 0f05 	teq	r4, r5
 80a2d10:	f000 80a7 	beq.w	80a2e62 <__adddf3+0x1da>
 80a2d14:	f1a4 0401 	sub.w	r4, r4, #1
 80a2d18:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2d1c:	db0d      	blt.n	80a2d3a <__adddf3+0xb2>
 80a2d1e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2d22:	fa22 f205 	lsr.w	r2, r2, r5
 80a2d26:	1880      	adds	r0, r0, r2
 80a2d28:	f141 0100 	adc.w	r1, r1, #0
 80a2d2c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2d30:	1880      	adds	r0, r0, r2
 80a2d32:	fa43 f305 	asr.w	r3, r3, r5
 80a2d36:	4159      	adcs	r1, r3
 80a2d38:	e00e      	b.n	80a2d58 <__adddf3+0xd0>
 80a2d3a:	f1a5 0520 	sub.w	r5, r5, #32
 80a2d3e:	f10e 0e20 	add.w	lr, lr, #32
 80a2d42:	2a01      	cmp	r2, #1
 80a2d44:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2d48:	bf28      	it	cs
 80a2d4a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2d4e:	fa43 f305 	asr.w	r3, r3, r5
 80a2d52:	18c0      	adds	r0, r0, r3
 80a2d54:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2d58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2d5c:	d507      	bpl.n	80a2d6e <__adddf3+0xe6>
 80a2d5e:	f04f 0e00 	mov.w	lr, #0
 80a2d62:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2d66:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2d6a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2d6e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2d72:	d31b      	bcc.n	80a2dac <__adddf3+0x124>
 80a2d74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2d78:	d30c      	bcc.n	80a2d94 <__adddf3+0x10c>
 80a2d7a:	0849      	lsrs	r1, r1, #1
 80a2d7c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2d80:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2d84:	f104 0401 	add.w	r4, r4, #1
 80a2d88:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2d8c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2d90:	f080 809a 	bcs.w	80a2ec8 <__adddf3+0x240>
 80a2d94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2d98:	bf08      	it	eq
 80a2d9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2d9e:	f150 0000 	adcs.w	r0, r0, #0
 80a2da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2da6:	ea41 0105 	orr.w	r1, r1, r5
 80a2daa:	bd30      	pop	{r4, r5, pc}
 80a2dac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2db0:	4140      	adcs	r0, r0
 80a2db2:	eb41 0101 	adc.w	r1, r1, r1
 80a2db6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2dba:	f1a4 0401 	sub.w	r4, r4, #1
 80a2dbe:	d1e9      	bne.n	80a2d94 <__adddf3+0x10c>
 80a2dc0:	f091 0f00 	teq	r1, #0
 80a2dc4:	bf04      	itt	eq
 80a2dc6:	4601      	moveq	r1, r0
 80a2dc8:	2000      	moveq	r0, #0
 80a2dca:	fab1 f381 	clz	r3, r1
 80a2dce:	bf08      	it	eq
 80a2dd0:	3320      	addeq	r3, #32
 80a2dd2:	f1a3 030b 	sub.w	r3, r3, #11
 80a2dd6:	f1b3 0220 	subs.w	r2, r3, #32
 80a2dda:	da0c      	bge.n	80a2df6 <__adddf3+0x16e>
 80a2ddc:	320c      	adds	r2, #12
 80a2dde:	dd08      	ble.n	80a2df2 <__adddf3+0x16a>
 80a2de0:	f102 0c14 	add.w	ip, r2, #20
 80a2de4:	f1c2 020c 	rsb	r2, r2, #12
 80a2de8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2dec:	fa21 f102 	lsr.w	r1, r1, r2
 80a2df0:	e00c      	b.n	80a2e0c <__adddf3+0x184>
 80a2df2:	f102 0214 	add.w	r2, r2, #20
 80a2df6:	bfd8      	it	le
 80a2df8:	f1c2 0c20 	rsble	ip, r2, #32
 80a2dfc:	fa01 f102 	lsl.w	r1, r1, r2
 80a2e00:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2e04:	bfdc      	itt	le
 80a2e06:	ea41 010c 	orrle.w	r1, r1, ip
 80a2e0a:	4090      	lslle	r0, r2
 80a2e0c:	1ae4      	subs	r4, r4, r3
 80a2e0e:	bfa2      	ittt	ge
 80a2e10:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2e14:	4329      	orrge	r1, r5
 80a2e16:	bd30      	popge	{r4, r5, pc}
 80a2e18:	ea6f 0404 	mvn.w	r4, r4
 80a2e1c:	3c1f      	subs	r4, #31
 80a2e1e:	da1c      	bge.n	80a2e5a <__adddf3+0x1d2>
 80a2e20:	340c      	adds	r4, #12
 80a2e22:	dc0e      	bgt.n	80a2e42 <__adddf3+0x1ba>
 80a2e24:	f104 0414 	add.w	r4, r4, #20
 80a2e28:	f1c4 0220 	rsb	r2, r4, #32
 80a2e2c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2e30:	fa01 f302 	lsl.w	r3, r1, r2
 80a2e34:	ea40 0003 	orr.w	r0, r0, r3
 80a2e38:	fa21 f304 	lsr.w	r3, r1, r4
 80a2e3c:	ea45 0103 	orr.w	r1, r5, r3
 80a2e40:	bd30      	pop	{r4, r5, pc}
 80a2e42:	f1c4 040c 	rsb	r4, r4, #12
 80a2e46:	f1c4 0220 	rsb	r2, r4, #32
 80a2e4a:	fa20 f002 	lsr.w	r0, r0, r2
 80a2e4e:	fa01 f304 	lsl.w	r3, r1, r4
 80a2e52:	ea40 0003 	orr.w	r0, r0, r3
 80a2e56:	4629      	mov	r1, r5
 80a2e58:	bd30      	pop	{r4, r5, pc}
 80a2e5a:	fa21 f004 	lsr.w	r0, r1, r4
 80a2e5e:	4629      	mov	r1, r5
 80a2e60:	bd30      	pop	{r4, r5, pc}
 80a2e62:	f094 0f00 	teq	r4, #0
 80a2e66:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2e6a:	bf06      	itte	eq
 80a2e6c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2e70:	3401      	addeq	r4, #1
 80a2e72:	3d01      	subne	r5, #1
 80a2e74:	e74e      	b.n	80a2d14 <__adddf3+0x8c>
 80a2e76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2e7a:	bf18      	it	ne
 80a2e7c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2e80:	d029      	beq.n	80a2ed6 <__adddf3+0x24e>
 80a2e82:	ea94 0f05 	teq	r4, r5
 80a2e86:	bf08      	it	eq
 80a2e88:	ea90 0f02 	teqeq	r0, r2
 80a2e8c:	d005      	beq.n	80a2e9a <__adddf3+0x212>
 80a2e8e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2e92:	bf04      	itt	eq
 80a2e94:	4619      	moveq	r1, r3
 80a2e96:	4610      	moveq	r0, r2
 80a2e98:	bd30      	pop	{r4, r5, pc}
 80a2e9a:	ea91 0f03 	teq	r1, r3
 80a2e9e:	bf1e      	ittt	ne
 80a2ea0:	2100      	movne	r1, #0
 80a2ea2:	2000      	movne	r0, #0
 80a2ea4:	bd30      	popne	{r4, r5, pc}
 80a2ea6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2eaa:	d105      	bne.n	80a2eb8 <__adddf3+0x230>
 80a2eac:	0040      	lsls	r0, r0, #1
 80a2eae:	4149      	adcs	r1, r1
 80a2eb0:	bf28      	it	cs
 80a2eb2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2eb6:	bd30      	pop	{r4, r5, pc}
 80a2eb8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2ebc:	bf3c      	itt	cc
 80a2ebe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2ec2:	bd30      	popcc	{r4, r5, pc}
 80a2ec4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2ec8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2ecc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2ed0:	f04f 0000 	mov.w	r0, #0
 80a2ed4:	bd30      	pop	{r4, r5, pc}
 80a2ed6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2eda:	bf1a      	itte	ne
 80a2edc:	4619      	movne	r1, r3
 80a2ede:	4610      	movne	r0, r2
 80a2ee0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2ee4:	bf1c      	itt	ne
 80a2ee6:	460b      	movne	r3, r1
 80a2ee8:	4602      	movne	r2, r0
 80a2eea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2eee:	bf06      	itte	eq
 80a2ef0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2ef4:	ea91 0f03 	teqeq	r1, r3
 80a2ef8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2efc:	bd30      	pop	{r4, r5, pc}
 80a2efe:	bf00      	nop

080a2f00 <__aeabi_ui2d>:
 80a2f00:	f090 0f00 	teq	r0, #0
 80a2f04:	bf04      	itt	eq
 80a2f06:	2100      	moveq	r1, #0
 80a2f08:	4770      	bxeq	lr
 80a2f0a:	b530      	push	{r4, r5, lr}
 80a2f0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2f10:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2f14:	f04f 0500 	mov.w	r5, #0
 80a2f18:	f04f 0100 	mov.w	r1, #0
 80a2f1c:	e750      	b.n	80a2dc0 <__adddf3+0x138>
 80a2f1e:	bf00      	nop

080a2f20 <__aeabi_i2d>:
 80a2f20:	f090 0f00 	teq	r0, #0
 80a2f24:	bf04      	itt	eq
 80a2f26:	2100      	moveq	r1, #0
 80a2f28:	4770      	bxeq	lr
 80a2f2a:	b530      	push	{r4, r5, lr}
 80a2f2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2f30:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2f34:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2f38:	bf48      	it	mi
 80a2f3a:	4240      	negmi	r0, r0
 80a2f3c:	f04f 0100 	mov.w	r1, #0
 80a2f40:	e73e      	b.n	80a2dc0 <__adddf3+0x138>
 80a2f42:	bf00      	nop

080a2f44 <__aeabi_f2d>:
 80a2f44:	0042      	lsls	r2, r0, #1
 80a2f46:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2f4a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2f4e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2f52:	bf1f      	itttt	ne
 80a2f54:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2f58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2f5c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2f60:	4770      	bxne	lr
 80a2f62:	f092 0f00 	teq	r2, #0
 80a2f66:	bf14      	ite	ne
 80a2f68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2f6c:	4770      	bxeq	lr
 80a2f6e:	b530      	push	{r4, r5, lr}
 80a2f70:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2f74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2f78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2f7c:	e720      	b.n	80a2dc0 <__adddf3+0x138>
 80a2f7e:	bf00      	nop

080a2f80 <__aeabi_ul2d>:
 80a2f80:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f84:	bf08      	it	eq
 80a2f86:	4770      	bxeq	lr
 80a2f88:	b530      	push	{r4, r5, lr}
 80a2f8a:	f04f 0500 	mov.w	r5, #0
 80a2f8e:	e00a      	b.n	80a2fa6 <__aeabi_l2d+0x16>

080a2f90 <__aeabi_l2d>:
 80a2f90:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f94:	bf08      	it	eq
 80a2f96:	4770      	bxeq	lr
 80a2f98:	b530      	push	{r4, r5, lr}
 80a2f9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2f9e:	d502      	bpl.n	80a2fa6 <__aeabi_l2d+0x16>
 80a2fa0:	4240      	negs	r0, r0
 80a2fa2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2fa6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2faa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2fae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2fb2:	f43f aedc 	beq.w	80a2d6e <__adddf3+0xe6>
 80a2fb6:	f04f 0203 	mov.w	r2, #3
 80a2fba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2fbe:	bf18      	it	ne
 80a2fc0:	3203      	addne	r2, #3
 80a2fc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2fc6:	bf18      	it	ne
 80a2fc8:	3203      	addne	r2, #3
 80a2fca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2fce:	f1c2 0320 	rsb	r3, r2, #32
 80a2fd2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2fd6:	fa20 f002 	lsr.w	r0, r0, r2
 80a2fda:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2fde:	ea40 000e 	orr.w	r0, r0, lr
 80a2fe2:	fa21 f102 	lsr.w	r1, r1, r2
 80a2fe6:	4414      	add	r4, r2
 80a2fe8:	e6c1      	b.n	80a2d6e <__adddf3+0xe6>
 80a2fea:	bf00      	nop

080a2fec <__aeabi_dmul>:
 80a2fec:	b570      	push	{r4, r5, r6, lr}
 80a2fee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2ff2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2ff6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2ffa:	bf1d      	ittte	ne
 80a2ffc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3000:	ea94 0f0c 	teqne	r4, ip
 80a3004:	ea95 0f0c 	teqne	r5, ip
 80a3008:	f000 f8de 	bleq	80a31c8 <__aeabi_dmul+0x1dc>
 80a300c:	442c      	add	r4, r5
 80a300e:	ea81 0603 	eor.w	r6, r1, r3
 80a3012:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3016:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a301a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a301e:	bf18      	it	ne
 80a3020:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3024:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a302c:	d038      	beq.n	80a30a0 <__aeabi_dmul+0xb4>
 80a302e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3032:	f04f 0500 	mov.w	r5, #0
 80a3036:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a303a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a303e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3042:	f04f 0600 	mov.w	r6, #0
 80a3046:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a304a:	f09c 0f00 	teq	ip, #0
 80a304e:	bf18      	it	ne
 80a3050:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3054:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3058:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a305c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3060:	d204      	bcs.n	80a306c <__aeabi_dmul+0x80>
 80a3062:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3066:	416d      	adcs	r5, r5
 80a3068:	eb46 0606 	adc.w	r6, r6, r6
 80a306c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3070:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3074:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3078:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a307c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3080:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3084:	bf88      	it	hi
 80a3086:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a308a:	d81e      	bhi.n	80a30ca <__aeabi_dmul+0xde>
 80a308c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3090:	bf08      	it	eq
 80a3092:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3096:	f150 0000 	adcs.w	r0, r0, #0
 80a309a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a309e:	bd70      	pop	{r4, r5, r6, pc}
 80a30a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a30a4:	ea46 0101 	orr.w	r1, r6, r1
 80a30a8:	ea40 0002 	orr.w	r0, r0, r2
 80a30ac:	ea81 0103 	eor.w	r1, r1, r3
 80a30b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a30b4:	bfc2      	ittt	gt
 80a30b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a30ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a30be:	bd70      	popgt	{r4, r5, r6, pc}
 80a30c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a30c4:	f04f 0e00 	mov.w	lr, #0
 80a30c8:	3c01      	subs	r4, #1
 80a30ca:	f300 80ab 	bgt.w	80a3224 <__aeabi_dmul+0x238>
 80a30ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a30d2:	bfde      	ittt	le
 80a30d4:	2000      	movle	r0, #0
 80a30d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a30da:	bd70      	pople	{r4, r5, r6, pc}
 80a30dc:	f1c4 0400 	rsb	r4, r4, #0
 80a30e0:	3c20      	subs	r4, #32
 80a30e2:	da35      	bge.n	80a3150 <__aeabi_dmul+0x164>
 80a30e4:	340c      	adds	r4, #12
 80a30e6:	dc1b      	bgt.n	80a3120 <__aeabi_dmul+0x134>
 80a30e8:	f104 0414 	add.w	r4, r4, #20
 80a30ec:	f1c4 0520 	rsb	r5, r4, #32
 80a30f0:	fa00 f305 	lsl.w	r3, r0, r5
 80a30f4:	fa20 f004 	lsr.w	r0, r0, r4
 80a30f8:	fa01 f205 	lsl.w	r2, r1, r5
 80a30fc:	ea40 0002 	orr.w	r0, r0, r2
 80a3100:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3104:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3108:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a310c:	fa21 f604 	lsr.w	r6, r1, r4
 80a3110:	eb42 0106 	adc.w	r1, r2, r6
 80a3114:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3118:	bf08      	it	eq
 80a311a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a311e:	bd70      	pop	{r4, r5, r6, pc}
 80a3120:	f1c4 040c 	rsb	r4, r4, #12
 80a3124:	f1c4 0520 	rsb	r5, r4, #32
 80a3128:	fa00 f304 	lsl.w	r3, r0, r4
 80a312c:	fa20 f005 	lsr.w	r0, r0, r5
 80a3130:	fa01 f204 	lsl.w	r2, r1, r4
 80a3134:	ea40 0002 	orr.w	r0, r0, r2
 80a3138:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a313c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3140:	f141 0100 	adc.w	r1, r1, #0
 80a3144:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3148:	bf08      	it	eq
 80a314a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a314e:	bd70      	pop	{r4, r5, r6, pc}
 80a3150:	f1c4 0520 	rsb	r5, r4, #32
 80a3154:	fa00 f205 	lsl.w	r2, r0, r5
 80a3158:	ea4e 0e02 	orr.w	lr, lr, r2
 80a315c:	fa20 f304 	lsr.w	r3, r0, r4
 80a3160:	fa01 f205 	lsl.w	r2, r1, r5
 80a3164:	ea43 0302 	orr.w	r3, r3, r2
 80a3168:	fa21 f004 	lsr.w	r0, r1, r4
 80a316c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3170:	fa21 f204 	lsr.w	r2, r1, r4
 80a3174:	ea20 0002 	bic.w	r0, r0, r2
 80a3178:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a317c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3180:	bf08      	it	eq
 80a3182:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3186:	bd70      	pop	{r4, r5, r6, pc}
 80a3188:	f094 0f00 	teq	r4, #0
 80a318c:	d10f      	bne.n	80a31ae <__aeabi_dmul+0x1c2>
 80a318e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3192:	0040      	lsls	r0, r0, #1
 80a3194:	eb41 0101 	adc.w	r1, r1, r1
 80a3198:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a319c:	bf08      	it	eq
 80a319e:	3c01      	subeq	r4, #1
 80a31a0:	d0f7      	beq.n	80a3192 <__aeabi_dmul+0x1a6>
 80a31a2:	ea41 0106 	orr.w	r1, r1, r6
 80a31a6:	f095 0f00 	teq	r5, #0
 80a31aa:	bf18      	it	ne
 80a31ac:	4770      	bxne	lr
 80a31ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a31b2:	0052      	lsls	r2, r2, #1
 80a31b4:	eb43 0303 	adc.w	r3, r3, r3
 80a31b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a31bc:	bf08      	it	eq
 80a31be:	3d01      	subeq	r5, #1
 80a31c0:	d0f7      	beq.n	80a31b2 <__aeabi_dmul+0x1c6>
 80a31c2:	ea43 0306 	orr.w	r3, r3, r6
 80a31c6:	4770      	bx	lr
 80a31c8:	ea94 0f0c 	teq	r4, ip
 80a31cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a31d0:	bf18      	it	ne
 80a31d2:	ea95 0f0c 	teqne	r5, ip
 80a31d6:	d00c      	beq.n	80a31f2 <__aeabi_dmul+0x206>
 80a31d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a31dc:	bf18      	it	ne
 80a31de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a31e2:	d1d1      	bne.n	80a3188 <__aeabi_dmul+0x19c>
 80a31e4:	ea81 0103 	eor.w	r1, r1, r3
 80a31e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a31ec:	f04f 0000 	mov.w	r0, #0
 80a31f0:	bd70      	pop	{r4, r5, r6, pc}
 80a31f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a31f6:	bf06      	itte	eq
 80a31f8:	4610      	moveq	r0, r2
 80a31fa:	4619      	moveq	r1, r3
 80a31fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3200:	d019      	beq.n	80a3236 <__aeabi_dmul+0x24a>
 80a3202:	ea94 0f0c 	teq	r4, ip
 80a3206:	d102      	bne.n	80a320e <__aeabi_dmul+0x222>
 80a3208:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a320c:	d113      	bne.n	80a3236 <__aeabi_dmul+0x24a>
 80a320e:	ea95 0f0c 	teq	r5, ip
 80a3212:	d105      	bne.n	80a3220 <__aeabi_dmul+0x234>
 80a3214:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3218:	bf1c      	itt	ne
 80a321a:	4610      	movne	r0, r2
 80a321c:	4619      	movne	r1, r3
 80a321e:	d10a      	bne.n	80a3236 <__aeabi_dmul+0x24a>
 80a3220:	ea81 0103 	eor.w	r1, r1, r3
 80a3224:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3228:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a322c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3230:	f04f 0000 	mov.w	r0, #0
 80a3234:	bd70      	pop	{r4, r5, r6, pc}
 80a3236:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a323a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a323e:	bd70      	pop	{r4, r5, r6, pc}

080a3240 <__aeabi_ddiv>:
 80a3240:	b570      	push	{r4, r5, r6, lr}
 80a3242:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3246:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a324a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a324e:	bf1d      	ittte	ne
 80a3250:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3254:	ea94 0f0c 	teqne	r4, ip
 80a3258:	ea95 0f0c 	teqne	r5, ip
 80a325c:	f000 f8a7 	bleq	80a33ae <__aeabi_ddiv+0x16e>
 80a3260:	eba4 0405 	sub.w	r4, r4, r5
 80a3264:	ea81 0e03 	eor.w	lr, r1, r3
 80a3268:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a326c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3270:	f000 8088 	beq.w	80a3384 <__aeabi_ddiv+0x144>
 80a3274:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3278:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a327c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3280:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3284:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3288:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a328c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3290:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3294:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3298:	429d      	cmp	r5, r3
 80a329a:	bf08      	it	eq
 80a329c:	4296      	cmpeq	r6, r2
 80a329e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a32a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a32a6:	d202      	bcs.n	80a32ae <__aeabi_ddiv+0x6e>
 80a32a8:	085b      	lsrs	r3, r3, #1
 80a32aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32ae:	1ab6      	subs	r6, r6, r2
 80a32b0:	eb65 0503 	sbc.w	r5, r5, r3
 80a32b4:	085b      	lsrs	r3, r3, #1
 80a32b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a32be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a32c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a32c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a32ca:	bf22      	ittt	cs
 80a32cc:	1ab6      	subcs	r6, r6, r2
 80a32ce:	4675      	movcs	r5, lr
 80a32d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a32d4:	085b      	lsrs	r3, r3, #1
 80a32d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32da:	ebb6 0e02 	subs.w	lr, r6, r2
 80a32de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a32e2:	bf22      	ittt	cs
 80a32e4:	1ab6      	subcs	r6, r6, r2
 80a32e6:	4675      	movcs	r5, lr
 80a32e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a32ec:	085b      	lsrs	r3, r3, #1
 80a32ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a32f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a32fa:	bf22      	ittt	cs
 80a32fc:	1ab6      	subcs	r6, r6, r2
 80a32fe:	4675      	movcs	r5, lr
 80a3300:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3304:	085b      	lsrs	r3, r3, #1
 80a3306:	ea4f 0232 	mov.w	r2, r2, rrx
 80a330a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a330e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3312:	bf22      	ittt	cs
 80a3314:	1ab6      	subcs	r6, r6, r2
 80a3316:	4675      	movcs	r5, lr
 80a3318:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a331c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3320:	d018      	beq.n	80a3354 <__aeabi_ddiv+0x114>
 80a3322:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3326:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a332a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a332e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3332:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3336:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a333a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a333e:	d1c0      	bne.n	80a32c2 <__aeabi_ddiv+0x82>
 80a3340:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3344:	d10b      	bne.n	80a335e <__aeabi_ddiv+0x11e>
 80a3346:	ea41 0100 	orr.w	r1, r1, r0
 80a334a:	f04f 0000 	mov.w	r0, #0
 80a334e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3352:	e7b6      	b.n	80a32c2 <__aeabi_ddiv+0x82>
 80a3354:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3358:	bf04      	itt	eq
 80a335a:	4301      	orreq	r1, r0
 80a335c:	2000      	moveq	r0, #0
 80a335e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3362:	bf88      	it	hi
 80a3364:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3368:	f63f aeaf 	bhi.w	80a30ca <__aeabi_dmul+0xde>
 80a336c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3370:	bf04      	itt	eq
 80a3372:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3376:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a337a:	f150 0000 	adcs.w	r0, r0, #0
 80a337e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3382:	bd70      	pop	{r4, r5, r6, pc}
 80a3384:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3388:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a338c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3390:	bfc2      	ittt	gt
 80a3392:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3396:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a339a:	bd70      	popgt	{r4, r5, r6, pc}
 80a339c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a33a0:	f04f 0e00 	mov.w	lr, #0
 80a33a4:	3c01      	subs	r4, #1
 80a33a6:	e690      	b.n	80a30ca <__aeabi_dmul+0xde>
 80a33a8:	ea45 0e06 	orr.w	lr, r5, r6
 80a33ac:	e68d      	b.n	80a30ca <__aeabi_dmul+0xde>
 80a33ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a33b2:	ea94 0f0c 	teq	r4, ip
 80a33b6:	bf08      	it	eq
 80a33b8:	ea95 0f0c 	teqeq	r5, ip
 80a33bc:	f43f af3b 	beq.w	80a3236 <__aeabi_dmul+0x24a>
 80a33c0:	ea94 0f0c 	teq	r4, ip
 80a33c4:	d10a      	bne.n	80a33dc <__aeabi_ddiv+0x19c>
 80a33c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a33ca:	f47f af34 	bne.w	80a3236 <__aeabi_dmul+0x24a>
 80a33ce:	ea95 0f0c 	teq	r5, ip
 80a33d2:	f47f af25 	bne.w	80a3220 <__aeabi_dmul+0x234>
 80a33d6:	4610      	mov	r0, r2
 80a33d8:	4619      	mov	r1, r3
 80a33da:	e72c      	b.n	80a3236 <__aeabi_dmul+0x24a>
 80a33dc:	ea95 0f0c 	teq	r5, ip
 80a33e0:	d106      	bne.n	80a33f0 <__aeabi_ddiv+0x1b0>
 80a33e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a33e6:	f43f aefd 	beq.w	80a31e4 <__aeabi_dmul+0x1f8>
 80a33ea:	4610      	mov	r0, r2
 80a33ec:	4619      	mov	r1, r3
 80a33ee:	e722      	b.n	80a3236 <__aeabi_dmul+0x24a>
 80a33f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a33f4:	bf18      	it	ne
 80a33f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a33fa:	f47f aec5 	bne.w	80a3188 <__aeabi_dmul+0x19c>
 80a33fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3402:	f47f af0d 	bne.w	80a3220 <__aeabi_dmul+0x234>
 80a3406:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a340a:	f47f aeeb 	bne.w	80a31e4 <__aeabi_dmul+0x1f8>
 80a340e:	e712      	b.n	80a3236 <__aeabi_dmul+0x24a>

080a3410 <__gedf2>:
 80a3410:	f04f 3cff 	mov.w	ip, #4294967295
 80a3414:	e006      	b.n	80a3424 <__cmpdf2+0x4>
 80a3416:	bf00      	nop

080a3418 <__ledf2>:
 80a3418:	f04f 0c01 	mov.w	ip, #1
 80a341c:	e002      	b.n	80a3424 <__cmpdf2+0x4>
 80a341e:	bf00      	nop

080a3420 <__cmpdf2>:
 80a3420:	f04f 0c01 	mov.w	ip, #1
 80a3424:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3428:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a342c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3430:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3434:	bf18      	it	ne
 80a3436:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a343a:	d01b      	beq.n	80a3474 <__cmpdf2+0x54>
 80a343c:	b001      	add	sp, #4
 80a343e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3442:	bf0c      	ite	eq
 80a3444:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3448:	ea91 0f03 	teqne	r1, r3
 80a344c:	bf02      	ittt	eq
 80a344e:	ea90 0f02 	teqeq	r0, r2
 80a3452:	2000      	moveq	r0, #0
 80a3454:	4770      	bxeq	lr
 80a3456:	f110 0f00 	cmn.w	r0, #0
 80a345a:	ea91 0f03 	teq	r1, r3
 80a345e:	bf58      	it	pl
 80a3460:	4299      	cmppl	r1, r3
 80a3462:	bf08      	it	eq
 80a3464:	4290      	cmpeq	r0, r2
 80a3466:	bf2c      	ite	cs
 80a3468:	17d8      	asrcs	r0, r3, #31
 80a346a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a346e:	f040 0001 	orr.w	r0, r0, #1
 80a3472:	4770      	bx	lr
 80a3474:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3478:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a347c:	d102      	bne.n	80a3484 <__cmpdf2+0x64>
 80a347e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3482:	d107      	bne.n	80a3494 <__cmpdf2+0x74>
 80a3484:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3488:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a348c:	d1d6      	bne.n	80a343c <__cmpdf2+0x1c>
 80a348e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3492:	d0d3      	beq.n	80a343c <__cmpdf2+0x1c>
 80a3494:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3498:	4770      	bx	lr
 80a349a:	bf00      	nop

080a349c <__aeabi_cdrcmple>:
 80a349c:	4684      	mov	ip, r0
 80a349e:	4610      	mov	r0, r2
 80a34a0:	4662      	mov	r2, ip
 80a34a2:	468c      	mov	ip, r1
 80a34a4:	4619      	mov	r1, r3
 80a34a6:	4663      	mov	r3, ip
 80a34a8:	e000      	b.n	80a34ac <__aeabi_cdcmpeq>
 80a34aa:	bf00      	nop

080a34ac <__aeabi_cdcmpeq>:
 80a34ac:	b501      	push	{r0, lr}
 80a34ae:	f7ff ffb7 	bl	80a3420 <__cmpdf2>
 80a34b2:	2800      	cmp	r0, #0
 80a34b4:	bf48      	it	mi
 80a34b6:	f110 0f00 	cmnmi.w	r0, #0
 80a34ba:	bd01      	pop	{r0, pc}

080a34bc <__aeabi_dcmpeq>:
 80a34bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a34c0:	f7ff fff4 	bl	80a34ac <__aeabi_cdcmpeq>
 80a34c4:	bf0c      	ite	eq
 80a34c6:	2001      	moveq	r0, #1
 80a34c8:	2000      	movne	r0, #0
 80a34ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a34ce:	bf00      	nop

080a34d0 <__aeabi_dcmplt>:
 80a34d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a34d4:	f7ff ffea 	bl	80a34ac <__aeabi_cdcmpeq>
 80a34d8:	bf34      	ite	cc
 80a34da:	2001      	movcc	r0, #1
 80a34dc:	2000      	movcs	r0, #0
 80a34de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a34e2:	bf00      	nop

080a34e4 <__aeabi_dcmple>:
 80a34e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a34e8:	f7ff ffe0 	bl	80a34ac <__aeabi_cdcmpeq>
 80a34ec:	bf94      	ite	ls
 80a34ee:	2001      	movls	r0, #1
 80a34f0:	2000      	movhi	r0, #0
 80a34f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a34f6:	bf00      	nop

080a34f8 <__aeabi_dcmpge>:
 80a34f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a34fc:	f7ff ffce 	bl	80a349c <__aeabi_cdrcmple>
 80a3500:	bf94      	ite	ls
 80a3502:	2001      	movls	r0, #1
 80a3504:	2000      	movhi	r0, #0
 80a3506:	f85d fb08 	ldr.w	pc, [sp], #8
 80a350a:	bf00      	nop

080a350c <__aeabi_dcmpgt>:
 80a350c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3510:	f7ff ffc4 	bl	80a349c <__aeabi_cdrcmple>
 80a3514:	bf34      	ite	cc
 80a3516:	2001      	movcc	r0, #1
 80a3518:	2000      	movcs	r0, #0
 80a351a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a351e:	bf00      	nop

080a3520 <__aeabi_dcmpun>:
 80a3520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3528:	d102      	bne.n	80a3530 <__aeabi_dcmpun+0x10>
 80a352a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a352e:	d10a      	bne.n	80a3546 <__aeabi_dcmpun+0x26>
 80a3530:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3534:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3538:	d102      	bne.n	80a3540 <__aeabi_dcmpun+0x20>
 80a353a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a353e:	d102      	bne.n	80a3546 <__aeabi_dcmpun+0x26>
 80a3540:	f04f 0000 	mov.w	r0, #0
 80a3544:	4770      	bx	lr
 80a3546:	f04f 0001 	mov.w	r0, #1
 80a354a:	4770      	bx	lr

080a354c <__aeabi_d2iz>:
 80a354c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3550:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3554:	d215      	bcs.n	80a3582 <__aeabi_d2iz+0x36>
 80a3556:	d511      	bpl.n	80a357c <__aeabi_d2iz+0x30>
 80a3558:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a355c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3560:	d912      	bls.n	80a3588 <__aeabi_d2iz+0x3c>
 80a3562:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a356a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a356e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3572:	fa23 f002 	lsr.w	r0, r3, r2
 80a3576:	bf18      	it	ne
 80a3578:	4240      	negne	r0, r0
 80a357a:	4770      	bx	lr
 80a357c:	f04f 0000 	mov.w	r0, #0
 80a3580:	4770      	bx	lr
 80a3582:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3586:	d105      	bne.n	80a3594 <__aeabi_d2iz+0x48>
 80a3588:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a358c:	bf08      	it	eq
 80a358e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3592:	4770      	bx	lr
 80a3594:	f04f 0000 	mov.w	r0, #0
 80a3598:	4770      	bx	lr
 80a359a:	bf00      	nop

080a359c <__aeabi_d2uiz>:
 80a359c:	004a      	lsls	r2, r1, #1
 80a359e:	d211      	bcs.n	80a35c4 <__aeabi_d2uiz+0x28>
 80a35a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a35a4:	d211      	bcs.n	80a35ca <__aeabi_d2uiz+0x2e>
 80a35a6:	d50d      	bpl.n	80a35c4 <__aeabi_d2uiz+0x28>
 80a35a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a35ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a35b0:	d40e      	bmi.n	80a35d0 <__aeabi_d2uiz+0x34>
 80a35b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a35b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a35ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a35be:	fa23 f002 	lsr.w	r0, r3, r2
 80a35c2:	4770      	bx	lr
 80a35c4:	f04f 0000 	mov.w	r0, #0
 80a35c8:	4770      	bx	lr
 80a35ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a35ce:	d102      	bne.n	80a35d6 <__aeabi_d2uiz+0x3a>
 80a35d0:	f04f 30ff 	mov.w	r0, #4294967295
 80a35d4:	4770      	bx	lr
 80a35d6:	f04f 0000 	mov.w	r0, #0
 80a35da:	4770      	bx	lr

080a35dc <__aeabi_frsub>:
 80a35dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a35e0:	e002      	b.n	80a35e8 <__addsf3>
 80a35e2:	bf00      	nop

080a35e4 <__aeabi_fsub>:
 80a35e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a35e8 <__addsf3>:
 80a35e8:	0042      	lsls	r2, r0, #1
 80a35ea:	bf1f      	itttt	ne
 80a35ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a35f0:	ea92 0f03 	teqne	r2, r3
 80a35f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a35f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a35fc:	d06a      	beq.n	80a36d4 <__addsf3+0xec>
 80a35fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3602:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3606:	bfc1      	itttt	gt
 80a3608:	18d2      	addgt	r2, r2, r3
 80a360a:	4041      	eorgt	r1, r0
 80a360c:	4048      	eorgt	r0, r1
 80a360e:	4041      	eorgt	r1, r0
 80a3610:	bfb8      	it	lt
 80a3612:	425b      	neglt	r3, r3
 80a3614:	2b19      	cmp	r3, #25
 80a3616:	bf88      	it	hi
 80a3618:	4770      	bxhi	lr
 80a361a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a361e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3622:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3626:	bf18      	it	ne
 80a3628:	4240      	negne	r0, r0
 80a362a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a362e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3632:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3636:	bf18      	it	ne
 80a3638:	4249      	negne	r1, r1
 80a363a:	ea92 0f03 	teq	r2, r3
 80a363e:	d03f      	beq.n	80a36c0 <__addsf3+0xd8>
 80a3640:	f1a2 0201 	sub.w	r2, r2, #1
 80a3644:	fa41 fc03 	asr.w	ip, r1, r3
 80a3648:	eb10 000c 	adds.w	r0, r0, ip
 80a364c:	f1c3 0320 	rsb	r3, r3, #32
 80a3650:	fa01 f103 	lsl.w	r1, r1, r3
 80a3654:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3658:	d502      	bpl.n	80a3660 <__addsf3+0x78>
 80a365a:	4249      	negs	r1, r1
 80a365c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3660:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3664:	d313      	bcc.n	80a368e <__addsf3+0xa6>
 80a3666:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a366a:	d306      	bcc.n	80a367a <__addsf3+0x92>
 80a366c:	0840      	lsrs	r0, r0, #1
 80a366e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3672:	f102 0201 	add.w	r2, r2, #1
 80a3676:	2afe      	cmp	r2, #254	; 0xfe
 80a3678:	d251      	bcs.n	80a371e <__addsf3+0x136>
 80a367a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a367e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3682:	bf08      	it	eq
 80a3684:	f020 0001 	biceq.w	r0, r0, #1
 80a3688:	ea40 0003 	orr.w	r0, r0, r3
 80a368c:	4770      	bx	lr
 80a368e:	0049      	lsls	r1, r1, #1
 80a3690:	eb40 0000 	adc.w	r0, r0, r0
 80a3694:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3698:	f1a2 0201 	sub.w	r2, r2, #1
 80a369c:	d1ed      	bne.n	80a367a <__addsf3+0x92>
 80a369e:	fab0 fc80 	clz	ip, r0
 80a36a2:	f1ac 0c08 	sub.w	ip, ip, #8
 80a36a6:	ebb2 020c 	subs.w	r2, r2, ip
 80a36aa:	fa00 f00c 	lsl.w	r0, r0, ip
 80a36ae:	bfaa      	itet	ge
 80a36b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a36b4:	4252      	neglt	r2, r2
 80a36b6:	4318      	orrge	r0, r3
 80a36b8:	bfbc      	itt	lt
 80a36ba:	40d0      	lsrlt	r0, r2
 80a36bc:	4318      	orrlt	r0, r3
 80a36be:	4770      	bx	lr
 80a36c0:	f092 0f00 	teq	r2, #0
 80a36c4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a36c8:	bf06      	itte	eq
 80a36ca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a36ce:	3201      	addeq	r2, #1
 80a36d0:	3b01      	subne	r3, #1
 80a36d2:	e7b5      	b.n	80a3640 <__addsf3+0x58>
 80a36d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a36d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a36dc:	bf18      	it	ne
 80a36de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a36e2:	d021      	beq.n	80a3728 <__addsf3+0x140>
 80a36e4:	ea92 0f03 	teq	r2, r3
 80a36e8:	d004      	beq.n	80a36f4 <__addsf3+0x10c>
 80a36ea:	f092 0f00 	teq	r2, #0
 80a36ee:	bf08      	it	eq
 80a36f0:	4608      	moveq	r0, r1
 80a36f2:	4770      	bx	lr
 80a36f4:	ea90 0f01 	teq	r0, r1
 80a36f8:	bf1c      	itt	ne
 80a36fa:	2000      	movne	r0, #0
 80a36fc:	4770      	bxne	lr
 80a36fe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3702:	d104      	bne.n	80a370e <__addsf3+0x126>
 80a3704:	0040      	lsls	r0, r0, #1
 80a3706:	bf28      	it	cs
 80a3708:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a370c:	4770      	bx	lr
 80a370e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3712:	bf3c      	itt	cc
 80a3714:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3718:	4770      	bxcc	lr
 80a371a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a371e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3722:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3726:	4770      	bx	lr
 80a3728:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a372c:	bf16      	itet	ne
 80a372e:	4608      	movne	r0, r1
 80a3730:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3734:	4601      	movne	r1, r0
 80a3736:	0242      	lsls	r2, r0, #9
 80a3738:	bf06      	itte	eq
 80a373a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a373e:	ea90 0f01 	teqeq	r0, r1
 80a3742:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3746:	4770      	bx	lr

080a3748 <__aeabi_ui2f>:
 80a3748:	f04f 0300 	mov.w	r3, #0
 80a374c:	e004      	b.n	80a3758 <__aeabi_i2f+0x8>
 80a374e:	bf00      	nop

080a3750 <__aeabi_i2f>:
 80a3750:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3754:	bf48      	it	mi
 80a3756:	4240      	negmi	r0, r0
 80a3758:	ea5f 0c00 	movs.w	ip, r0
 80a375c:	bf08      	it	eq
 80a375e:	4770      	bxeq	lr
 80a3760:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3764:	4601      	mov	r1, r0
 80a3766:	f04f 0000 	mov.w	r0, #0
 80a376a:	e01c      	b.n	80a37a6 <__aeabi_l2f+0x2a>

080a376c <__aeabi_ul2f>:
 80a376c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3770:	bf08      	it	eq
 80a3772:	4770      	bxeq	lr
 80a3774:	f04f 0300 	mov.w	r3, #0
 80a3778:	e00a      	b.n	80a3790 <__aeabi_l2f+0x14>
 80a377a:	bf00      	nop

080a377c <__aeabi_l2f>:
 80a377c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3780:	bf08      	it	eq
 80a3782:	4770      	bxeq	lr
 80a3784:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3788:	d502      	bpl.n	80a3790 <__aeabi_l2f+0x14>
 80a378a:	4240      	negs	r0, r0
 80a378c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3790:	ea5f 0c01 	movs.w	ip, r1
 80a3794:	bf02      	ittt	eq
 80a3796:	4684      	moveq	ip, r0
 80a3798:	4601      	moveq	r1, r0
 80a379a:	2000      	moveq	r0, #0
 80a379c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a37a0:	bf08      	it	eq
 80a37a2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a37a6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a37aa:	fabc f28c 	clz	r2, ip
 80a37ae:	3a08      	subs	r2, #8
 80a37b0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a37b4:	db10      	blt.n	80a37d8 <__aeabi_l2f+0x5c>
 80a37b6:	fa01 fc02 	lsl.w	ip, r1, r2
 80a37ba:	4463      	add	r3, ip
 80a37bc:	fa00 fc02 	lsl.w	ip, r0, r2
 80a37c0:	f1c2 0220 	rsb	r2, r2, #32
 80a37c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a37c8:	fa20 f202 	lsr.w	r2, r0, r2
 80a37cc:	eb43 0002 	adc.w	r0, r3, r2
 80a37d0:	bf08      	it	eq
 80a37d2:	f020 0001 	biceq.w	r0, r0, #1
 80a37d6:	4770      	bx	lr
 80a37d8:	f102 0220 	add.w	r2, r2, #32
 80a37dc:	fa01 fc02 	lsl.w	ip, r1, r2
 80a37e0:	f1c2 0220 	rsb	r2, r2, #32
 80a37e4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a37e8:	fa21 f202 	lsr.w	r2, r1, r2
 80a37ec:	eb43 0002 	adc.w	r0, r3, r2
 80a37f0:	bf08      	it	eq
 80a37f2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a37f6:	4770      	bx	lr

080a37f8 <__aeabi_fmul>:
 80a37f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a37fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3800:	bf1e      	ittt	ne
 80a3802:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3806:	ea92 0f0c 	teqne	r2, ip
 80a380a:	ea93 0f0c 	teqne	r3, ip
 80a380e:	d06f      	beq.n	80a38f0 <__aeabi_fmul+0xf8>
 80a3810:	441a      	add	r2, r3
 80a3812:	ea80 0c01 	eor.w	ip, r0, r1
 80a3816:	0240      	lsls	r0, r0, #9
 80a3818:	bf18      	it	ne
 80a381a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a381e:	d01e      	beq.n	80a385e <__aeabi_fmul+0x66>
 80a3820:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3824:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3828:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a382c:	fba0 3101 	umull	r3, r1, r0, r1
 80a3830:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3834:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3838:	bf3e      	ittt	cc
 80a383a:	0049      	lslcc	r1, r1, #1
 80a383c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3840:	005b      	lslcc	r3, r3, #1
 80a3842:	ea40 0001 	orr.w	r0, r0, r1
 80a3846:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a384a:	2afd      	cmp	r2, #253	; 0xfd
 80a384c:	d81d      	bhi.n	80a388a <__aeabi_fmul+0x92>
 80a384e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3852:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3856:	bf08      	it	eq
 80a3858:	f020 0001 	biceq.w	r0, r0, #1
 80a385c:	4770      	bx	lr
 80a385e:	f090 0f00 	teq	r0, #0
 80a3862:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3866:	bf08      	it	eq
 80a3868:	0249      	lsleq	r1, r1, #9
 80a386a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a386e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3872:	3a7f      	subs	r2, #127	; 0x7f
 80a3874:	bfc2      	ittt	gt
 80a3876:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a387a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a387e:	4770      	bxgt	lr
 80a3880:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3884:	f04f 0300 	mov.w	r3, #0
 80a3888:	3a01      	subs	r2, #1
 80a388a:	dc5d      	bgt.n	80a3948 <__aeabi_fmul+0x150>
 80a388c:	f112 0f19 	cmn.w	r2, #25
 80a3890:	bfdc      	itt	le
 80a3892:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3896:	4770      	bxle	lr
 80a3898:	f1c2 0200 	rsb	r2, r2, #0
 80a389c:	0041      	lsls	r1, r0, #1
 80a389e:	fa21 f102 	lsr.w	r1, r1, r2
 80a38a2:	f1c2 0220 	rsb	r2, r2, #32
 80a38a6:	fa00 fc02 	lsl.w	ip, r0, r2
 80a38aa:	ea5f 0031 	movs.w	r0, r1, rrx
 80a38ae:	f140 0000 	adc.w	r0, r0, #0
 80a38b2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a38b6:	bf08      	it	eq
 80a38b8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a38bc:	4770      	bx	lr
 80a38be:	f092 0f00 	teq	r2, #0
 80a38c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a38c6:	bf02      	ittt	eq
 80a38c8:	0040      	lsleq	r0, r0, #1
 80a38ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a38ce:	3a01      	subeq	r2, #1
 80a38d0:	d0f9      	beq.n	80a38c6 <__aeabi_fmul+0xce>
 80a38d2:	ea40 000c 	orr.w	r0, r0, ip
 80a38d6:	f093 0f00 	teq	r3, #0
 80a38da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a38de:	bf02      	ittt	eq
 80a38e0:	0049      	lsleq	r1, r1, #1
 80a38e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a38e6:	3b01      	subeq	r3, #1
 80a38e8:	d0f9      	beq.n	80a38de <__aeabi_fmul+0xe6>
 80a38ea:	ea41 010c 	orr.w	r1, r1, ip
 80a38ee:	e78f      	b.n	80a3810 <__aeabi_fmul+0x18>
 80a38f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a38f4:	ea92 0f0c 	teq	r2, ip
 80a38f8:	bf18      	it	ne
 80a38fa:	ea93 0f0c 	teqne	r3, ip
 80a38fe:	d00a      	beq.n	80a3916 <__aeabi_fmul+0x11e>
 80a3900:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3904:	bf18      	it	ne
 80a3906:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a390a:	d1d8      	bne.n	80a38be <__aeabi_fmul+0xc6>
 80a390c:	ea80 0001 	eor.w	r0, r0, r1
 80a3910:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3914:	4770      	bx	lr
 80a3916:	f090 0f00 	teq	r0, #0
 80a391a:	bf17      	itett	ne
 80a391c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3920:	4608      	moveq	r0, r1
 80a3922:	f091 0f00 	teqne	r1, #0
 80a3926:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a392a:	d014      	beq.n	80a3956 <__aeabi_fmul+0x15e>
 80a392c:	ea92 0f0c 	teq	r2, ip
 80a3930:	d101      	bne.n	80a3936 <__aeabi_fmul+0x13e>
 80a3932:	0242      	lsls	r2, r0, #9
 80a3934:	d10f      	bne.n	80a3956 <__aeabi_fmul+0x15e>
 80a3936:	ea93 0f0c 	teq	r3, ip
 80a393a:	d103      	bne.n	80a3944 <__aeabi_fmul+0x14c>
 80a393c:	024b      	lsls	r3, r1, #9
 80a393e:	bf18      	it	ne
 80a3940:	4608      	movne	r0, r1
 80a3942:	d108      	bne.n	80a3956 <__aeabi_fmul+0x15e>
 80a3944:	ea80 0001 	eor.w	r0, r0, r1
 80a3948:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a394c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3950:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3954:	4770      	bx	lr
 80a3956:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a395a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a395e:	4770      	bx	lr

080a3960 <__aeabi_fdiv>:
 80a3960:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3964:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3968:	bf1e      	ittt	ne
 80a396a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a396e:	ea92 0f0c 	teqne	r2, ip
 80a3972:	ea93 0f0c 	teqne	r3, ip
 80a3976:	d069      	beq.n	80a3a4c <__aeabi_fdiv+0xec>
 80a3978:	eba2 0203 	sub.w	r2, r2, r3
 80a397c:	ea80 0c01 	eor.w	ip, r0, r1
 80a3980:	0249      	lsls	r1, r1, #9
 80a3982:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3986:	d037      	beq.n	80a39f8 <__aeabi_fdiv+0x98>
 80a3988:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a398c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3990:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3994:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3998:	428b      	cmp	r3, r1
 80a399a:	bf38      	it	cc
 80a399c:	005b      	lslcc	r3, r3, #1
 80a399e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a39a2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a39a6:	428b      	cmp	r3, r1
 80a39a8:	bf24      	itt	cs
 80a39aa:	1a5b      	subcs	r3, r3, r1
 80a39ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80a39b0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a39b4:	bf24      	itt	cs
 80a39b6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a39ba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a39be:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a39c2:	bf24      	itt	cs
 80a39c4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a39c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a39cc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a39d0:	bf24      	itt	cs
 80a39d2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a39d6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a39da:	011b      	lsls	r3, r3, #4
 80a39dc:	bf18      	it	ne
 80a39de:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a39e2:	d1e0      	bne.n	80a39a6 <__aeabi_fdiv+0x46>
 80a39e4:	2afd      	cmp	r2, #253	; 0xfd
 80a39e6:	f63f af50 	bhi.w	80a388a <__aeabi_fmul+0x92>
 80a39ea:	428b      	cmp	r3, r1
 80a39ec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a39f0:	bf08      	it	eq
 80a39f2:	f020 0001 	biceq.w	r0, r0, #1
 80a39f6:	4770      	bx	lr
 80a39f8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a39fc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3a00:	327f      	adds	r2, #127	; 0x7f
 80a3a02:	bfc2      	ittt	gt
 80a3a04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3a08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3a0c:	4770      	bxgt	lr
 80a3a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3a12:	f04f 0300 	mov.w	r3, #0
 80a3a16:	3a01      	subs	r2, #1
 80a3a18:	e737      	b.n	80a388a <__aeabi_fmul+0x92>
 80a3a1a:	f092 0f00 	teq	r2, #0
 80a3a1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3a22:	bf02      	ittt	eq
 80a3a24:	0040      	lsleq	r0, r0, #1
 80a3a26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3a2a:	3a01      	subeq	r2, #1
 80a3a2c:	d0f9      	beq.n	80a3a22 <__aeabi_fdiv+0xc2>
 80a3a2e:	ea40 000c 	orr.w	r0, r0, ip
 80a3a32:	f093 0f00 	teq	r3, #0
 80a3a36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3a3a:	bf02      	ittt	eq
 80a3a3c:	0049      	lsleq	r1, r1, #1
 80a3a3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3a42:	3b01      	subeq	r3, #1
 80a3a44:	d0f9      	beq.n	80a3a3a <__aeabi_fdiv+0xda>
 80a3a46:	ea41 010c 	orr.w	r1, r1, ip
 80a3a4a:	e795      	b.n	80a3978 <__aeabi_fdiv+0x18>
 80a3a4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3a50:	ea92 0f0c 	teq	r2, ip
 80a3a54:	d108      	bne.n	80a3a68 <__aeabi_fdiv+0x108>
 80a3a56:	0242      	lsls	r2, r0, #9
 80a3a58:	f47f af7d 	bne.w	80a3956 <__aeabi_fmul+0x15e>
 80a3a5c:	ea93 0f0c 	teq	r3, ip
 80a3a60:	f47f af70 	bne.w	80a3944 <__aeabi_fmul+0x14c>
 80a3a64:	4608      	mov	r0, r1
 80a3a66:	e776      	b.n	80a3956 <__aeabi_fmul+0x15e>
 80a3a68:	ea93 0f0c 	teq	r3, ip
 80a3a6c:	d104      	bne.n	80a3a78 <__aeabi_fdiv+0x118>
 80a3a6e:	024b      	lsls	r3, r1, #9
 80a3a70:	f43f af4c 	beq.w	80a390c <__aeabi_fmul+0x114>
 80a3a74:	4608      	mov	r0, r1
 80a3a76:	e76e      	b.n	80a3956 <__aeabi_fmul+0x15e>
 80a3a78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3a7c:	bf18      	it	ne
 80a3a7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3a82:	d1ca      	bne.n	80a3a1a <__aeabi_fdiv+0xba>
 80a3a84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3a88:	f47f af5c 	bne.w	80a3944 <__aeabi_fmul+0x14c>
 80a3a8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3a90:	f47f af3c 	bne.w	80a390c <__aeabi_fmul+0x114>
 80a3a94:	e75f      	b.n	80a3956 <__aeabi_fmul+0x15e>
 80a3a96:	bf00      	nop

080a3a98 <__aeabi_f2iz>:
 80a3a98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3a9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a3aa0:	d30f      	bcc.n	80a3ac2 <__aeabi_f2iz+0x2a>
 80a3aa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a3aa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a3aaa:	d90d      	bls.n	80a3ac8 <__aeabi_f2iz+0x30>
 80a3aac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a3ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3ab4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3ab8:	fa23 f002 	lsr.w	r0, r3, r2
 80a3abc:	bf18      	it	ne
 80a3abe:	4240      	negne	r0, r0
 80a3ac0:	4770      	bx	lr
 80a3ac2:	f04f 0000 	mov.w	r0, #0
 80a3ac6:	4770      	bx	lr
 80a3ac8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a3acc:	d101      	bne.n	80a3ad2 <__aeabi_f2iz+0x3a>
 80a3ace:	0242      	lsls	r2, r0, #9
 80a3ad0:	d105      	bne.n	80a3ade <__aeabi_f2iz+0x46>
 80a3ad2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a3ad6:	bf08      	it	eq
 80a3ad8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3adc:	4770      	bx	lr
 80a3ade:	f04f 0000 	mov.w	r0, #0
 80a3ae2:	4770      	bx	lr

080a3ae4 <__aeabi_uldivmod>:
 80a3ae4:	b953      	cbnz	r3, 80a3afc <__aeabi_uldivmod+0x18>
 80a3ae6:	b94a      	cbnz	r2, 80a3afc <__aeabi_uldivmod+0x18>
 80a3ae8:	2900      	cmp	r1, #0
 80a3aea:	bf08      	it	eq
 80a3aec:	2800      	cmpeq	r0, #0
 80a3aee:	bf1c      	itt	ne
 80a3af0:	f04f 31ff 	movne.w	r1, #4294967295
 80a3af4:	f04f 30ff 	movne.w	r0, #4294967295
 80a3af8:	f000 b9a6 	b.w	80a3e48 <__aeabi_idiv0>
 80a3afc:	f1ad 0c08 	sub.w	ip, sp, #8
 80a3b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3b04:	f000 f82a 	bl	80a3b5c <__udivmoddi4>
 80a3b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3b10:	b004      	add	sp, #16
 80a3b12:	4770      	bx	lr

080a3b14 <__aeabi_d2ulz>:
 80a3b14:	b5d0      	push	{r4, r6, r7, lr}
 80a3b16:	2200      	movs	r2, #0
 80a3b18:	4b0e      	ldr	r3, [pc, #56]	; (80a3b54 <__aeabi_d2ulz+0x40>)
 80a3b1a:	4606      	mov	r6, r0
 80a3b1c:	460f      	mov	r7, r1
 80a3b1e:	f7ff fa65 	bl	80a2fec <__aeabi_dmul>
 80a3b22:	f7ff fd3b 	bl	80a359c <__aeabi_d2uiz>
 80a3b26:	4604      	mov	r4, r0
 80a3b28:	f7ff f9ea 	bl	80a2f00 <__aeabi_ui2d>
 80a3b2c:	2200      	movs	r2, #0
 80a3b2e:	4b0a      	ldr	r3, [pc, #40]	; (80a3b58 <__aeabi_d2ulz+0x44>)
 80a3b30:	f7ff fa5c 	bl	80a2fec <__aeabi_dmul>
 80a3b34:	4602      	mov	r2, r0
 80a3b36:	460b      	mov	r3, r1
 80a3b38:	4630      	mov	r0, r6
 80a3b3a:	4639      	mov	r1, r7
 80a3b3c:	f7ff f8a2 	bl	80a2c84 <__aeabi_dsub>
 80a3b40:	f7ff fd2c 	bl	80a359c <__aeabi_d2uiz>
 80a3b44:	4623      	mov	r3, r4
 80a3b46:	2200      	movs	r2, #0
 80a3b48:	ea42 0200 	orr.w	r2, r2, r0
 80a3b4c:	4610      	mov	r0, r2
 80a3b4e:	4619      	mov	r1, r3
 80a3b50:	bdd0      	pop	{r4, r6, r7, pc}
 80a3b52:	bf00      	nop
 80a3b54:	3df00000 	.word	0x3df00000
 80a3b58:	41f00000 	.word	0x41f00000

080a3b5c <__udivmoddi4>:
 80a3b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3b60:	468c      	mov	ip, r1
 80a3b62:	460c      	mov	r4, r1
 80a3b64:	4605      	mov	r5, r0
 80a3b66:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a3b68:	2b00      	cmp	r3, #0
 80a3b6a:	d14f      	bne.n	80a3c0c <__udivmoddi4+0xb0>
 80a3b6c:	428a      	cmp	r2, r1
 80a3b6e:	4617      	mov	r7, r2
 80a3b70:	d96b      	bls.n	80a3c4a <__udivmoddi4+0xee>
 80a3b72:	fab2 fe82 	clz	lr, r2
 80a3b76:	f1be 0f00 	cmp.w	lr, #0
 80a3b7a:	d00b      	beq.n	80a3b94 <__udivmoddi4+0x38>
 80a3b7c:	f1ce 0520 	rsb	r5, lr, #32
 80a3b80:	fa20 f505 	lsr.w	r5, r0, r5
 80a3b84:	fa01 f30e 	lsl.w	r3, r1, lr
 80a3b88:	ea45 0c03 	orr.w	ip, r5, r3
 80a3b8c:	fa02 f70e 	lsl.w	r7, r2, lr
 80a3b90:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3b94:	0c39      	lsrs	r1, r7, #16
 80a3b96:	fbbc f0f1 	udiv	r0, ip, r1
 80a3b9a:	b2ba      	uxth	r2, r7
 80a3b9c:	fb01 c310 	mls	r3, r1, r0, ip
 80a3ba0:	fb00 f802 	mul.w	r8, r0, r2
 80a3ba4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3ba8:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a3bac:	45a0      	cmp	r8, r4
 80a3bae:	d909      	bls.n	80a3bc4 <__udivmoddi4+0x68>
 80a3bb0:	19e4      	adds	r4, r4, r7
 80a3bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 80a3bb6:	f080 8128 	bcs.w	80a3e0a <__udivmoddi4+0x2ae>
 80a3bba:	45a0      	cmp	r8, r4
 80a3bbc:	f240 8125 	bls.w	80a3e0a <__udivmoddi4+0x2ae>
 80a3bc0:	3802      	subs	r0, #2
 80a3bc2:	443c      	add	r4, r7
 80a3bc4:	ebc8 0404 	rsb	r4, r8, r4
 80a3bc8:	fbb4 f3f1 	udiv	r3, r4, r1
 80a3bcc:	fb01 4c13 	mls	ip, r1, r3, r4
 80a3bd0:	fb03 f202 	mul.w	r2, r3, r2
 80a3bd4:	b2ac      	uxth	r4, r5
 80a3bd6:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a3bda:	428a      	cmp	r2, r1
 80a3bdc:	d909      	bls.n	80a3bf2 <__udivmoddi4+0x96>
 80a3bde:	19c9      	adds	r1, r1, r7
 80a3be0:	f103 34ff 	add.w	r4, r3, #4294967295
 80a3be4:	f080 810f 	bcs.w	80a3e06 <__udivmoddi4+0x2aa>
 80a3be8:	428a      	cmp	r2, r1
 80a3bea:	f240 810c 	bls.w	80a3e06 <__udivmoddi4+0x2aa>
 80a3bee:	3b02      	subs	r3, #2
 80a3bf0:	4439      	add	r1, r7
 80a3bf2:	1a8a      	subs	r2, r1, r2
 80a3bf4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a3bf8:	2100      	movs	r1, #0
 80a3bfa:	2e00      	cmp	r6, #0
 80a3bfc:	d063      	beq.n	80a3cc6 <__udivmoddi4+0x16a>
 80a3bfe:	fa22 f20e 	lsr.w	r2, r2, lr
 80a3c02:	2300      	movs	r3, #0
 80a3c04:	e886 000c 	stmia.w	r6, {r2, r3}
 80a3c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3c0c:	428b      	cmp	r3, r1
 80a3c0e:	d907      	bls.n	80a3c20 <__udivmoddi4+0xc4>
 80a3c10:	2e00      	cmp	r6, #0
 80a3c12:	d056      	beq.n	80a3cc2 <__udivmoddi4+0x166>
 80a3c14:	2100      	movs	r1, #0
 80a3c16:	e886 0011 	stmia.w	r6, {r0, r4}
 80a3c1a:	4608      	mov	r0, r1
 80a3c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3c20:	fab3 f183 	clz	r1, r3
 80a3c24:	2900      	cmp	r1, #0
 80a3c26:	f040 8093 	bne.w	80a3d50 <__udivmoddi4+0x1f4>
 80a3c2a:	42a3      	cmp	r3, r4
 80a3c2c:	d302      	bcc.n	80a3c34 <__udivmoddi4+0xd8>
 80a3c2e:	4282      	cmp	r2, r0
 80a3c30:	f200 80fe 	bhi.w	80a3e30 <__udivmoddi4+0x2d4>
 80a3c34:	1a85      	subs	r5, r0, r2
 80a3c36:	eb64 0303 	sbc.w	r3, r4, r3
 80a3c3a:	469c      	mov	ip, r3
 80a3c3c:	2001      	movs	r0, #1
 80a3c3e:	2e00      	cmp	r6, #0
 80a3c40:	d041      	beq.n	80a3cc6 <__udivmoddi4+0x16a>
 80a3c42:	e886 1020 	stmia.w	r6, {r5, ip}
 80a3c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3c4a:	b912      	cbnz	r2, 80a3c52 <__udivmoddi4+0xf6>
 80a3c4c:	2701      	movs	r7, #1
 80a3c4e:	fbb7 f7f2 	udiv	r7, r7, r2
 80a3c52:	fab7 fe87 	clz	lr, r7
 80a3c56:	f1be 0f00 	cmp.w	lr, #0
 80a3c5a:	d136      	bne.n	80a3cca <__udivmoddi4+0x16e>
 80a3c5c:	1be4      	subs	r4, r4, r7
 80a3c5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3c62:	fa1f f987 	uxth.w	r9, r7
 80a3c66:	2101      	movs	r1, #1
 80a3c68:	fbb4 f3f8 	udiv	r3, r4, r8
 80a3c6c:	fb08 4413 	mls	r4, r8, r3, r4
 80a3c70:	fb09 f203 	mul.w	r2, r9, r3
 80a3c74:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3c78:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a3c7c:	42a2      	cmp	r2, r4
 80a3c7e:	d907      	bls.n	80a3c90 <__udivmoddi4+0x134>
 80a3c80:	19e4      	adds	r4, r4, r7
 80a3c82:	f103 30ff 	add.w	r0, r3, #4294967295
 80a3c86:	d202      	bcs.n	80a3c8e <__udivmoddi4+0x132>
 80a3c88:	42a2      	cmp	r2, r4
 80a3c8a:	f200 80d3 	bhi.w	80a3e34 <__udivmoddi4+0x2d8>
 80a3c8e:	4603      	mov	r3, r0
 80a3c90:	1aa4      	subs	r4, r4, r2
 80a3c92:	fbb4 f0f8 	udiv	r0, r4, r8
 80a3c96:	fb08 4810 	mls	r8, r8, r0, r4
 80a3c9a:	fb09 f900 	mul.w	r9, r9, r0
 80a3c9e:	b2ac      	uxth	r4, r5
 80a3ca0:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a3ca4:	4591      	cmp	r9, r2
 80a3ca6:	d907      	bls.n	80a3cb8 <__udivmoddi4+0x15c>
 80a3ca8:	19d2      	adds	r2, r2, r7
 80a3caa:	f100 34ff 	add.w	r4, r0, #4294967295
 80a3cae:	d202      	bcs.n	80a3cb6 <__udivmoddi4+0x15a>
 80a3cb0:	4591      	cmp	r9, r2
 80a3cb2:	f200 80ba 	bhi.w	80a3e2a <__udivmoddi4+0x2ce>
 80a3cb6:	4620      	mov	r0, r4
 80a3cb8:	ebc9 0202 	rsb	r2, r9, r2
 80a3cbc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a3cc0:	e79b      	b.n	80a3bfa <__udivmoddi4+0x9e>
 80a3cc2:	4631      	mov	r1, r6
 80a3cc4:	4630      	mov	r0, r6
 80a3cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3cca:	fa07 f70e 	lsl.w	r7, r7, lr
 80a3cce:	f1ce 0c20 	rsb	ip, lr, #32
 80a3cd2:	fa24 f30c 	lsr.w	r3, r4, ip
 80a3cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3cda:	fbb3 faf8 	udiv	sl, r3, r8
 80a3cde:	fa1f f987 	uxth.w	r9, r7
 80a3ce2:	fb08 351a 	mls	r5, r8, sl, r3
 80a3ce6:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3cea:	fa04 f40e 	lsl.w	r4, r4, lr
 80a3cee:	fb0a fb09 	mul.w	fp, sl, r9
 80a3cf2:	ea4c 0c04 	orr.w	ip, ip, r4
 80a3cf6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a3cfa:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a3cfe:	459b      	cmp	fp, r3
 80a3d00:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3d04:	d90a      	bls.n	80a3d1c <__udivmoddi4+0x1c0>
 80a3d06:	19db      	adds	r3, r3, r7
 80a3d08:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a3d0c:	f080 808b 	bcs.w	80a3e26 <__udivmoddi4+0x2ca>
 80a3d10:	459b      	cmp	fp, r3
 80a3d12:	f240 8088 	bls.w	80a3e26 <__udivmoddi4+0x2ca>
 80a3d16:	f1aa 0a02 	sub.w	sl, sl, #2
 80a3d1a:	443b      	add	r3, r7
 80a3d1c:	ebcb 0303 	rsb	r3, fp, r3
 80a3d20:	fbb3 f0f8 	udiv	r0, r3, r8
 80a3d24:	fb08 3310 	mls	r3, r8, r0, r3
 80a3d28:	fb00 f409 	mul.w	r4, r0, r9
 80a3d2c:	fa1f fc8c 	uxth.w	ip, ip
 80a3d30:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a3d34:	429c      	cmp	r4, r3
 80a3d36:	d907      	bls.n	80a3d48 <__udivmoddi4+0x1ec>
 80a3d38:	19db      	adds	r3, r3, r7
 80a3d3a:	f100 32ff 	add.w	r2, r0, #4294967295
 80a3d3e:	d26e      	bcs.n	80a3e1e <__udivmoddi4+0x2c2>
 80a3d40:	429c      	cmp	r4, r3
 80a3d42:	d96c      	bls.n	80a3e1e <__udivmoddi4+0x2c2>
 80a3d44:	3802      	subs	r0, #2
 80a3d46:	443b      	add	r3, r7
 80a3d48:	1b1c      	subs	r4, r3, r4
 80a3d4a:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a3d4e:	e78b      	b.n	80a3c68 <__udivmoddi4+0x10c>
 80a3d50:	f1c1 0e20 	rsb	lr, r1, #32
 80a3d54:	408b      	lsls	r3, r1
 80a3d56:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a3d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3d5e:	fa24 f70e 	lsr.w	r7, r4, lr
 80a3d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a3d66:	fbb7 faf9 	udiv	sl, r7, r9
 80a3d6a:	fa1f f38c 	uxth.w	r3, ip
 80a3d6e:	fb09 771a 	mls	r7, r9, sl, r7
 80a3d72:	fa20 f80e 	lsr.w	r8, r0, lr
 80a3d76:	408c      	lsls	r4, r1
 80a3d78:	fb0a f503 	mul.w	r5, sl, r3
 80a3d7c:	ea48 0404 	orr.w	r4, r8, r4
 80a3d80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a3d84:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a3d88:	42bd      	cmp	r5, r7
 80a3d8a:	fa02 f201 	lsl.w	r2, r2, r1
 80a3d8e:	fa00 fb01 	lsl.w	fp, r0, r1
 80a3d92:	d909      	bls.n	80a3da8 <__udivmoddi4+0x24c>
 80a3d94:	eb17 070c 	adds.w	r7, r7, ip
 80a3d98:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a3d9c:	d241      	bcs.n	80a3e22 <__udivmoddi4+0x2c6>
 80a3d9e:	42bd      	cmp	r5, r7
 80a3da0:	d93f      	bls.n	80a3e22 <__udivmoddi4+0x2c6>
 80a3da2:	f1aa 0a02 	sub.w	sl, sl, #2
 80a3da6:	4467      	add	r7, ip
 80a3da8:	1b7f      	subs	r7, r7, r5
 80a3daa:	fbb7 f5f9 	udiv	r5, r7, r9
 80a3dae:	fb09 7715 	mls	r7, r9, r5, r7
 80a3db2:	fb05 f303 	mul.w	r3, r5, r3
 80a3db6:	b2a4      	uxth	r4, r4
 80a3db8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a3dbc:	42bb      	cmp	r3, r7
 80a3dbe:	d908      	bls.n	80a3dd2 <__udivmoddi4+0x276>
 80a3dc0:	eb17 070c 	adds.w	r7, r7, ip
 80a3dc4:	f105 30ff 	add.w	r0, r5, #4294967295
 80a3dc8:	d227      	bcs.n	80a3e1a <__udivmoddi4+0x2be>
 80a3dca:	42bb      	cmp	r3, r7
 80a3dcc:	d925      	bls.n	80a3e1a <__udivmoddi4+0x2be>
 80a3dce:	3d02      	subs	r5, #2
 80a3dd0:	4467      	add	r7, ip
 80a3dd2:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a3dd6:	fba0 8902 	umull	r8, r9, r0, r2
 80a3dda:	1aff      	subs	r7, r7, r3
 80a3ddc:	454f      	cmp	r7, r9
 80a3dde:	4645      	mov	r5, r8
 80a3de0:	464c      	mov	r4, r9
 80a3de2:	d314      	bcc.n	80a3e0e <__udivmoddi4+0x2b2>
 80a3de4:	d029      	beq.n	80a3e3a <__udivmoddi4+0x2de>
 80a3de6:	b366      	cbz	r6, 80a3e42 <__udivmoddi4+0x2e6>
 80a3de8:	ebbb 0305 	subs.w	r3, fp, r5
 80a3dec:	eb67 0704 	sbc.w	r7, r7, r4
 80a3df0:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a3df4:	40cb      	lsrs	r3, r1
 80a3df6:	40cf      	lsrs	r7, r1
 80a3df8:	ea4e 0303 	orr.w	r3, lr, r3
 80a3dfc:	e886 0088 	stmia.w	r6, {r3, r7}
 80a3e00:	2100      	movs	r1, #0
 80a3e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3e06:	4623      	mov	r3, r4
 80a3e08:	e6f3      	b.n	80a3bf2 <__udivmoddi4+0x96>
 80a3e0a:	4618      	mov	r0, r3
 80a3e0c:	e6da      	b.n	80a3bc4 <__udivmoddi4+0x68>
 80a3e0e:	ebb8 0502 	subs.w	r5, r8, r2
 80a3e12:	eb69 040c 	sbc.w	r4, r9, ip
 80a3e16:	3801      	subs	r0, #1
 80a3e18:	e7e5      	b.n	80a3de6 <__udivmoddi4+0x28a>
 80a3e1a:	4605      	mov	r5, r0
 80a3e1c:	e7d9      	b.n	80a3dd2 <__udivmoddi4+0x276>
 80a3e1e:	4610      	mov	r0, r2
 80a3e20:	e792      	b.n	80a3d48 <__udivmoddi4+0x1ec>
 80a3e22:	4682      	mov	sl, r0
 80a3e24:	e7c0      	b.n	80a3da8 <__udivmoddi4+0x24c>
 80a3e26:	4692      	mov	sl, r2
 80a3e28:	e778      	b.n	80a3d1c <__udivmoddi4+0x1c0>
 80a3e2a:	3802      	subs	r0, #2
 80a3e2c:	443a      	add	r2, r7
 80a3e2e:	e743      	b.n	80a3cb8 <__udivmoddi4+0x15c>
 80a3e30:	4608      	mov	r0, r1
 80a3e32:	e704      	b.n	80a3c3e <__udivmoddi4+0xe2>
 80a3e34:	3b02      	subs	r3, #2
 80a3e36:	443c      	add	r4, r7
 80a3e38:	e72a      	b.n	80a3c90 <__udivmoddi4+0x134>
 80a3e3a:	45c3      	cmp	fp, r8
 80a3e3c:	d3e7      	bcc.n	80a3e0e <__udivmoddi4+0x2b2>
 80a3e3e:	463c      	mov	r4, r7
 80a3e40:	e7d1      	b.n	80a3de6 <__udivmoddi4+0x28a>
 80a3e42:	4631      	mov	r1, r6
 80a3e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3e48 <__aeabi_idiv0>:
 80a3e48:	4770      	bx	lr
 80a3e4a:	bf00      	nop

080a3e4c <__cxa_atexit>:
 80a3e4c:	b510      	push	{r4, lr}
 80a3e4e:	4c05      	ldr	r4, [pc, #20]	; (80a3e64 <__cxa_atexit+0x18>)
 80a3e50:	4613      	mov	r3, r2
 80a3e52:	b12c      	cbz	r4, 80a3e60 <__cxa_atexit+0x14>
 80a3e54:	460a      	mov	r2, r1
 80a3e56:	4601      	mov	r1, r0
 80a3e58:	2002      	movs	r0, #2
 80a3e5a:	f3af 8000 	nop.w
 80a3e5e:	bd10      	pop	{r4, pc}
 80a3e60:	4620      	mov	r0, r4
 80a3e62:	bd10      	pop	{r4, pc}
 80a3e64:	00000000 	.word	0x00000000

080a3e68 <memcpy>:
 80a3e68:	b510      	push	{r4, lr}
 80a3e6a:	1e43      	subs	r3, r0, #1
 80a3e6c:	440a      	add	r2, r1
 80a3e6e:	4291      	cmp	r1, r2
 80a3e70:	d004      	beq.n	80a3e7c <memcpy+0x14>
 80a3e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3e7a:	e7f8      	b.n	80a3e6e <memcpy+0x6>
 80a3e7c:	bd10      	pop	{r4, pc}

080a3e7e <memset>:
 80a3e7e:	4603      	mov	r3, r0
 80a3e80:	4402      	add	r2, r0
 80a3e82:	4293      	cmp	r3, r2
 80a3e84:	d002      	beq.n	80a3e8c <memset+0xe>
 80a3e86:	f803 1b01 	strb.w	r1, [r3], #1
 80a3e8a:	e7fa      	b.n	80a3e82 <memset+0x4>
 80a3e8c:	4770      	bx	lr
	...

080a3e90 <srand>:
 80a3e90:	b538      	push	{r3, r4, r5, lr}
 80a3e92:	4b12      	ldr	r3, [pc, #72]	; (80a3edc <srand+0x4c>)
 80a3e94:	4605      	mov	r5, r0
 80a3e96:	681c      	ldr	r4, [r3, #0]
 80a3e98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3e9a:	b9d3      	cbnz	r3, 80a3ed2 <srand+0x42>
 80a3e9c:	2018      	movs	r0, #24
 80a3e9e:	f7fd fda3 	bl	80a19e8 <malloc>
 80a3ea2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3ea6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3ea8:	8003      	strh	r3, [r0, #0]
 80a3eaa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3eae:	8043      	strh	r3, [r0, #2]
 80a3eb0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3eb4:	8083      	strh	r3, [r0, #4]
 80a3eb6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3eba:	80c3      	strh	r3, [r0, #6]
 80a3ebc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3ec0:	8103      	strh	r3, [r0, #8]
 80a3ec2:	2305      	movs	r3, #5
 80a3ec4:	8143      	strh	r3, [r0, #10]
 80a3ec6:	230b      	movs	r3, #11
 80a3ec8:	8183      	strh	r3, [r0, #12]
 80a3eca:	2201      	movs	r2, #1
 80a3ecc:	2300      	movs	r3, #0
 80a3ece:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3ed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3ed4:	2200      	movs	r2, #0
 80a3ed6:	611d      	str	r5, [r3, #16]
 80a3ed8:	615a      	str	r2, [r3, #20]
 80a3eda:	bd38      	pop	{r3, r4, r5, pc}
 80a3edc:	2000006c 	.word	0x2000006c

080a3ee0 <strlen>:
 80a3ee0:	4603      	mov	r3, r0
 80a3ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3ee6:	2a00      	cmp	r2, #0
 80a3ee8:	d1fb      	bne.n	80a3ee2 <strlen+0x2>
 80a3eea:	1a18      	subs	r0, r3, r0
 80a3eec:	3801      	subs	r0, #1
 80a3eee:	4770      	bx	lr

080a3ef0 <dynalib_user>:
 80a3ef0:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a3f00:	0000 0000                                   ....

080a3f04 <_ZL20FreeMono9pt7bBitmaps>:
 80a3f04:	a8aa ed0c 9224 2448 9148 e42f 7f89 5128     ....$.H$H./...(Q
 80a3f14:	4022 3e08 4062 0e30 8101 bec3 0808 1271     "@.>b@0.......q.
 80a3f24:	8023 b823 220e 7044 8138 0602 651a c846     #.#.."Dp8....eF.
 80a3f34:	e9ec 5a24 a9aa a940 5a55 1080 4b22 05e3     ..$Z..@.UZ.."K..
 80a3f44:	0011 2010 f147 0402 6b00 ff48 f000 0802     ... G....kH.....
 80a3f54:	6010 0481 2008 0241 0008 8a38 180c 6030     .`... A...8...0`
 80a3f64:	82c1 e088 2827 1042 2184 383e 088a 2010     ....'(B..!>8... 
 80a3f74:	0882 0361 7cf8 0206 1c02 0106 0101 3c42     ..a..|........B<
 80a3f84:	a218 8a92 bf28 2108 7cc0 0381 40e4 8140     ....(..!.|...@@.
 80a3f94:	8803 1ee0 0441 980b c1b0 88c2 fee0 0804     ....A...........
 80a3fa4:	4020 0482 2008 3840 0c8a 4714 4111 8c83      @... @8...G.A..
 80a3fb4:	38e0 1c8a 6818 81ce 1304 f0c0 6c0f d200     .8...h.......l..
 80a3fc4:	00d2 0403 6018 1860 0304 80ff 1f00 40f0     .....``........@
 80a3fd4:	0318 6000 6020 80c0 843d 3008 00c2 0000     ...` `..=..0....
 80a3fe4:	3c30 8246 b28e a2a2 809f 4080 3c3c 4001     0<F........@<<.@
 80a3ff4:	0928 1001 0f42 04c1 9e40 fe3c 9021 6748     (...B...@.<.!.Hg
 80a4004:	09e2 8102 ff41 3e80 f0b0 0830 0204 8000     ....A..>..0.....
 80a4014:	8f60 fe80 9021 1468 050a 8302 7f43 ff00     `...!.h.....C...
 80a4024:	9020 8708 21c2 8100 ff40 ffc0 50a0 8708      ....!..@....P..
 80a4034:	21c2 8000 7840 1e00 6c98 000a 2080 0bf8     .!..@x...l... ..
 80a4044:	6002 c087 a0e3 4890 f227 0409 4182 c071     .`.....H'....Aq.
 80a4054:	08f9 1042 2784 1fc0 0202 0202 8202 c682     ..B..'..........
 80a4064:	e378 11a1 0509 2183 8408 7041 e0c0 4040     x......!..Ap..@@
 80a4074:	4040 4140 4141 e0ff 19ec 2845 a4a4 9194     @@@AAA....E(....
 80a4084:	0212 5c40 c31c 94b0 244a 4992 8a14 7043     ..@\....J$.I..Cp
 80a4094:	1e80 9031 1850 060c 8202 0f63 fe00 4143     ..1.P.....c...CA
 80a40a4:	4241 407c 4040 1cf0 9031 1850 060c 8202     AB|@@@..1.P.....
 80a40b4:	1f63 0704 3092 21fe 4890 2324 10e1 4184     c....0.!.H$#...A
 80a40c4:	c070 cd3a 030a 8001 c7c1 ff78 62c4 0021     p.:.......x..b!.
 80a40d4:	4080 1020 1f08 e300 90a0 2448 0912 8204     .@ .......H$....
 80a40e4:	0e22 f100 10e8 1082 1042 0422 5080 000c     ".......B."..P..
 80a40f4:	f180 09e8 2511 a844 0c55 8ca1 8431 e330     .....%D.U...1.0.
 80a4104:	88a0 8082 c080 4490 7141 e3c0 88a0 8182     .......DAq......
 80a4114:	4040 1020 1f08 fd00 200a 0481 2110 fc83     @@ ...... ...!..
 80a4124:	aaea c0aa 8180 0203 0404 0808 1010 2020     ..............  
 80a4134:	55d5 c055 5110 2822 ff20 88e0 7e80 8000     .UU..Q"( ....~..
 80a4144:	ec47 0a14 fb0c 20c0 0b10 12c6 0205 4081     G...... .......@
 80a4154:	b7b0 3a80 0c8e 1008 9e10 0003 4780 34a4     ...:.........G.4
 80a4164:	050a 8102 8f21 3c60 8143 80ff 6180 3d3e     ....!.`<C....a>=
 80a4174:	3e04 0441 4110 800f a13d 50a0 1428 0c09     .>A..A..=..P(...
 80a4184:	017a 8701 c080 1020 c60b 0932 8204 2041     z..... ...2...A 
 80a4194:	e0b8 0110 81c0 0402 1108 10fc 103e 2184     ............>..!
 80a41a4:	4208 003f 40c0 4f40 5844 4870 4244 70c7     .B?..@@ODXpHDB.p
 80a41b4:	4020 0281 0804 2310 b7f8 6264 1831 468c      @.....#..db1..F
 80a41c4:	9123 315e 4890 1224 0509 3ec7 a031 1830     #.^1.H$....>1.0.
 80a41d4:	050c 7c8c 30de 2890 0a14 8405 40bc 3820     ...|.0.(.....@ 8
 80a41e4:	3d00 a0a1 2850 0914 7a0c 0001 e080 a1ce     .=..P(...z......
 80a41f4:	0482 1008 3a7c 0b8d f080 de70 4040 40fc     ....|:....p.@@.@
 80a4204:	4040 4040 3e41 41c3 4141 4141 3d43 a0e3     @@@@A>.AAAAAC=..
 80a4214:	8490 2042 50a0 e310 92c0 254b a992 4498     ..B .P....K%...D
 80a4224:	31e3 0105 4101 0511 e3c7 90a0 4284 a040     .1...A.......B@.
 80a4234:	1060 0810 003e 08fd 8220 1008 29bf a224     `...>... ....)$.
 80a4244:	2649 f8ff 2489 498a 612c 3024 5353 3144     I&...$.I,a$0SSD1
 80a4254:	3033 2036 6c61 6f6c 6163 6974 6e6f 6620     306 allocation f
 80a4264:	6961 656c 0064 6946 616c 656d 746e 6177     ailed.Filamentwa
 80a4274:	6761 0065 5746 5620 7265 6973 6e6f 3020     age.FW Version 0
 80a4284:	312e 4300 6c61 6269 6172 6974 6e6f 4300     .1.Calibration.C
 80a4294:	6c61 6269 6172 6974 6e6f 7320 6174 7472     alibration start
 80a42a4:	6465 002e 6441 2064 6163 696c 7262 7461     ed..Add calibrat
 80a42b4:	6465 4100 6464 6320 6c61 6269 6172 6574     ed.Add calibrate
 80a42c4:	2064 616d 7373 002e 6143 696c 7262 7461     d mass..Calibrat
 80a42d4:	6f69 206e 6f63 706d 656c 6574 002e 6152     ion complete..Ra
 80a42e4:	3a77 0020 202c 5700 6965 6867 3a74 0000     w: ., .Weight:..

080a42f4 <_ZL19FreeMono9pt7bGlyphs>:
 80a42f4:	0000 0000 000b 0001 0000 0b02 040b 00f6     ................
 80a4304:	0003 0506 020b 00f6 0007 0c07 020b 00f6     ................
 80a4314:	0012 0c08 010b 00f6 001e 0b07 020b 00f6     ................
 80a4324:	0028 0a07 020b 00f7 0031 0503 040b 00f6     (.......1.......
 80a4334:	0033 0d02 050b 00f6 0037 0d02 040b 00f6     3.......7.......
 80a4344:	003b 0707 020b 00f6 0042 0707 020b 00f8     ;.......B.......
 80a4354:	0049 0503 020b 00ff 004b 0109 010b 00fb     I.......K.......
 80a4364:	004d 0202 040b 00ff 004e 0d07 020b 00f5     M.......N.......
 80a4374:	005a 0b07 020b 00f6 0064 0b05 030b 00f6     Z.......d.......
 80a4384:	006b 0b07 020b 00f6 0075 0b08 010b 00f6     k.......u.......
 80a4394:	0080 0b06 030b 00f6 0089 0b07 020b 00f6     ................
 80a43a4:	0093 0b07 020b 00f6 009d 0b07 020b 00f6     ................
 80a43b4:	00a7 0b07 020b 00f6 00b1 0b07 020b 00f6     ................
 80a43c4:	00bb 0802 040b 00f9 00bd 0b03 030b 00f9     ................
 80a43d4:	00c2 0808 010b 00f8 00ca 0409 010b 00fa     ................
 80a43e4:	00cf 0809 010b 00f8 00d8 0a07 020b 00f7     ................
 80a43f4:	00e1 0c08 020b 00f6 00ed 0a0b 000b 00f7     ................
 80a4404:	00fb 0a09 010b 00f7 0107 0a09 010b 00f7     ................
 80a4414:	0113 0a09 010b 00f7 011f 0a09 010b 00f7     ................
 80a4424:	012b 0a09 010b 00f7 0137 0a0a 010b 00f7     +.......7.......
 80a4434:	0144 0a09 010b 00f7 0150 0a05 030b 00f7     D.......P.......
 80a4444:	0157 0a08 020b 00f7 0161 0a09 010b 00f7     W.......a.......
 80a4454:	016d 0a08 020b 00f7 0177 0a0b 000b 00f7     m.......w.......
 80a4464:	0185 0a09 010b 00f7 0191 0a09 010b 00f7     ................
 80a4474:	019d 0a08 010b 00f7 01a7 0d09 010b 00f7     ................
 80a4484:	01b6 0a09 010b 00f7 01c2 0a07 020b 00f7     ................
 80a4494:	01cb 0a09 010b 00f7 01d7 0a09 010b 00f7     ................
 80a44a4:	01e3 0a0b 000b 00f7 01f1 0a0b 000b 00f7     ................
 80a44b4:	01ff 0a09 010b 00f7 020b 0a09 010b 00f7     ................
 80a44c4:	0217 0a07 020b 00f7 0220 0d02 050b 00f6     ........ .......
 80a44d4:	0224 0d07 020b 00f5 0230 0d02 040b 00f6     $.......0.......
 80a44e4:	0234 0507 020b 00f6 0239 010b 000b 0002     4.......9.......
 80a44f4:	023b 0303 030b 00f5 023d 0809 010b 00f9     ;.......=.......
 80a4504:	0246 0b09 010b 00f6 0253 0807 020b 00f9     F.......S.......
 80a4514:	025a 0b09 010b 00f6 0267 0808 010b 00f9     Z.......g.......
 80a4524:	026f 0b06 030b 00f6 0278 0b09 010b 00f9     o.......x.......
 80a4534:	0285 0b09 010b 00f6 0292 0a07 020b 00f7     ................
 80a4544:	029b 0d05 030b 00f7 02a4 0b08 020b 00f6     ................
 80a4554:	02af 0b07 020b 00f6 02b9 0809 010b 00f9     ................
 80a4564:	02c2 0809 010b 00f9 02cb 0809 010b 00f9     ................
 80a4574:	02d4 0b09 010b 00f9 02e1 0b09 010b 00f9     ................
 80a4584:	02ee 0807 030b 00f9 02f5 0807 020b 00f9     ................
 80a4594:	02fc 0a08 020b 00f7 0306 0808 010b 00f9     ................
 80a45a4:	030e 0809 010b 00f9 0317 0809 010b 00f9     ................
 80a45b4:	0320 0809 010b 00f9 0329 0b09 010b 00f9      .......).......
 80a45c4:	0336 0807 020b 00f9 033d 0d03 040b 00f6     6.......=.......
 80a45d4:	0342 0d01 050b 00f6 0344 0d03 040b 00f6     B.......D.......
 80a45e4:	0349 0307 020b 00fa                         I.......

080a45ec <_ZL13FreeMono9pt7b>:
 80a45ec:	3f04 080a 42f4 080a 7e20 0012               .?...B.. ~..

080a45f8 <_ZTVN8particle13__SPISettingsE>:
	...
 80a4600:	040d 080a 6564 6166 6c75 2074 4d00 4253     ....default .MSB
 80a4610:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
 80a4620:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
 80a4630:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
 80a4640:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

080a464c <_ZTV7Q2HX711>:
	...
 80a4654:	0469 080a 046b 080a                         i...k...

080a465c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
 80a465c:	0100 0703 1f0f 7f3f                         ......?.

080a4664 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
 80a4664:	02da da81                                        ...

080a4667 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
 80a4667:	02da 8f81                                   ....

080a466b <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
 80a466b:	12da ae81                                        ...

080a466e <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
 80a466e:	d5ae a880                                   ....

080a4672 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
 80a4672:	00d3 8d40                                   ..@.

080a4676 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
 80a4676:	0020 c8a1                                    ...

080a467a <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
 80a467a:	40db a6a4 af2e                              .@....

080a4680 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
 80a4680:	8000 e0c0 f8f0 fefc                         ........

080a4688 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
 80a4688:	0022 21ff 0000 0000                         "..!....

080a4690 <_ZTV16Adafruit_SSD1306>:
	...
 80a4698:	0515 080a 052d 080a 14e5 080a 21d9 080a     ....-........!..
 80a46a8:	0541 080a 0f3d 080a 0ef5 080a 0f25 080a     A...=.......%...
 80a46b8:	0f01 080a 0f13 080a 0e35 080a 0f3d 080a     ........5...=...
 80a46c8:	111b 080a 06eb 080a 0cb3 080a 0c65 080a     ............e...
 80a46d8:	0fb7 080a 0ffd 080a 1019 080a 1099 080a     ................

080a46e8 <_ZL12splash1_data>:
 80a46e8:	0000 0000 0100 0080 0000 0000 0000 0000     ................
 80a46f8:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
 80a4708:	0000 0000 0000 c007 0000 0000 0000 0000     ................
 80a4718:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
 80a4728:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
 80a4738:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
 80a4750:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
 80a4760:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
 80a4770:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
 80a4780:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
 80a4790:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
 80a47a0:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
 80a47b0:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
 80a47c0:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
 80a47d0:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
 80a47e0:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
 80a47f0:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
 80a4800:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
 80a4810:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
 80a4820:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
 80a4830:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
 80a4840:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
 80a4850:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
 80a4860:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
 80a4878:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
 80a4890:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
 80a48a0:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
 80a48b0:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
 80a48c0:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
 80a48d0:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
 80a48e0:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
 80a48f0:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
 80a4900:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
 80a4910:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
 80a4920:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
 80a4930:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
 80a4940:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
 80a4950:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
 80a4960:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
 80a4970:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
 80a4980:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
 80a4990:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
 80a49a0:	fdff 5b6b 6adb c0fd                         ..k[.j..

080a49a8 <_ZL12splash2_data>:
 80a49a8:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
 80a49b8:	e000 0000 0000 0000 0000 0000 0000 0100     ................
 80a49c8:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
 80a49e4:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
 80a49f4:	f007 0000 0000 0000 0000 0000 0000 0700     ................
 80a4a04:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
 80a4a14:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
 80a4a24:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
 80a4a34:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
 80a4a44:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
 80a4a54:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
 80a4a64:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
 80a4a74:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
 80a4a84:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
 80a4a94:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
 80a4aa4:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
 80a4ab4:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
 80a4ac4:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
 80a4ad4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
 80a4ae4:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
 80a4af4:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
 80a4b04:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
 80a4b14:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
 80a4b24:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
 80a4b3c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
 80a4b4c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
 80a4b5c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
 80a4b6c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
 80a4b7c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

080a4b88 <_ZTV12Adafruit_GFX>:
	...
 80a4b98:	14e5 080a 21d9 080a 00a1 080a 0f3d 080a     .....!......=...
 80a4ba8:	0ef5 080a 0f25 080a 0f01 080a 0f13 080a     ....%...........
 80a4bb8:	0e35 080a 0f3d 080a 111b 080a 1119 080a     5...=...........
 80a4bc8:	0f3f 080a 0f7d 080a 0fb7 080a 0ffd 080a     ?...}...........
 80a4bd8:	1019 080a 1099 080a                         ........

080a4be0 <_ZL4font>:
 80a4be0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a4bf0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a4c00:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a4c10:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a4c20:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a4c30:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a4c40:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a4c50:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a4c60:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a4c70:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a4c80:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a4c90:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a4ca0:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a4cb0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a4cc0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a4cd0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a4ce0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a4cf0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a4d00:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a4d10:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a4d20:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a4d30:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a4d40:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a4d50:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a4d60:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a4d70:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a4d80:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a4d90:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a4da0:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a4db0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a4dc0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a4dd0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a4de0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a4df0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a4e00:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a4e10:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a4e20:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a4e30:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a4e40:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a4e50:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a4e60:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a4e70:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 80a4e80:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a4e90:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a4ea0:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 80a4eb0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a4ec0:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 80a4ed0:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 80a4ee0:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 80a4ef0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a4f00:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a4f10:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a4f20:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a4f30:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a4f40:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a4f50:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 80a4f60:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 80a4f70:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 80a4f80:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 80a4f90:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 80a4fa0:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 80a4fb0:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 80a4fc0:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 80a4fd0:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 80a4fe0:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 80a4ff0:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 80a5000:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 80a5010:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 80a5020:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 80a5030:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 80a5040:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 80a5050:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 80a5060:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 80a5070:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 80a5080:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 80a5090:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 80a50a0:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 80a50b0:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 80a50c0:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 80a50d0:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

080a50e0 <_ZTVN5spark12NetworkClassE>:
	...
 80a50e8:	1a29 080a 1a33 080a 1a3d 080a 1a47 080a     )...3...=...G...
 80a50f8:	1a51 080a 1a5d 080a 1a69 080a 1a75 080a     Q...]...i...u...
 80a5108:	1a7d 080a 1a87 080a 1a91 080a               }...........

080a5114 <_ZTVN5spark9WiFiClassE>:
	...
 80a511c:	1b97 080a 1b8d 080a 1b83 080a 1af5 080a     ................
 80a512c:	1b77 080a 1b6b 080a 1b5f 080a 1b57 080a     w...k..._...W...
 80a513c:	1b4d 080a 1b43 080a 1aff 080a               M...C.......

080a5148 <_ZTV8SPIClass>:
	...
 80a5150:	1bb5 080a 1bb7 080a                         ........

080a5158 <_ZL14clock_divisors>:
 80a5158:	0800 1810 2820 3830                         .... (08

080a5160 <_ZTV7TwoWire>:
	...
 80a5168:	1d1b 080a 1d65 080a 1d3d 080a 1d1d 080a     ....e...=.......
 80a5178:	1d45 080a 1d4d 080a 1d55 080a 1d5d 080a     E...M...U...]...

080a5188 <_ZTV9USBSerial>:
	...
 80a5190:	1dd5 080a 1e25 080a 1e33 080a 21d9 080a     ....%...3....!..
 80a51a0:	1e11 080a 1dd7 080a 1ded 080a 1e1f 080a     ................
 80a51b0:	1e03 080a 1dd1 080a                         ........

080a51b8 <_ZTV9IPAddress>:
	...
 80a51c0:	1f85 080a 1f75 080a 1f77 080a 005a 2b25     ....u...w...Z.%+
 80a51d0:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a51e0:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a51f0:	6974 656d 6200 7561 0064 6553 6972 6c61     time.baud.Serial
 80a5200:	5500 4253 6553 6972 6c61 0031 7974 6570     .USBSerial1.type
 80a5210:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
 80a5220:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
 80a5230:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
 80a5240:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
 80a5250:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
 80a5260:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
 80a5270:	3130 7530 0020 205d 2500 0064 2928 203a     010u .] .%d.(): 
 80a5280:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
 80a5290:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
 80a52a0:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
 80a52b0:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
 80a52c0:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
 80a52d0:	6c61 006c 616e 006e 766f 0066 6e69 0066     all.nan.ovf.inf.

080a52e0 <_ZTV11USARTSerial>:
	...
 80a52e8:	24ed 080a 253d 080a 254b 080a 21d9 080a     .$..=%..K%...!..
 80a52f8:	2501 080a 2523 080a 250f 080a 2537 080a     .%..#%...%..7%..
 80a5308:	24ef 080a 24f3 080a                         .$...$..

080a5310 <__sf_fake_stdin>:
	...

080a5330 <__sf_fake_stdout>:
	...

080a5350 <__sf_fake_stderr>:
	...
 80a5370:	0043                                        C.

080a5372 <link_const_variable_data_end>:
	...

080a5374 <link_constructors_location>:
 80a5374:	080a03a1 	.word	0x080a03a1
 80a5378:	080a0465 	.word	0x080a0465
 80a537c:	080a050f 	.word	0x080a050f
 80a5380:	080a0e31 	.word	0x080a0e31
 80a5384:	080a1613 	.word	0x080a1613
 80a5388:	080a1617 	.word	0x080a1617
 80a538c:	080a1ae1 	.word	0x080a1ae1
 80a5390:	080a1ba1 	.word	0x080a1ba1
 80a5394:	080a2199 	.word	0x080a2199
 80a5398:	080a21b5 	.word	0x080a21b5
 80a539c:	080a21c9 	.word	0x080a21c9
 80a53a0:	080a2665 	.word	0x080a2665
 80a53a4:	080a2861 	.word	0x080a2861
 80a53a8:	080a2891 	.word	0x080a2891
 80a53ac:	080a29ed 	.word	0x080a29ed
 80a53b0:	080a2a71 	.word	0x080a2a71
 80a53b4:	080a2b35 	.word	0x080a2b35
 80a53b8:	080a2bf9 	.word	0x080a2bf9

080a53bc <link_constructors_end>:
 80a53bc:	00000000 	.word	0x00000000
